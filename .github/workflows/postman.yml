name: 'postman'
on:
  pull_request:
    branches:
      - main
  push:
    branches: [ '*' ]  # All branches for direct commits
  workflow_dispatch:  # Manual trigger
jobs:
  postman:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set npm token
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "@linode:registry=https://npm.pkg.github.com/linode" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
          echo '::set-output name=diff::1'
      - name: Install Node
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install
          nvm use
          node -v
          npm install
      - uses: actions/checkout@v4
        with:
          repository: linode/apl-core
          path: apl-core
      - name: Create Git repo
        run: |
          readonly env_dir="$HOME/workspace/linode/values-ofld1"
          readonly apl_core_test_fixtures="$HOME/work/apl-api/apl-api/apl-core/tests/fixtures"
          mkdir -p "$(dirname $env_dir)"
          cp -R $apl_core_test_fixtures $env_dir
          cd $env_dir
          git init
          git checkout -b main
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -a -m 'init'
          # Mark this repo as bare so the local_env_dir can push to env_dir repo
          git config --bool core.bare true
          echo "The values bare repo has been successfully set up"
          ls
      - name: Start core server
        run: |
          cd apl-core
          npm install
          npm run server > $GITHUB_WORKSPACE/core.log 2>&1 &
#      - name: Start api
#        run: |
#          npm install
#          cp .env.sample .env
#          RUNNER_TRACKING_ID="" && npm run dev > $GITHUB_WORKSPACE/api.log 2>&1 &
      - uses: JarvusInnovations/background-action@v1
        name: Bootstrap System Under Test (SUT)
        with:
          run: |
            npm run dev
          # your step-level and job-level environment variables are available to your commands as-is
          # npm install will count towards the wait-for timeout
          # whenever possible, move unrelated scripts to a different step
          # to background multiple processes: add & to the end of the command

          wait-on: |
            http://localhost:8080/v2/builds
          # IMPORTANT: to use environment variables in wait-on, you must use this form: ${{ env.VAR }}
          # See wait-on section below for all resource types and prefixes

          tail: true # true = stderr,stdout
          # This will allow you to monitor the progress live

          wait-for: 5m

          log-output-if: failure
          # failure = exit-early or timeout
#      - name: Wait for api
#        run: |
#          echo "Waiting for API to be ready..."
#          while ! curl -s -f -o /dev/null http://localhost:8080/v2/builds; do
#            sleep 10
#          done
#          echo "API is ready!"
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}

      - name: Run API tests
        run: |
          postman collection run "44183872-d3b3cdc9-ba1f-4a71-bcba-6a3cb3dc9643" -e "43715313-d380e919-5142-44e6-b52c-02f8b04da8fa"  -i "44183872-cb769d53-ad67-4f87-9d74-eabf11adec74"
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: |
            core.log
            api.log
