openapi: 3.0.0
security:
  - groupAuthz: []
info:
  title: The otomi-stack API
  version: 0.1.0
# the x- prefix allows to define own objects that are ignored by openapi spec validation
x-fields:
  domain: &domainNameField
    type: string
    pattern: ^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
  repository: &repositoryField
    type: string
    pattern: ^[a-z0-9]+(?:[/._-]{1,2}[a-z0-9]+)*$
    description: A container image repository
  memoryQuantity: &k8sResourceMemoryQuantityField
    type: string
    pattern: ^[0-9]+\.?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$
  cpuQuantity: &k8sResourceCpuQuantityField
    type: string
    pattern: ^([0-9]+\.[0-9]{1,2})|([0-9]{2,3}m)?$
  env: &envField
    type: string
    pattern: ^[a-zA-Z0-9_]*$
  annotation: &k8sAnnotationField
    type: string
    pattern: ^((.){1,253}\/)?(.){1,63}$
  uuid: &uuidField
    type: string
    pattern: ^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$
  name: &nameField
    type: string
    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$

x-post-responses: &DefaultPostResponses
  '400':
    description: Bad Request
    content:
      'application/json':
        schema:
          $ref: '#/components/schemas/OpenApiValidationError'
  '409':
    description: Resource already exists
    content:
      'application/json':
        schema:
          $ref: '#/components/schemas/OtomiStackError'

x-get-responses: &DefaultGetResponses
  '400':
    description: Bad Request
    content:
      'application/json':
        schema:
          $ref: '#/components/schemas/OpenApiValidationError'
  '404':
    description: Resource does not exists
    content:
      'application/json':
        schema:
          $ref: '#/components/schemas/OtomiStackError'

x-acl-admin: &AclAdmin
  team: [read]
  admin: [read, write]

paths:
  /readiness:
    get:
      security: []
      description: Check readiness
      responses:
        '200':
          description: Service is ready
  /clusters:
    get:
      operationId: getClusters
      description: Get available clusters
      responses:
        '200':
          description: Successfully obtained cluster collection
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Clusters'

  /services:
    get:
      operationId: getAllServices
      description: Get services from a given team
      responses:
        '200':
          description: Successfully obtained all services
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Services'
        '400':
          description: Bad Request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OpenApiValidationError'

  /teams:
    get:
      operationId: getTeams
      description: Get teams collection
      responses:
        '200':
          description: Successfully obtained teams collection
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Teams'
    post:
      operationId: createTeam
      description: Create a team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Team object that needs to be added to the collection
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully obtained teams collection
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Team'

  '/teams/{teamId}':
    get:
      operationId: getTeam
      description: Get a specific team
      parameters:
        - name: teamId
          in: path
          description: ID of team to return
          required: true
          schema:
            type: string
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained team
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Team'
    put:
      operationId: editTeam
      description: Edit a team
      parameters:
        - name: teamId
          in: path
          description: ID of team to return
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Team object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited team
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      operationId: deleteTeam
      description: Delete team
      parameters:
        - name: teamId
          in: path
          description: ID of team to delete
          required: true
          schema:
            type: string
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a team
  '/teams/{teamId}/services':
    get:
      operationId: getTeamServices
      description: Get services from a given team
      parameters:
        - name: teamId
          in: path
          description: ID of team
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully obtained services
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Services'
        '400':
          description: Bad Request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OpenApiValidationError'
    post:
      operationId: createService
      description: Create a service
      parameters:
        - name: teamId
          in: path
          description: ID of team
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Service object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored service configuration
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Service'

  '/teams/{teamId}/services/{name}':
    get:
      operationId: getService
      description: Get a service from a given team
      parameters:
        - name: teamId
          in: path
          description: ID of team
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the service
          required: true
          schema:
            type: string
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained service configuration
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Service'
    put:
      operationId: editService
      description: Edit a service from a given team
      parameters:
        - name: teamId
          in: path
          description: ID of team to return
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the service
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Service object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited service
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      operationId: deleteService
      description: Delete a service from a given team
      parameters:
        - name: teamId
          in: path
          description: ID of team to delete
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the service
          required: true
          schema:
            type: string
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a service

  /deployments:
    post:
      operationId: deploy
      description: Trigger a deployment (only for admin)
      responses:
        '202':
          description: Deployment has been triggered
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Deployment'
        '409':
          description: Unable not push data to git repo
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OtomiStackError'
  /apiDocs:
    get:
      security: []
      description: Get OpenApi document
      responses:
        '200':
          description: The requested apiDoc.
          content:
            'application/json':
              schema:
                type: object
        default:
          description: The requested apiDoc.
servers:
  - url: '/v1'

# -------------------- Components
components:
  securitySchemes:
    groupAuthz:
      type: apiKey
      name: Auth-Group
      in: header
  schemas:
    AzureMonitor: &AzureMonitor
      type: object
      description: Azure Monitor is the platform service that provides a single source for monitoring Azure resources.
      anyOf:
        - title: No Azure monitoring
          nullable: true
          properties: {}
        - title: Azure monitoring with global settings
          type: object
          properties:
            useAdmin:
              type: boolean
              default: true
          required:
            - useAdmin
        - title: Azure monitoring with custom settings
          type: object
          properties:
            clientId:
              description:
                'An Azure client ID (Azure Active Directory -> App Registrations -> Choose your app -> Application ID)'
              <<: *uuidField
            clientSecret:
              type: string
              writeOnly: true
              description:
                An Azure client secret (Azure Active Directory -> App Registrations -> Choose your app -> Keys -> Create
                a key -> Use client secret)
            logAnalyticsClientId:
              description: 'A dedicated client ID for Azure Log Analytics. Default: form clientId field'
              <<: *uuidField
            logAnalyticsClientSecret:
              description: 'A client Secret for Azure Log Analytics. Default: form clientSecret field'
              type: string
              writeOnly: true
            appInsightsAppId:
              description: 'An API key for use with an Application Insights resource. Default: form clientId field'
              type: string
            appInsightsAppSecret:
              description:
                'An API secret for use with an Application Insights resource. Default: form clientSecret field'
              type: string
              writeOnly: true
          required:
            - clientId
            - clientSecret

    Azure: &Azure
      type: object
      properties:
        monitor:
          <<: *AzureMonitor
          type: object

    KubernetesService: &KubernetesService
      type: object
      properties: &KubernetesServiceProperties
        name:
          type: string
          description: A name of existing kubernetes service
      required:
        - name
      additionalProperties: false

    x-clusters: &Clusters
      type: array
      description: Clusters on which deployment takes effect
      items:
        type: object
        properties:
          name:
            description: cluster name
            example: dev
            type: string
          cloud:
            description: cluster provider name
            example: google
            type: string

    x-available-clusters: &AvailableClusters # description: Select from available clusters
      type: array
      items:
        type: string
      uniqueItems: true

    x-annotations: &K8sAnnotation
      description: Kubernetes annotations with arbitrary metadata
      type: array
      items:
        type: object
        properties:
          name:
            title: Annotation name
            description: Annotation name
            <<: *k8sAnnotationField
          value:
            title: Annotation value
            type: string
            maxLength: 32767

    KnativeServicePredeployed: &KnativeServicePredeployed
      type: object
      properties: &KnativeServicePredeployedProperties
        predeployed:
          type: boolean
          default: true
          readOnly: true
      required:
        - predeployed
      additionalProperties: false

    KnativeService: &KnativeService # description: Knative service definition
      type: object
      properties: &KnativeServiceProperties
        image:
          title: Container image
          type: object
          properties:
            repository:
              <<: *repositoryField
            tag:
              type: string
          required:
            - repository
            - tag
        env:
          title: Environment variables
          # description: Environment variables for containers
          type: array
          items:
            type: object
            properties:
              name:
                <<: *envField
              value:
                type: string
                maxLength: 131072
            required:
              - name
              - value
        resources:
          title: Pod resources
          # description: Compute resources for containers
          type: object
          properties:
            requests:
              type: object
              properties:
                cpu:
                  description: 'The guaranteed amount of CPU'
                  <<: *k8sResourceCpuQuantityField
                  default: 50m
                memory:
                  description: 'The guaranteed amount of RAM'
                  <<: *k8sResourceMemoryQuantityField
                  default: 64Mi
              required:
                - cpu
                - memory
            limits:
              type: object
              properties:
                cpu:
                  description: 'The maximal amount of CPU'
                  <<: *k8sResourceCpuQuantityField
                  default: 100m
                memory:
                  description: 'The maximal amount of RAM'
                  <<: *k8sResourceMemoryQuantityField
                  default: 128Mi
              required:
                - cpu
                - memory
        annotations:
          title: Pod annotations
          <<: *K8sAnnotation
        autoCD:
          title: Continuous delivery pipeline
          description: Select filter type and define image tag pattern
          type: object
          oneOf:
            - title: Semver filter
              properties:
                semver:
                  title: Image tag pattern
                  type: string
                  example: 'PATCH only: "~1.1", MINOR and PATCH only "~1", ALL "*",  ">=1.2.3-0"'
                  description:
                    'Use this filter if your images tags follow semantic versioning rules (MAJOR.MINOR.PATCH). E.g.:
                    PATCH only: "~1.1", MINOR and PATCH only "~1", ALL "*"'
              required:
                - semver
            - title: Glob filter
              properties:
                glob:
                  title: Image tag pattern
                  type: string
                  description: 'Use this filter if you want to make simple non-standard patterns. E.g.: "master-v1.*.*"'
                  example: 'master-v1.*.*'
              required:
                - glob
      required:
        - image
        - resources
      additionalProperties: false

    Clusters:
      <<: *AvailableClusters
    Teams:
      type: object
      properties:
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
    Services:
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
    Deployment:
      properties:
        id:
          type: integer
        status:
          type: string
          readOnly: true
          description: Deployment status
          enum:
            - in-progress
            - completed
            - failed
    Team:
      type: object
      properties:
        name:
          <<: *nameField
          example: 'team-1'
          x-acl:
            <<: *AclAdmin
          description: A team name
        clusters:
          title: Clusters
          <<: *AvailableClusters
          minItems: 1
          x-acl:
            <<: *AclAdmin
        password:
          type: string
          # description: "A secret that is used access multi-tenant log aggregation system (Loki)"
          writeOnly: true
        teamId:
          type: string
          readOnly: true
        azure:
          <<: *Azure
      required:
        - name
        - clusters

    ServiceIngress:
      properties: &ServiceIngress
        domain:
          title: Domain
          description: A managed domain zone
          type: string
        subdomain:
          type: string
          description: A subdomain that is going to be used together with with domain zone
          <<: *domainNameField
        hasSingleSignOn:
          title: Add Single Sign On
          type: boolean
          default: false
        hasCert:
          title: Generate certificate for me
          type: boolean
          default: true
          # description: If true certificate is generated automatically. Otherwise it is expected that administrator provides cert as a secret 'cert-team-$teamName-$serviceName' for a given team.
        certArn:
          type: string
          title: Certificate ARN
          description: Only if hasCert set to true and deployed on AWS
          example: arn:aws:acm:eu-central-1:xxx:certificate/xxx
      additionalProperties: false

    Service:
      properties:
        name:
          <<: *nameField
          description: A service name
          example: service01
        clusterId:
          type: string
          description: A kubernetes cluster for the service
        ingress:
          title: Exposure
          type: object
          x-acl:
            <<: *AclAdmin
          anyOf:
            - title: No public URL
              nullable: true
              properties:
                internal:
                  type: string
                  nullable: true
              additionalProperties: false
            - title: With public URL
              properties:
                <<: *ServiceIngress

        spec:
          title: Type
          type: object
          anyOf:
            - title: Knative service
              properties:
                <<: *KnativeServiceProperties
            - title: Existing Knative service
              properties:
                <<: *KnativeServicePredeployedProperties
            - title: Existing Kubernetes service
              properties:
                <<: *KubernetesServiceProperties

        teamId:
          type: string
          readOnly: true
        serviceId:
          type: string
          readOnly: true
      required:
        - name
        - clusterId

    OpenApiValidationError:
      properties:
        status:
          type: integer
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      properties:
        path:
          type: string
        errorCode:
          type: string
        message:
          type: string
        location:
          type: string
          enum:
            - body
            - path
    OtomiStackError:
      properties:
        message:
          type: string
