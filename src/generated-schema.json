{
  "openapi": "3.0.0",
  "security": [
    {
      "groupAuthz": []
    }
  ],
  "info": {
    "title": "The otomi-stack API",
    "description": "Holds the entire schema needed by console to autogenerate forms",
    "version": "PLACEHOLDER"
  },
  "externalDocs": {
    "description": "This is the base url of the external documentation",
    "url": "https://otomi.io/"
  },
  "x-responses": {
    "BadRequest": {
      "description": "Bad Request",
      "content": {
        "application/json": {
          "schema": {
            "x-acl": [],
            "properties": {
              "status": {
                "type": "integer"
              },
              "errors": {
                "type": "array",
                "items": {
                  "x-acl": [],
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "errorCode": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "enum": ["body", "path"]
                    }
                  },
                  "type": "object"
                }
              }
            },
            "type": "object"
          }
        }
      }
    },
    "OtomiStackError": {
      "description": "Resource already exists",
      "content": {
        "application/json": {
          "schema": {
            "x-acl": [],
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      }
    },
    "NotFound": {
      "description": "Resource does not exist",
      "content": {
        "application/json": {
          "schema": {
            "x-acl": [],
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      }
    }
  },
  "x-post-responses": {
    "400": {
      "description": "Bad Request",
      "content": {
        "application/json": {
          "schema": {
            "x-acl": [],
            "properties": {
              "status": {
                "type": "integer"
              },
              "errors": {
                "type": "array",
                "items": {
                  "x-acl": [],
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "errorCode": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "enum": ["body", "path"]
                    }
                  },
                  "type": "object"
                }
              }
            },
            "type": "object"
          }
        }
      }
    },
    "409": {
      "description": "Resource already exists",
      "content": {
        "application/json": {
          "schema": {
            "x-acl": [],
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      }
    }
  },
  "x-get-responses": {
    "400": {
      "description": "Bad Request",
      "content": {
        "application/json": {
          "schema": {
            "x-acl": [],
            "properties": {
              "status": {
                "type": "integer"
              },
              "errors": {
                "type": "array",
                "items": {
                  "x-acl": [],
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "errorCode": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "enum": ["body", "path"]
                    }
                  },
                  "type": "object"
                }
              }
            },
            "type": "object"
          }
        }
      }
    },
    "404": {
      "description": "Resource does not exist",
      "content": {
        "application/json": {
          "schema": {
            "x-acl": [],
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      }
    }
  },
  "paths": {
    "/clusters": {
      "get": {
        "operationId": "getClusters",
        "description": "Get available clusters",
        "x-aclSchema": "Clusters",
        "responses": {
          "200": {
            "description": "Successfully obtained cluster collection",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object",
                    "x-acl": {
                      "admin": ["read-any"],
                      "team": ["read-any"]
                    },
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "default": true
                      },
                      "name": {
                        "type": "string",
                        "description": "A cluster name",
                        "readOnly": true
                      },
                      "cloud": {
                        "type": "string",
                        "description": "A cloud provider name",
                        "readOnly": true
                      },
                      "domain": {
                        "type": "string",
                        "description": "A default cluster DNS zone",
                        "readOnly": true
                      },
                      "dnsZones": {
                        "type": "array",
                        "description": "A list of DNS zones that are available to the cluster",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "uniqueItems": true
                      },
                      "hasKnative": {
                        "description": "A flag that indicates capability for deploying serverless services by using Knative",
                        "type": "boolean",
                        "readOnly": true
                      },
                      "k8sVersion": {
                        "description": "A version of kubernetes that is installed on the cluster",
                        "type": "string",
                        "readOnly": true
                      },
                      "otomiVersion": {
                        "description": "A version of kubernetes that is installed on the cluster",
                        "type": "string",
                        "readOnly": true
                      },
                      "region": {
                        "description": "A physical location of the cluster",
                        "type": "string",
                        "readOnly": true
                      },
                      "clusterId": {
                        "description": "An unique cluster identifier",
                        "type": "string",
                        "readOnly": true
                      }
                    }
                  },
                  "type": "array",
                  "x-acl": {
                    "admin": ["read-any"],
                    "team": ["read-any"]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secrets": {
      "get": {
        "operationId": "getAllSecrets",
        "description": "Get all secrets",
        "x-aclSchema": "Secrets",
        "responses": {
          "200": {
            "description": "Successfully obtained all secrets",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "x-acl": {
                      "admin": ["read-any", "create-any", "update-any", "delete-any"],
                      "team": ["read", "create", "update", "delete"]
                    },
                    "properties": {
                      "id": {
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "type": "string",
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                        "title": "Name",
                        "description": "A secret name",
                        "example": "secret01"
                      },
                      "clusterId": {
                        "x-acl": {
                          "admin": ["read", "create"],
                          "team": ["read", "create"]
                        },
                        "title": "Cluster ID",
                        "type": "string",
                        "description": "A kubernetes cluster for the secret"
                      }
                    },
                    "required": ["name", "clusterId"],
                    "oneOf": [
                      {
                        "title": "Generic",
                        "properties": {
                          "type": {
                            "default": "generic",
                            "enum": ["generic"]
                          },
                          "entries": {
                            "type": "array",
                            "items": {
                              "description": "A property name at vaultPath",
                              "minItems": 1,
                              "pattern": "^[a-zA-Z0-9_]*$",
                              "type": "string",
                              "uniqueItems": true
                            }
                          }
                        },
                        "required": ["type", "entries"],
                        "type": "object"
                      },
                      {
                        "title": "Docker registry",
                        "properties": {
                          "type": {
                            "default": "docker-registry",
                            "enum": ["docker-registry"],
                            "type": "string"
                          },
                          "dockerconfig": {
                            "type": "string",
                            "enum": [".dockerconfig.json"],
                            "default": ".dockerconfig.json",
                            "readOnly": true
                          }
                        },
                        "required": ["type"],
                        "type": "object"
                      },
                      {
                        "title": "TLS",
                        "properties": {
                          "type": {
                            "default": "tls",
                            "enum": ["tls"],
                            "type": "string"
                          },
                          "crt": {
                            "type": "string",
                            "default": "tls.crt",
                            "description": "A Vault property name that contains PEM public key certificate"
                          },
                          "key": {
                            "type": "string",
                            "default": "tls.key",
                            "description": "A Vault property name that contains PEM private key certificate"
                          },
                          "ca": {
                            "type": "string",
                            "title": "CA",
                            "description": "A Vault property name that contains CA certificate content"
                          }
                        },
                        "required": ["type", "crt", "key"],
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-acl": {
                    "admin": ["read-any"],
                    "team": ["read-any"]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "operationId": "getAllServices",
        "description": "Get services from a given team",
        "x-aclSchema": "Services",
        "responses": {
          "200": {
            "description": "Successfully obtained all services",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "x-externalDocsPath": "docs/configuring-services",
                    "x-acl": {
                      "admin": ["delete-any", "read-any", "create-any", "update-any"],
                      "team": ["delete", "read", "create", "update"]
                    },
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "default": true
                      },
                      "id": {
                        "type": "string",
                        "readOnly": true
                      },
                      "name": {
                        "title": "Name",
                        "description": "A service name",
                        "example": "some-service",
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                        "type": "string"
                      },
                      "port": {
                        "description": "A service port",
                        "type": "integer",
                        "default": 80,
                        "minimum": 1,
                        "maximum": 65535
                      },
                      "clusterId": {
                        "title": "Cluster ID",
                        "type": "string",
                        "description": "A kubernetes cluster for the service",
                        "x-acl": {
                          "admin": ["read", "create"],
                          "team": ["read", "create"]
                        }
                      },
                      "ksvc": {
                        "title": "Type",
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "Knative service",
                            "nullable": true,
                            "properties": {
                              "serviceType": {
                                "type": "string",
                                "enum": ["ksvc"],
                                "default": "ksvc"
                              },
                              "scaleToZero": {
                                "title": "Scale to zero",
                                "description": "Scales to zero after 60 seconds and needs approximately 8 seconds to start back up.",
                                "type": "boolean",
                                "default": false
                              },
                              "image": {
                                "title": "Container image",
                                "nullable": true,
                                "properties": {
                                  "repository": {
                                    "description": "A container image repository.",
                                    "pattern": "^[a-z0-9]+(?:[/._-]{1,2}[a-z0-9]+)*$",
                                    "type": "string"
                                  },
                                  "tag": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": ["repository", "tag"]
                              },
                              "secrets": {
                                "type": "array",
                                "items": {
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "entries": {
                                      "title": "Entries",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "uniqueItems": true
                                    }
                                  },
                                  "required": ["name"],
                                  "type": "object"
                                }
                              },
                              "env": {
                                "title": "Environment variables",
                                "type": "array",
                                "nullable": true,
                                "items": {
                                  "properties": {
                                    "name": {
                                      "additionalProperties": false,
                                      "nullable": true,
                                      "x-patternProperties": {
                                        "[a-zA-Z_]{1,}[a-zA-Z0-9_]*": {
                                          "maxLength": 131072,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Environment variables"
                                    },
                                    "value": {
                                      "type": "string",
                                      "maxLength": 131072
                                    }
                                  },
                                  "required": ["name", "value"],
                                  "type": "object"
                                }
                              },
                              "resources": {
                                "title": "Pod resources",
                                "nullable": true,
                                "properties": {
                                  "requests": {
                                    "properties": {
                                      "cpu": {
                                        "description": "The guaranteed amount of CPU",
                                        "default": "50m",
                                        "example": ["1", "200m"],
                                        "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                        "type": "string"
                                      },
                                      "memory": {
                                        "description": "The guaranteed amount of RAM",
                                        "default": "64Mi",
                                        "example": ["1Mi", "0.5M"],
                                        "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                        "type": "string"
                                      }
                                    },
                                    "required": ["cpu", "memory"],
                                    "type": "object"
                                  },
                                  "limits": {
                                    "properties": {
                                      "cpu": {
                                        "description": "The maximum amount of CPU",
                                        "default": "100m",
                                        "example": ["1", "200m"],
                                        "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                        "type": "string"
                                      },
                                      "memory": {
                                        "description": "The maximum amount of RAM",
                                        "default": "128Mi",
                                        "example": ["1Mi", "0.5M"],
                                        "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                        "type": "string"
                                      }
                                    },
                                    "required": ["cpu", "memory"],
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "annotations": {
                                "title": "Pod annotations",
                                "description": "A set of annotations.",
                                "additionalProperties": false,
                                "x-patternProperties": {
                                  "^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){1,253}\\/)?([a-z0-9A-Z]+[a-z0-9A-Z-_.]+[a-z0-9A-Z]){1,63}$": {
                                    "pattern": "^((.){1,253}\\/)?(.){1,63}$",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "autoCD": {
                                "title": "Continuous delivery",
                                "description": "Deploys new images based on a tagging strategy",
                                "oneOf": [
                                  {
                                    "title": "Off",
                                    "nullable": true,
                                    "additionalProperties": false
                                  },
                                  {
                                    "title": "Semver versioning",
                                    "nullable": true,
                                    "properties": {
                                      "tagMatcher": {
                                        "type": "string",
                                        "enum": ["semver"],
                                        "default": "semver"
                                      },
                                      "semver": {
                                        "title": "Semver version pattern",
                                        "type": "string",
                                        "example": "PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\",  \">=1.2.3-0\"",
                                        "description": "Use this filter if your image tags follow semantic versioning rules (MAJOR.MINOR.PATCH). E.g.: PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\""
                                      }
                                    },
                                    "required": ["semver"],
                                    "type": "object"
                                  },
                                  {
                                    "title": "Glob pattern matching",
                                    "properties": {
                                      "tagMatcher": {
                                        "type": "string",
                                        "enum": ["glob"],
                                        "default": "glob"
                                      },
                                      "glob": {
                                        "title": "Glob string pattern",
                                        "type": "string",
                                        "description": "Use this filter if you want to make glob-style patterns. E.g.: \"main-v1.3.*\"",
                                        "example": "main-v1.3.*"
                                      }
                                    },
                                    "required": ["glob"],
                                    "type": "object",
                                    "additionalProperties": false
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "title": "Existing Knative service",
                            "properties": {
                              "serviceType": {
                                "type": "string",
                                "enum": ["ksvcPredeployed"],
                                "default": "ksvcPredeployed"
                              }
                            },
                            "required": ["serviceType"],
                            "type": "object"
                          },
                          {
                            "title": "Existing Kubernetes service",
                            "properties": {
                              "serviceType": {
                                "type": "string",
                                "enum": ["svcPredeployed"],
                                "default": "svcPredeployed"
                              }
                            },
                            "required": ["serviceType"],
                            "type": "object"
                          }
                        ]
                      },
                      "ingress": {
                        "title": "Exposure",
                        "x-acl": {
                          "team": ["read"]
                        },
                        "oneOf": [
                          {
                            "title": "Private",
                            "nullable": true,
                            "additionalProperties": false
                          },
                          {
                            "title": "Public URL",
                            "properties": {
                              "useDefaultSubdomain": {
                                "title": "Use team domain (preferred)",
                                "type": "boolean",
                                "default": true,
                                "description": "Use the team domain so that the URL reveals the owner."
                              },
                              "subdomain": {
                                "title": "Host",
                                "type": "string",
                                "nullable": true,
                                "description": "A host that is used to set DNS 'A' records",
                                "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                              },
                              "domain": {
                                "title": "DNS Zone",
                                "description": "A managed DNS zone",
                                "type": "string"
                              },
                              "path": {
                                "title": "URL path",
                                "description": "The path in the URL that the service should be mapped to (e.g. for microservices on one app/domain.)",
                                "type": "string"
                              },
                              "forwardPath": {
                                "title": "Forward path",
                                "description": "Forward the URL path into the service (don't rewrite to /)",
                                "type": "boolean"
                              },
                              "hasSingleSignOn": {
                                "title": "Authenticate with Single Sign On",
                                "type": "boolean",
                                "default": false
                              },
                              "hasCert": {
                                "title": "Already has a certificate",
                                "type": "boolean",
                                "default": false,
                                "description": "If true a certificate should exist already"
                              },
                              "certArn": {
                                "type": "string",
                                "title": "Certificate ARN",
                                "example": "arn:aws:acm:eu-central-1:xxx:certificate/xxx"
                              },
                              "certSelect": {
                                "type": "boolean",
                                "title": "Select existing secret name",
                                "default": true
                              },
                              "certName": {
                                "type": "string",
                                "title": "Secret name",
                                "example": "www-example-com"
                              }
                            },
                            "required": ["domain", "subdomain"],
                            "type": "object"
                          }
                        ]
                      },
                      "teamId": {
                        "type": "string",
                        "readOnly": true
                      }
                    },
                    "required": ["name", "clusterId", "teamId"],
                    "type": "object"
                  },
                  "type": "array",
                  "x-acl": {
                    "admin": ["read-any"],
                    "team": ["read-any"]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "operationId": "getTeams",
        "description": "Get teams collection",
        "x-aclSchema": "Teams",
        "responses": {
          "200": {
            "description": "Successfully obtained teams collection",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "x-externalDocsPath": "docs/configuring-teams",
                    "x-acl": {
                      "admin": ["delete-any", "read-any", "create-any", "update-any"],
                      "team": ["read-any", "update"]
                    },
                    "properties": {
                      "id": {
                        "description": "A lowercase name that starts with a letter and may contain dashes.",
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                        "type": "string",
                        "title": "ID",
                        "x-acl": {
                          "admin": ["read"],
                          "team": ["read"]
                        }
                      },
                      "name": {
                        "description": "A team name",
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                        "type": "string",
                        "title": "Name",
                        "example": "otomi",
                        "x-acl": {
                          "admin": ["create", "read"],
                          "team": ["read"]
                        }
                      },
                      "clusters": {
                        "title": "Clusters",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "uniqueItems": true,
                        "minItems": 1,
                        "x-acl": {
                          "team": ["read"]
                        }
                      },
                      "oidc": {
                        "title": "OIDC",
                        "properties": {
                          "groupMapping": {
                            "title": "Group mapping",
                            "type": "string",
                            "description": "An OIDC group name/id granting access to this team"
                          }
                        },
                        "type": "object"
                      },
                      "password": {
                        "type": "string",
                        "writeOnly": true
                      },
                      "alerts": {
                        "title": "Alerting endpoints",
                        "properties": {
                          "receivers": {
                            "title": "Receivers",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": ["slack", "msteams", "email"]
                            },
                            "uniqueItems": true
                          },
                          "slack": {
                            "title": "Slack",
                            "properties": {
                              "url": {
                                "title": "Web hook",
                                "type": "string",
                                "description": "Slack web hook. If none is given the global one is used."
                              },
                              "channel": {
                                "title": "Channel for non-criticals",
                                "type": "string",
                                "description": "Slack channel for non-criticals. If none is given the global one is used, which defaults to 'mon-otomi'."
                              },
                              "channelCrit": {
                                "title": "Channel for criticals",
                                "type": "string",
                                "description": "Slack channel for critical alerts. If none is given the global one is used, which defaults to 'mon-otomi-crit'."
                              }
                            },
                            "type": "object"
                          },
                          "msteams": {
                            "title": "Microsoft Teams",
                            "properties": {
                              "lowPrio": {
                                "title": "Low prio webhook",
                                "type": "string",
                                "description": "The low prio web hook"
                              },
                              "highPrio": {
                                "title": "High prio webhook",
                                "type": "string",
                                "description": "The high prio web hook"
                              }
                            },
                            "type": "object"
                          },
                          "email": {
                            "title": "Email",
                            "properties": {
                              "nonCritical": {
                                "title": "Non criticals",
                                "type": "string",
                                "description": "One or more email addresses (comma separated) for non-critical events."
                              },
                              "critical": {
                                "title": "Criticals",
                                "type": "string",
                                "description": "Email addresses (comma separated) for critical events."
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": ["name", "clusters", "password"],
                    "type": "object"
                  },
                  "type": "array",
                  "x-acl": {
                    "admin": ["read-any"],
                    "team": ["read-any"]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createTeam",
        "description": "Create a team",
        "x-aclSchema": "Team",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-externalDocsPath": "docs/configuring-teams",
                "x-acl": {
                  "admin": ["delete-any", "read-any", "create-any", "update-any"],
                  "team": ["read-any", "update"]
                },
                "properties": {
                  "id": {
                    "description": "A lowercase name that starts with a letter and may contain dashes.",
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                    "type": "string",
                    "title": "ID",
                    "x-acl": {
                      "admin": ["read"],
                      "team": ["read"]
                    }
                  },
                  "name": {
                    "description": "A team name",
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                    "type": "string",
                    "title": "Name",
                    "example": "otomi",
                    "x-acl": {
                      "admin": ["create", "read"],
                      "team": ["read"]
                    }
                  },
                  "clusters": {
                    "title": "Clusters",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true,
                    "minItems": 1,
                    "x-acl": {
                      "team": ["read"]
                    }
                  },
                  "oidc": {
                    "title": "OIDC",
                    "properties": {
                      "groupMapping": {
                        "title": "Group mapping",
                        "type": "string",
                        "description": "An OIDC group name/id granting access to this team"
                      }
                    },
                    "type": "object"
                  },
                  "password": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "alerts": {
                    "title": "Alerting endpoints",
                    "properties": {
                      "receivers": {
                        "title": "Receivers",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": ["slack", "msteams", "email"]
                        },
                        "uniqueItems": true
                      },
                      "slack": {
                        "title": "Slack",
                        "properties": {
                          "url": {
                            "title": "Web hook",
                            "type": "string",
                            "description": "Slack web hook. If none is given the global one is used."
                          },
                          "channel": {
                            "title": "Channel for non-criticals",
                            "type": "string",
                            "description": "Slack channel for non-criticals. If none is given the global one is used, which defaults to 'mon-otomi'."
                          },
                          "channelCrit": {
                            "title": "Channel for criticals",
                            "type": "string",
                            "description": "Slack channel for critical alerts. If none is given the global one is used, which defaults to 'mon-otomi-crit'."
                          }
                        },
                        "type": "object"
                      },
                      "msteams": {
                        "title": "Microsoft Teams",
                        "properties": {
                          "lowPrio": {
                            "title": "Low prio webhook",
                            "type": "string",
                            "description": "The low prio web hook"
                          },
                          "highPrio": {
                            "title": "High prio webhook",
                            "type": "string",
                            "description": "The high prio web hook"
                          }
                        },
                        "type": "object"
                      },
                      "email": {
                        "title": "Email",
                        "properties": {
                          "nonCritical": {
                            "title": "Non criticals",
                            "type": "string",
                            "description": "One or more email addresses (comma separated) for non-critical events."
                          },
                          "critical": {
                            "title": "Criticals",
                            "type": "string",
                            "description": "Email addresses (comma separated) for critical events."
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": ["name", "clusters", "password"],
                "type": "object"
              }
            }
          },
          "description": "Team object that needs to be added to the collection",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully obtained teams collection",
            "content": {
              "application/json": {
                "schema": {
                  "x-externalDocsPath": "docs/configuring-teams",
                  "x-acl": {
                    "admin": ["delete-any", "read-any", "create-any", "update-any"],
                    "team": ["read-any", "update"]
                  },
                  "properties": {
                    "id": {
                      "description": "A lowercase name that starts with a letter and may contain dashes.",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                      "type": "string",
                      "title": "ID",
                      "x-acl": {
                        "admin": ["read"],
                        "team": ["read"]
                      }
                    },
                    "name": {
                      "description": "A team name",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                      "type": "string",
                      "title": "Name",
                      "example": "otomi",
                      "x-acl": {
                        "admin": ["create", "read"],
                        "team": ["read"]
                      }
                    },
                    "clusters": {
                      "title": "Clusters",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "minItems": 1,
                      "x-acl": {
                        "team": ["read"]
                      }
                    },
                    "oidc": {
                      "title": "OIDC",
                      "properties": {
                        "groupMapping": {
                          "title": "Group mapping",
                          "type": "string",
                          "description": "An OIDC group name/id granting access to this team"
                        }
                      },
                      "type": "object"
                    },
                    "password": {
                      "type": "string",
                      "writeOnly": true
                    },
                    "alerts": {
                      "title": "Alerting endpoints",
                      "properties": {
                        "receivers": {
                          "title": "Receivers",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": ["slack", "msteams", "email"]
                          },
                          "uniqueItems": true
                        },
                        "slack": {
                          "title": "Slack",
                          "properties": {
                            "url": {
                              "title": "Web hook",
                              "type": "string",
                              "description": "Slack web hook. If none is given the global one is used."
                            },
                            "channel": {
                              "title": "Channel for non-criticals",
                              "type": "string",
                              "description": "Slack channel for non-criticals. If none is given the global one is used, which defaults to 'mon-otomi'."
                            },
                            "channelCrit": {
                              "title": "Channel for criticals",
                              "type": "string",
                              "description": "Slack channel for critical alerts. If none is given the global one is used, which defaults to 'mon-otomi-crit'."
                            }
                          },
                          "type": "object"
                        },
                        "msteams": {
                          "title": "Microsoft Teams",
                          "properties": {
                            "lowPrio": {
                              "title": "Low prio webhook",
                              "type": "string",
                              "description": "The low prio web hook"
                            },
                            "highPrio": {
                              "title": "High prio webhook",
                              "type": "string",
                              "description": "The high prio web hook"
                            }
                          },
                          "type": "object"
                        },
                        "email": {
                          "title": "Email",
                          "properties": {
                            "nonCritical": {
                              "title": "Non criticals",
                              "type": "string",
                              "description": "One or more email addresses (comma separated) for non-critical events."
                            },
                            "critical": {
                              "title": "Criticals",
                              "type": "string",
                              "description": "Email addresses (comma separated) for critical events."
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": ["name", "clusters", "password"],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "Resource already exists",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}": {
      "parameters": [
        {
          "name": "teamId",
          "in": "path",
          "description": "ID of team to return",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "getTeam",
        "description": "Get a specific team",
        "x-aclSchema": "Team",
        "responses": {
          "200": {
            "description": "Successfully obtained team",
            "content": {
              "application/json": {
                "schema": {
                  "x-externalDocsPath": "docs/configuring-teams",
                  "x-acl": {
                    "admin": ["delete-any", "read-any", "create-any", "update-any"],
                    "team": ["read-any", "update"]
                  },
                  "properties": {
                    "id": {
                      "description": "A lowercase name that starts with a letter and may contain dashes.",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                      "type": "string",
                      "title": "ID",
                      "x-acl": {
                        "admin": ["read"],
                        "team": ["read"]
                      }
                    },
                    "name": {
                      "description": "A team name",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                      "type": "string",
                      "title": "Name",
                      "example": "otomi",
                      "x-acl": {
                        "admin": ["create", "read"],
                        "team": ["read"]
                      }
                    },
                    "clusters": {
                      "title": "Clusters",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "minItems": 1,
                      "x-acl": {
                        "team": ["read"]
                      }
                    },
                    "oidc": {
                      "title": "OIDC",
                      "properties": {
                        "groupMapping": {
                          "title": "Group mapping",
                          "type": "string",
                          "description": "An OIDC group name/id granting access to this team"
                        }
                      },
                      "type": "object"
                    },
                    "password": {
                      "type": "string",
                      "writeOnly": true
                    },
                    "alerts": {
                      "title": "Alerting endpoints",
                      "properties": {
                        "receivers": {
                          "title": "Receivers",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": ["slack", "msteams", "email"]
                          },
                          "uniqueItems": true
                        },
                        "slack": {
                          "title": "Slack",
                          "properties": {
                            "url": {
                              "title": "Web hook",
                              "type": "string",
                              "description": "Slack web hook. If none is given the global one is used."
                            },
                            "channel": {
                              "title": "Channel for non-criticals",
                              "type": "string",
                              "description": "Slack channel for non-criticals. If none is given the global one is used, which defaults to 'mon-otomi'."
                            },
                            "channelCrit": {
                              "title": "Channel for criticals",
                              "type": "string",
                              "description": "Slack channel for critical alerts. If none is given the global one is used, which defaults to 'mon-otomi-crit'."
                            }
                          },
                          "type": "object"
                        },
                        "msteams": {
                          "title": "Microsoft Teams",
                          "properties": {
                            "lowPrio": {
                              "title": "Low prio webhook",
                              "type": "string",
                              "description": "The low prio web hook"
                            },
                            "highPrio": {
                              "title": "High prio webhook",
                              "type": "string",
                              "description": "The high prio web hook"
                            }
                          },
                          "type": "object"
                        },
                        "email": {
                          "title": "Email",
                          "properties": {
                            "nonCritical": {
                              "title": "Non criticals",
                              "type": "string",
                              "description": "One or more email addresses (comma separated) for non-critical events."
                            },
                            "critical": {
                              "title": "Criticals",
                              "type": "string",
                              "description": "Email addresses (comma separated) for critical events."
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": ["name", "clusters", "password"],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "editTeam",
        "description": "Edit a team",
        "x-aclSchema": "Team",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-externalDocsPath": "docs/configuring-teams",
                "x-acl": {
                  "admin": ["delete-any", "read-any", "create-any", "update-any"],
                  "team": ["read-any", "update"]
                },
                "properties": {
                  "id": {
                    "description": "A lowercase name that starts with a letter and may contain dashes.",
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                    "type": "string",
                    "title": "ID",
                    "x-acl": {
                      "admin": ["read"],
                      "team": ["read"]
                    }
                  },
                  "name": {
                    "description": "A team name",
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                    "type": "string",
                    "title": "Name",
                    "example": "otomi",
                    "x-acl": {
                      "admin": ["create", "read"],
                      "team": ["read"]
                    }
                  },
                  "clusters": {
                    "title": "Clusters",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true,
                    "minItems": 1,
                    "x-acl": {
                      "team": ["read"]
                    }
                  },
                  "oidc": {
                    "title": "OIDC",
                    "properties": {
                      "groupMapping": {
                        "title": "Group mapping",
                        "type": "string",
                        "description": "An OIDC group name/id granting access to this team"
                      }
                    },
                    "type": "object"
                  },
                  "password": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "alerts": {
                    "title": "Alerting endpoints",
                    "properties": {
                      "receivers": {
                        "title": "Receivers",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": ["slack", "msteams", "email"]
                        },
                        "uniqueItems": true
                      },
                      "slack": {
                        "title": "Slack",
                        "properties": {
                          "url": {
                            "title": "Web hook",
                            "type": "string",
                            "description": "Slack web hook. If none is given the global one is used."
                          },
                          "channel": {
                            "title": "Channel for non-criticals",
                            "type": "string",
                            "description": "Slack channel for non-criticals. If none is given the global one is used, which defaults to 'mon-otomi'."
                          },
                          "channelCrit": {
                            "title": "Channel for criticals",
                            "type": "string",
                            "description": "Slack channel for critical alerts. If none is given the global one is used, which defaults to 'mon-otomi-crit'."
                          }
                        },
                        "type": "object"
                      },
                      "msteams": {
                        "title": "Microsoft Teams",
                        "properties": {
                          "lowPrio": {
                            "title": "Low prio webhook",
                            "type": "string",
                            "description": "The low prio web hook"
                          },
                          "highPrio": {
                            "title": "High prio webhook",
                            "type": "string",
                            "description": "The high prio web hook"
                          }
                        },
                        "type": "object"
                      },
                      "email": {
                        "title": "Email",
                        "properties": {
                          "nonCritical": {
                            "title": "Non criticals",
                            "type": "string",
                            "description": "One or more email addresses (comma separated) for non-critical events."
                          },
                          "critical": {
                            "title": "Criticals",
                            "type": "string",
                            "description": "Email addresses (comma separated) for critical events."
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": ["name", "clusters", "password"],
                "type": "object"
              }
            }
          },
          "description": "Team object that contains updated values",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully edited team",
            "content": {
              "application/json": {
                "schema": {
                  "x-externalDocsPath": "docs/configuring-teams",
                  "x-acl": {
                    "admin": ["delete-any", "read-any", "create-any", "update-any"],
                    "team": ["read-any", "update"]
                  },
                  "properties": {
                    "id": {
                      "description": "A lowercase name that starts with a letter and may contain dashes.",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                      "type": "string",
                      "title": "ID",
                      "x-acl": {
                        "admin": ["read"],
                        "team": ["read"]
                      }
                    },
                    "name": {
                      "description": "A team name",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                      "type": "string",
                      "title": "Name",
                      "example": "otomi",
                      "x-acl": {
                        "admin": ["create", "read"],
                        "team": ["read"]
                      }
                    },
                    "clusters": {
                      "title": "Clusters",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "minItems": 1,
                      "x-acl": {
                        "team": ["read"]
                      }
                    },
                    "oidc": {
                      "title": "OIDC",
                      "properties": {
                        "groupMapping": {
                          "title": "Group mapping",
                          "type": "string",
                          "description": "An OIDC group name/id granting access to this team"
                        }
                      },
                      "type": "object"
                    },
                    "password": {
                      "type": "string",
                      "writeOnly": true
                    },
                    "alerts": {
                      "title": "Alerting endpoints",
                      "properties": {
                        "receivers": {
                          "title": "Receivers",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": ["slack", "msteams", "email"]
                          },
                          "uniqueItems": true
                        },
                        "slack": {
                          "title": "Slack",
                          "properties": {
                            "url": {
                              "title": "Web hook",
                              "type": "string",
                              "description": "Slack web hook. If none is given the global one is used."
                            },
                            "channel": {
                              "title": "Channel for non-criticals",
                              "type": "string",
                              "description": "Slack channel for non-criticals. If none is given the global one is used, which defaults to 'mon-otomi'."
                            },
                            "channelCrit": {
                              "title": "Channel for criticals",
                              "type": "string",
                              "description": "Slack channel for critical alerts. If none is given the global one is used, which defaults to 'mon-otomi-crit'."
                            }
                          },
                          "type": "object"
                        },
                        "msteams": {
                          "title": "Microsoft Teams",
                          "properties": {
                            "lowPrio": {
                              "title": "Low prio webhook",
                              "type": "string",
                              "description": "The low prio web hook"
                            },
                            "highPrio": {
                              "title": "High prio webhook",
                              "type": "string",
                              "description": "The high prio web hook"
                            }
                          },
                          "type": "object"
                        },
                        "email": {
                          "title": "Email",
                          "properties": {
                            "nonCritical": {
                              "title": "Non criticals",
                              "type": "string",
                              "description": "One or more email addresses (comma separated) for non-critical events."
                            },
                            "critical": {
                              "title": "Criticals",
                              "type": "string",
                              "description": "Email addresses (comma separated) for critical events."
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": ["name", "clusters", "password"],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteTeam",
        "description": "Delete team",
        "x-aclSchema": "Team",
        "responses": {
          "200": {
            "description": "Successfully deleted a team"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/services": {
      "parameters": [
        {
          "name": "teamId",
          "in": "path",
          "description": "ID of team to return",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "getTeamServices",
        "description": "Get services from a given team",
        "x-aclSchema": "Services",
        "responses": {
          "200": {
            "description": "Successfully obtained services",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "x-externalDocsPath": "docs/configuring-services",
                    "x-acl": {
                      "admin": ["delete-any", "read-any", "create-any", "update-any"],
                      "team": ["delete", "read", "create", "update"]
                    },
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "default": true
                      },
                      "id": {
                        "type": "string",
                        "readOnly": true
                      },
                      "name": {
                        "title": "Name",
                        "description": "A service name",
                        "example": "some-service",
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                        "type": "string"
                      },
                      "port": {
                        "description": "A service port",
                        "type": "integer",
                        "default": 80,
                        "minimum": 1,
                        "maximum": 65535
                      },
                      "clusterId": {
                        "title": "Cluster ID",
                        "type": "string",
                        "description": "A kubernetes cluster for the service",
                        "x-acl": {
                          "admin": ["read", "create"],
                          "team": ["read", "create"]
                        }
                      },
                      "ksvc": {
                        "title": "Type",
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "Knative service",
                            "nullable": true,
                            "properties": {
                              "serviceType": {
                                "type": "string",
                                "enum": ["ksvc"],
                                "default": "ksvc"
                              },
                              "scaleToZero": {
                                "title": "Scale to zero",
                                "description": "Scales to zero after 60 seconds and needs approximately 8 seconds to start back up.",
                                "type": "boolean",
                                "default": false
                              },
                              "image": {
                                "title": "Container image",
                                "nullable": true,
                                "properties": {
                                  "repository": {
                                    "description": "A container image repository.",
                                    "pattern": "^[a-z0-9]+(?:[/._-]{1,2}[a-z0-9]+)*$",
                                    "type": "string"
                                  },
                                  "tag": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": ["repository", "tag"]
                              },
                              "secrets": {
                                "type": "array",
                                "items": {
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "entries": {
                                      "title": "Entries",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "uniqueItems": true
                                    }
                                  },
                                  "required": ["name"],
                                  "type": "object"
                                }
                              },
                              "env": {
                                "title": "Environment variables",
                                "type": "array",
                                "nullable": true,
                                "items": {
                                  "properties": {
                                    "name": {
                                      "additionalProperties": false,
                                      "nullable": true,
                                      "x-patternProperties": {
                                        "[a-zA-Z_]{1,}[a-zA-Z0-9_]*": {
                                          "maxLength": 131072,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Environment variables"
                                    },
                                    "value": {
                                      "type": "string",
                                      "maxLength": 131072
                                    }
                                  },
                                  "required": ["name", "value"],
                                  "type": "object"
                                }
                              },
                              "resources": {
                                "title": "Pod resources",
                                "nullable": true,
                                "properties": {
                                  "requests": {
                                    "properties": {
                                      "cpu": {
                                        "description": "The guaranteed amount of CPU",
                                        "default": "50m",
                                        "example": ["1", "200m"],
                                        "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                        "type": "string"
                                      },
                                      "memory": {
                                        "description": "The guaranteed amount of RAM",
                                        "default": "64Mi",
                                        "example": ["1Mi", "0.5M"],
                                        "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                        "type": "string"
                                      }
                                    },
                                    "required": ["cpu", "memory"],
                                    "type": "object"
                                  },
                                  "limits": {
                                    "properties": {
                                      "cpu": {
                                        "description": "The maximum amount of CPU",
                                        "default": "100m",
                                        "example": ["1", "200m"],
                                        "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                        "type": "string"
                                      },
                                      "memory": {
                                        "description": "The maximum amount of RAM",
                                        "default": "128Mi",
                                        "example": ["1Mi", "0.5M"],
                                        "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                        "type": "string"
                                      }
                                    },
                                    "required": ["cpu", "memory"],
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "annotations": {
                                "title": "Pod annotations",
                                "description": "A set of annotations.",
                                "additionalProperties": false,
                                "x-patternProperties": {
                                  "^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){1,253}\\/)?([a-z0-9A-Z]+[a-z0-9A-Z-_.]+[a-z0-9A-Z]){1,63}$": {
                                    "pattern": "^((.){1,253}\\/)?(.){1,63}$",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "autoCD": {
                                "title": "Continuous delivery",
                                "description": "Deploys new images based on a tagging strategy",
                                "oneOf": [
                                  {
                                    "title": "Off",
                                    "nullable": true,
                                    "additionalProperties": false
                                  },
                                  {
                                    "title": "Semver versioning",
                                    "nullable": true,
                                    "properties": {
                                      "tagMatcher": {
                                        "type": "string",
                                        "enum": ["semver"],
                                        "default": "semver"
                                      },
                                      "semver": {
                                        "title": "Semver version pattern",
                                        "type": "string",
                                        "example": "PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\",  \">=1.2.3-0\"",
                                        "description": "Use this filter if your image tags follow semantic versioning rules (MAJOR.MINOR.PATCH). E.g.: PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\""
                                      }
                                    },
                                    "required": ["semver"],
                                    "type": "object"
                                  },
                                  {
                                    "title": "Glob pattern matching",
                                    "properties": {
                                      "tagMatcher": {
                                        "type": "string",
                                        "enum": ["glob"],
                                        "default": "glob"
                                      },
                                      "glob": {
                                        "title": "Glob string pattern",
                                        "type": "string",
                                        "description": "Use this filter if you want to make glob-style patterns. E.g.: \"main-v1.3.*\"",
                                        "example": "main-v1.3.*"
                                      }
                                    },
                                    "required": ["glob"],
                                    "type": "object",
                                    "additionalProperties": false
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "title": "Existing Knative service",
                            "properties": {
                              "serviceType": {
                                "type": "string",
                                "enum": ["ksvcPredeployed"],
                                "default": "ksvcPredeployed"
                              }
                            },
                            "required": ["serviceType"],
                            "type": "object"
                          },
                          {
                            "title": "Existing Kubernetes service",
                            "properties": {
                              "serviceType": {
                                "type": "string",
                                "enum": ["svcPredeployed"],
                                "default": "svcPredeployed"
                              }
                            },
                            "required": ["serviceType"],
                            "type": "object"
                          }
                        ]
                      },
                      "ingress": {
                        "title": "Exposure",
                        "x-acl": {
                          "team": ["read"]
                        },
                        "oneOf": [
                          {
                            "title": "Private",
                            "nullable": true,
                            "additionalProperties": false
                          },
                          {
                            "title": "Public URL",
                            "properties": {
                              "useDefaultSubdomain": {
                                "title": "Use team domain (preferred)",
                                "type": "boolean",
                                "default": true,
                                "description": "Use the team domain so that the URL reveals the owner."
                              },
                              "subdomain": {
                                "title": "Host",
                                "type": "string",
                                "nullable": true,
                                "description": "A host that is used to set DNS 'A' records",
                                "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                              },
                              "domain": {
                                "title": "DNS Zone",
                                "description": "A managed DNS zone",
                                "type": "string"
                              },
                              "path": {
                                "title": "URL path",
                                "description": "The path in the URL that the service should be mapped to (e.g. for microservices on one app/domain.)",
                                "type": "string"
                              },
                              "forwardPath": {
                                "title": "Forward path",
                                "description": "Forward the URL path into the service (don't rewrite to /)",
                                "type": "boolean"
                              },
                              "hasSingleSignOn": {
                                "title": "Authenticate with Single Sign On",
                                "type": "boolean",
                                "default": false
                              },
                              "hasCert": {
                                "title": "Already has a certificate",
                                "type": "boolean",
                                "default": false,
                                "description": "If true a certificate should exist already"
                              },
                              "certArn": {
                                "type": "string",
                                "title": "Certificate ARN",
                                "example": "arn:aws:acm:eu-central-1:xxx:certificate/xxx"
                              },
                              "certSelect": {
                                "type": "boolean",
                                "title": "Select existing secret name",
                                "default": true
                              },
                              "certName": {
                                "type": "string",
                                "title": "Secret name",
                                "example": "www-example-com"
                              }
                            },
                            "required": ["domain", "subdomain"],
                            "type": "object"
                          }
                        ]
                      },
                      "teamId": {
                        "type": "string",
                        "readOnly": true
                      }
                    },
                    "required": ["name", "clusterId", "teamId"],
                    "type": "object"
                  },
                  "type": "array",
                  "x-acl": {
                    "admin": ["read-any"],
                    "team": ["read-any"]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createService",
        "description": "Create a service",
        "x-aclSchema": "Service",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-externalDocsPath": "docs/configuring-services",
                "x-acl": {
                  "admin": ["delete-any", "read-any", "create-any", "update-any"],
                  "team": ["delete", "read", "create", "update"]
                },
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "default": true
                  },
                  "id": {
                    "type": "string",
                    "readOnly": true
                  },
                  "name": {
                    "title": "Name",
                    "description": "A service name",
                    "example": "some-service",
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                    "type": "string"
                  },
                  "port": {
                    "description": "A service port",
                    "type": "integer",
                    "default": 80,
                    "minimum": 1,
                    "maximum": 65535
                  },
                  "clusterId": {
                    "title": "Cluster ID",
                    "type": "string",
                    "description": "A kubernetes cluster for the service",
                    "x-acl": {
                      "admin": ["read", "create"],
                      "team": ["read", "create"]
                    }
                  },
                  "ksvc": {
                    "title": "Type",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "Knative service",
                        "nullable": true,
                        "properties": {
                          "serviceType": {
                            "type": "string",
                            "enum": ["ksvc"],
                            "default": "ksvc"
                          },
                          "scaleToZero": {
                            "title": "Scale to zero",
                            "description": "Scales to zero after 60 seconds and needs approximately 8 seconds to start back up.",
                            "type": "boolean",
                            "default": false
                          },
                          "image": {
                            "title": "Container image",
                            "nullable": true,
                            "properties": {
                              "repository": {
                                "description": "A container image repository.",
                                "pattern": "^[a-z0-9]+(?:[/._-]{1,2}[a-z0-9]+)*$",
                                "type": "string"
                              },
                              "tag": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": ["repository", "tag"]
                          },
                          "secrets": {
                            "type": "array",
                            "items": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "entries": {
                                  "title": "Entries",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "uniqueItems": true
                                }
                              },
                              "required": ["name"],
                              "type": "object"
                            }
                          },
                          "env": {
                            "title": "Environment variables",
                            "type": "array",
                            "nullable": true,
                            "items": {
                              "properties": {
                                "name": {
                                  "additionalProperties": false,
                                  "nullable": true,
                                  "x-patternProperties": {
                                    "[a-zA-Z_]{1,}[a-zA-Z0-9_]*": {
                                      "maxLength": 131072,
                                      "type": "string"
                                    }
                                  },
                                  "title": "Environment variables"
                                },
                                "value": {
                                  "type": "string",
                                  "maxLength": 131072
                                }
                              },
                              "required": ["name", "value"],
                              "type": "object"
                            }
                          },
                          "resources": {
                            "title": "Pod resources",
                            "nullable": true,
                            "properties": {
                              "requests": {
                                "properties": {
                                  "cpu": {
                                    "description": "The guaranteed amount of CPU",
                                    "default": "50m",
                                    "example": ["1", "200m"],
                                    "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                    "type": "string"
                                  },
                                  "memory": {
                                    "description": "The guaranteed amount of RAM",
                                    "default": "64Mi",
                                    "example": ["1Mi", "0.5M"],
                                    "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                    "type": "string"
                                  }
                                },
                                "required": ["cpu", "memory"],
                                "type": "object"
                              },
                              "limits": {
                                "properties": {
                                  "cpu": {
                                    "description": "The maximum amount of CPU",
                                    "default": "100m",
                                    "example": ["1", "200m"],
                                    "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                    "type": "string"
                                  },
                                  "memory": {
                                    "description": "The maximum amount of RAM",
                                    "default": "128Mi",
                                    "example": ["1Mi", "0.5M"],
                                    "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                    "type": "string"
                                  }
                                },
                                "required": ["cpu", "memory"],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "annotations": {
                            "title": "Pod annotations",
                            "description": "A set of annotations.",
                            "additionalProperties": false,
                            "x-patternProperties": {
                              "^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){1,253}\\/)?([a-z0-9A-Z]+[a-z0-9A-Z-_.]+[a-z0-9A-Z]){1,63}$": {
                                "pattern": "^((.){1,253}\\/)?(.){1,63}$",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "autoCD": {
                            "title": "Continuous delivery",
                            "description": "Deploys new images based on a tagging strategy",
                            "oneOf": [
                              {
                                "title": "Off",
                                "nullable": true,
                                "additionalProperties": false
                              },
                              {
                                "title": "Semver versioning",
                                "nullable": true,
                                "properties": {
                                  "tagMatcher": {
                                    "type": "string",
                                    "enum": ["semver"],
                                    "default": "semver"
                                  },
                                  "semver": {
                                    "title": "Semver version pattern",
                                    "type": "string",
                                    "example": "PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\",  \">=1.2.3-0\"",
                                    "description": "Use this filter if your image tags follow semantic versioning rules (MAJOR.MINOR.PATCH). E.g.: PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\""
                                  }
                                },
                                "required": ["semver"],
                                "type": "object"
                              },
                              {
                                "title": "Glob pattern matching",
                                "properties": {
                                  "tagMatcher": {
                                    "type": "string",
                                    "enum": ["glob"],
                                    "default": "glob"
                                  },
                                  "glob": {
                                    "title": "Glob string pattern",
                                    "type": "string",
                                    "description": "Use this filter if you want to make glob-style patterns. E.g.: \"main-v1.3.*\"",
                                    "example": "main-v1.3.*"
                                  }
                                },
                                "required": ["glob"],
                                "type": "object",
                                "additionalProperties": false
                              }
                            ]
                          }
                        }
                      },
                      {
                        "title": "Existing Knative service",
                        "properties": {
                          "serviceType": {
                            "type": "string",
                            "enum": ["ksvcPredeployed"],
                            "default": "ksvcPredeployed"
                          }
                        },
                        "required": ["serviceType"],
                        "type": "object"
                      },
                      {
                        "title": "Existing Kubernetes service",
                        "properties": {
                          "serviceType": {
                            "type": "string",
                            "enum": ["svcPredeployed"],
                            "default": "svcPredeployed"
                          }
                        },
                        "required": ["serviceType"],
                        "type": "object"
                      }
                    ]
                  },
                  "ingress": {
                    "title": "Exposure",
                    "x-acl": {
                      "team": ["read"]
                    },
                    "oneOf": [
                      {
                        "title": "Private",
                        "nullable": true,
                        "additionalProperties": false
                      },
                      {
                        "title": "Public URL",
                        "properties": {
                          "useDefaultSubdomain": {
                            "title": "Use team domain (preferred)",
                            "type": "boolean",
                            "default": true,
                            "description": "Use the team domain so that the URL reveals the owner."
                          },
                          "subdomain": {
                            "title": "Host",
                            "type": "string",
                            "nullable": true,
                            "description": "A host that is used to set DNS 'A' records",
                            "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                          },
                          "domain": {
                            "title": "DNS Zone",
                            "description": "A managed DNS zone",
                            "type": "string"
                          },
                          "path": {
                            "title": "URL path",
                            "description": "The path in the URL that the service should be mapped to (e.g. for microservices on one app/domain.)",
                            "type": "string"
                          },
                          "forwardPath": {
                            "title": "Forward path",
                            "description": "Forward the URL path into the service (don't rewrite to /)",
                            "type": "boolean"
                          },
                          "hasSingleSignOn": {
                            "title": "Authenticate with Single Sign On",
                            "type": "boolean",
                            "default": false
                          },
                          "hasCert": {
                            "title": "Already has a certificate",
                            "type": "boolean",
                            "default": false,
                            "description": "If true a certificate should exist already"
                          },
                          "certArn": {
                            "type": "string",
                            "title": "Certificate ARN",
                            "example": "arn:aws:acm:eu-central-1:xxx:certificate/xxx"
                          },
                          "certSelect": {
                            "type": "boolean",
                            "title": "Select existing secret name",
                            "default": true
                          },
                          "certName": {
                            "type": "string",
                            "title": "Secret name",
                            "example": "www-example-com"
                          }
                        },
                        "required": ["domain", "subdomain"],
                        "type": "object"
                      }
                    ]
                  },
                  "teamId": {
                    "type": "string",
                    "readOnly": true
                  }
                },
                "required": ["name", "clusterId", "teamId"],
                "type": "object"
              }
            }
          },
          "description": "Service object",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully stored service configuration",
            "content": {
              "application/json": {
                "schema": {
                  "x-externalDocsPath": "docs/configuring-services",
                  "x-acl": {
                    "admin": ["delete-any", "read-any", "create-any", "update-any"],
                    "team": ["delete", "read", "create", "update"]
                  },
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "default": true
                    },
                    "id": {
                      "type": "string",
                      "readOnly": true
                    },
                    "name": {
                      "title": "Name",
                      "description": "A service name",
                      "example": "some-service",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                      "type": "string"
                    },
                    "port": {
                      "description": "A service port",
                      "type": "integer",
                      "default": 80,
                      "minimum": 1,
                      "maximum": 65535
                    },
                    "clusterId": {
                      "title": "Cluster ID",
                      "type": "string",
                      "description": "A kubernetes cluster for the service",
                      "x-acl": {
                        "admin": ["read", "create"],
                        "team": ["read", "create"]
                      }
                    },
                    "ksvc": {
                      "title": "Type",
                      "type": "object",
                      "oneOf": [
                        {
                          "title": "Knative service",
                          "nullable": true,
                          "properties": {
                            "serviceType": {
                              "type": "string",
                              "enum": ["ksvc"],
                              "default": "ksvc"
                            },
                            "scaleToZero": {
                              "title": "Scale to zero",
                              "description": "Scales to zero after 60 seconds and needs approximately 8 seconds to start back up.",
                              "type": "boolean",
                              "default": false
                            },
                            "image": {
                              "title": "Container image",
                              "nullable": true,
                              "properties": {
                                "repository": {
                                  "description": "A container image repository.",
                                  "pattern": "^[a-z0-9]+(?:[/._-]{1,2}[a-z0-9]+)*$",
                                  "type": "string"
                                },
                                "tag": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": ["repository", "tag"]
                            },
                            "secrets": {
                              "type": "array",
                              "items": {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "entries": {
                                    "title": "Entries",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "uniqueItems": true
                                  }
                                },
                                "required": ["name"],
                                "type": "object"
                              }
                            },
                            "env": {
                              "title": "Environment variables",
                              "type": "array",
                              "nullable": true,
                              "items": {
                                "properties": {
                                  "name": {
                                    "additionalProperties": false,
                                    "nullable": true,
                                    "x-patternProperties": {
                                      "[a-zA-Z_]{1,}[a-zA-Z0-9_]*": {
                                        "maxLength": 131072,
                                        "type": "string"
                                      }
                                    },
                                    "title": "Environment variables"
                                  },
                                  "value": {
                                    "type": "string",
                                    "maxLength": 131072
                                  }
                                },
                                "required": ["name", "value"],
                                "type": "object"
                              }
                            },
                            "resources": {
                              "title": "Pod resources",
                              "nullable": true,
                              "properties": {
                                "requests": {
                                  "properties": {
                                    "cpu": {
                                      "description": "The guaranteed amount of CPU",
                                      "default": "50m",
                                      "example": ["1", "200m"],
                                      "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                      "type": "string"
                                    },
                                    "memory": {
                                      "description": "The guaranteed amount of RAM",
                                      "default": "64Mi",
                                      "example": ["1Mi", "0.5M"],
                                      "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                      "type": "string"
                                    }
                                  },
                                  "required": ["cpu", "memory"],
                                  "type": "object"
                                },
                                "limits": {
                                  "properties": {
                                    "cpu": {
                                      "description": "The maximum amount of CPU",
                                      "default": "100m",
                                      "example": ["1", "200m"],
                                      "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                      "type": "string"
                                    },
                                    "memory": {
                                      "description": "The maximum amount of RAM",
                                      "default": "128Mi",
                                      "example": ["1Mi", "0.5M"],
                                      "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                      "type": "string"
                                    }
                                  },
                                  "required": ["cpu", "memory"],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "annotations": {
                              "title": "Pod annotations",
                              "description": "A set of annotations.",
                              "additionalProperties": false,
                              "x-patternProperties": {
                                "^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){1,253}\\/)?([a-z0-9A-Z]+[a-z0-9A-Z-_.]+[a-z0-9A-Z]){1,63}$": {
                                  "pattern": "^((.){1,253}\\/)?(.){1,63}$",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "autoCD": {
                              "title": "Continuous delivery",
                              "description": "Deploys new images based on a tagging strategy",
                              "oneOf": [
                                {
                                  "title": "Off",
                                  "nullable": true,
                                  "additionalProperties": false
                                },
                                {
                                  "title": "Semver versioning",
                                  "nullable": true,
                                  "properties": {
                                    "tagMatcher": {
                                      "type": "string",
                                      "enum": ["semver"],
                                      "default": "semver"
                                    },
                                    "semver": {
                                      "title": "Semver version pattern",
                                      "type": "string",
                                      "example": "PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\",  \">=1.2.3-0\"",
                                      "description": "Use this filter if your image tags follow semantic versioning rules (MAJOR.MINOR.PATCH). E.g.: PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\""
                                    }
                                  },
                                  "required": ["semver"],
                                  "type": "object"
                                },
                                {
                                  "title": "Glob pattern matching",
                                  "properties": {
                                    "tagMatcher": {
                                      "type": "string",
                                      "enum": ["glob"],
                                      "default": "glob"
                                    },
                                    "glob": {
                                      "title": "Glob string pattern",
                                      "type": "string",
                                      "description": "Use this filter if you want to make glob-style patterns. E.g.: \"main-v1.3.*\"",
                                      "example": "main-v1.3.*"
                                    }
                                  },
                                  "required": ["glob"],
                                  "type": "object",
                                  "additionalProperties": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "title": "Existing Knative service",
                          "properties": {
                            "serviceType": {
                              "type": "string",
                              "enum": ["ksvcPredeployed"],
                              "default": "ksvcPredeployed"
                            }
                          },
                          "required": ["serviceType"],
                          "type": "object"
                        },
                        {
                          "title": "Existing Kubernetes service",
                          "properties": {
                            "serviceType": {
                              "type": "string",
                              "enum": ["svcPredeployed"],
                              "default": "svcPredeployed"
                            }
                          },
                          "required": ["serviceType"],
                          "type": "object"
                        }
                      ]
                    },
                    "ingress": {
                      "title": "Exposure",
                      "x-acl": {
                        "team": ["read"]
                      },
                      "oneOf": [
                        {
                          "title": "Private",
                          "nullable": true,
                          "additionalProperties": false
                        },
                        {
                          "title": "Public URL",
                          "properties": {
                            "useDefaultSubdomain": {
                              "title": "Use team domain (preferred)",
                              "type": "boolean",
                              "default": true,
                              "description": "Use the team domain so that the URL reveals the owner."
                            },
                            "subdomain": {
                              "title": "Host",
                              "type": "string",
                              "nullable": true,
                              "description": "A host that is used to set DNS 'A' records",
                              "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                            },
                            "domain": {
                              "title": "DNS Zone",
                              "description": "A managed DNS zone",
                              "type": "string"
                            },
                            "path": {
                              "title": "URL path",
                              "description": "The path in the URL that the service should be mapped to (e.g. for microservices on one app/domain.)",
                              "type": "string"
                            },
                            "forwardPath": {
                              "title": "Forward path",
                              "description": "Forward the URL path into the service (don't rewrite to /)",
                              "type": "boolean"
                            },
                            "hasSingleSignOn": {
                              "title": "Authenticate with Single Sign On",
                              "type": "boolean",
                              "default": false
                            },
                            "hasCert": {
                              "title": "Already has a certificate",
                              "type": "boolean",
                              "default": false,
                              "description": "If true a certificate should exist already"
                            },
                            "certArn": {
                              "type": "string",
                              "title": "Certificate ARN",
                              "example": "arn:aws:acm:eu-central-1:xxx:certificate/xxx"
                            },
                            "certSelect": {
                              "type": "boolean",
                              "title": "Select existing secret name",
                              "default": true
                            },
                            "certName": {
                              "type": "string",
                              "title": "Secret name",
                              "example": "www-example-com"
                            }
                          },
                          "required": ["domain", "subdomain"],
                          "type": "object"
                        }
                      ]
                    },
                    "teamId": {
                      "type": "string",
                      "readOnly": true
                    }
                  },
                  "required": ["name", "clusterId", "teamId"],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "Resource already exists",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/services/{serviceId}": {
      "parameters": [
        {
          "name": "teamId",
          "in": "path",
          "description": "ID of team to return",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "serviceId",
          "in": "path",
          "description": "ID of the service",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "getService",
        "description": "Get a service from a given team",
        "x-aclSchema": "Service",
        "responses": {
          "200": {
            "description": "Successfully obtained service configuration",
            "content": {
              "application/json": {
                "schema": {
                  "x-externalDocsPath": "docs/configuring-services",
                  "x-acl": {
                    "admin": ["delete-any", "read-any", "create-any", "update-any"],
                    "team": ["delete", "read", "create", "update"]
                  },
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "default": true
                    },
                    "id": {
                      "type": "string",
                      "readOnly": true
                    },
                    "name": {
                      "title": "Name",
                      "description": "A service name",
                      "example": "some-service",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                      "type": "string"
                    },
                    "port": {
                      "description": "A service port",
                      "type": "integer",
                      "default": 80,
                      "minimum": 1,
                      "maximum": 65535
                    },
                    "clusterId": {
                      "title": "Cluster ID",
                      "type": "string",
                      "description": "A kubernetes cluster for the service",
                      "x-acl": {
                        "admin": ["read", "create"],
                        "team": ["read", "create"]
                      }
                    },
                    "ksvc": {
                      "title": "Type",
                      "type": "object",
                      "oneOf": [
                        {
                          "title": "Knative service",
                          "nullable": true,
                          "properties": {
                            "serviceType": {
                              "type": "string",
                              "enum": ["ksvc"],
                              "default": "ksvc"
                            },
                            "scaleToZero": {
                              "title": "Scale to zero",
                              "description": "Scales to zero after 60 seconds and needs approximately 8 seconds to start back up.",
                              "type": "boolean",
                              "default": false
                            },
                            "image": {
                              "title": "Container image",
                              "nullable": true,
                              "properties": {
                                "repository": {
                                  "description": "A container image repository.",
                                  "pattern": "^[a-z0-9]+(?:[/._-]{1,2}[a-z0-9]+)*$",
                                  "type": "string"
                                },
                                "tag": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": ["repository", "tag"]
                            },
                            "secrets": {
                              "type": "array",
                              "items": {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "entries": {
                                    "title": "Entries",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "uniqueItems": true
                                  }
                                },
                                "required": ["name"],
                                "type": "object"
                              }
                            },
                            "env": {
                              "title": "Environment variables",
                              "type": "array",
                              "nullable": true,
                              "items": {
                                "properties": {
                                  "name": {
                                    "additionalProperties": false,
                                    "nullable": true,
                                    "x-patternProperties": {
                                      "[a-zA-Z_]{1,}[a-zA-Z0-9_]*": {
                                        "maxLength": 131072,
                                        "type": "string"
                                      }
                                    },
                                    "title": "Environment variables"
                                  },
                                  "value": {
                                    "type": "string",
                                    "maxLength": 131072
                                  }
                                },
                                "required": ["name", "value"],
                                "type": "object"
                              }
                            },
                            "resources": {
                              "title": "Pod resources",
                              "nullable": true,
                              "properties": {
                                "requests": {
                                  "properties": {
                                    "cpu": {
                                      "description": "The guaranteed amount of CPU",
                                      "default": "50m",
                                      "example": ["1", "200m"],
                                      "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                      "type": "string"
                                    },
                                    "memory": {
                                      "description": "The guaranteed amount of RAM",
                                      "default": "64Mi",
                                      "example": ["1Mi", "0.5M"],
                                      "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                      "type": "string"
                                    }
                                  },
                                  "required": ["cpu", "memory"],
                                  "type": "object"
                                },
                                "limits": {
                                  "properties": {
                                    "cpu": {
                                      "description": "The maximum amount of CPU",
                                      "default": "100m",
                                      "example": ["1", "200m"],
                                      "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                      "type": "string"
                                    },
                                    "memory": {
                                      "description": "The maximum amount of RAM",
                                      "default": "128Mi",
                                      "example": ["1Mi", "0.5M"],
                                      "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                      "type": "string"
                                    }
                                  },
                                  "required": ["cpu", "memory"],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "annotations": {
                              "title": "Pod annotations",
                              "description": "A set of annotations.",
                              "additionalProperties": false,
                              "x-patternProperties": {
                                "^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){1,253}\\/)?([a-z0-9A-Z]+[a-z0-9A-Z-_.]+[a-z0-9A-Z]){1,63}$": {
                                  "pattern": "^((.){1,253}\\/)?(.){1,63}$",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "autoCD": {
                              "title": "Continuous delivery",
                              "description": "Deploys new images based on a tagging strategy",
                              "oneOf": [
                                {
                                  "title": "Off",
                                  "nullable": true,
                                  "additionalProperties": false
                                },
                                {
                                  "title": "Semver versioning",
                                  "nullable": true,
                                  "properties": {
                                    "tagMatcher": {
                                      "type": "string",
                                      "enum": ["semver"],
                                      "default": "semver"
                                    },
                                    "semver": {
                                      "title": "Semver version pattern",
                                      "type": "string",
                                      "example": "PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\",  \">=1.2.3-0\"",
                                      "description": "Use this filter if your image tags follow semantic versioning rules (MAJOR.MINOR.PATCH). E.g.: PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\""
                                    }
                                  },
                                  "required": ["semver"],
                                  "type": "object"
                                },
                                {
                                  "title": "Glob pattern matching",
                                  "properties": {
                                    "tagMatcher": {
                                      "type": "string",
                                      "enum": ["glob"],
                                      "default": "glob"
                                    },
                                    "glob": {
                                      "title": "Glob string pattern",
                                      "type": "string",
                                      "description": "Use this filter if you want to make glob-style patterns. E.g.: \"main-v1.3.*\"",
                                      "example": "main-v1.3.*"
                                    }
                                  },
                                  "required": ["glob"],
                                  "type": "object",
                                  "additionalProperties": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "title": "Existing Knative service",
                          "properties": {
                            "serviceType": {
                              "type": "string",
                              "enum": ["ksvcPredeployed"],
                              "default": "ksvcPredeployed"
                            }
                          },
                          "required": ["serviceType"],
                          "type": "object"
                        },
                        {
                          "title": "Existing Kubernetes service",
                          "properties": {
                            "serviceType": {
                              "type": "string",
                              "enum": ["svcPredeployed"],
                              "default": "svcPredeployed"
                            }
                          },
                          "required": ["serviceType"],
                          "type": "object"
                        }
                      ]
                    },
                    "ingress": {
                      "title": "Exposure",
                      "x-acl": {
                        "team": ["read"]
                      },
                      "oneOf": [
                        {
                          "title": "Private",
                          "nullable": true,
                          "additionalProperties": false
                        },
                        {
                          "title": "Public URL",
                          "properties": {
                            "useDefaultSubdomain": {
                              "title": "Use team domain (preferred)",
                              "type": "boolean",
                              "default": true,
                              "description": "Use the team domain so that the URL reveals the owner."
                            },
                            "subdomain": {
                              "title": "Host",
                              "type": "string",
                              "nullable": true,
                              "description": "A host that is used to set DNS 'A' records",
                              "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                            },
                            "domain": {
                              "title": "DNS Zone",
                              "description": "A managed DNS zone",
                              "type": "string"
                            },
                            "path": {
                              "title": "URL path",
                              "description": "The path in the URL that the service should be mapped to (e.g. for microservices on one app/domain.)",
                              "type": "string"
                            },
                            "forwardPath": {
                              "title": "Forward path",
                              "description": "Forward the URL path into the service (don't rewrite to /)",
                              "type": "boolean"
                            },
                            "hasSingleSignOn": {
                              "title": "Authenticate with Single Sign On",
                              "type": "boolean",
                              "default": false
                            },
                            "hasCert": {
                              "title": "Already has a certificate",
                              "type": "boolean",
                              "default": false,
                              "description": "If true a certificate should exist already"
                            },
                            "certArn": {
                              "type": "string",
                              "title": "Certificate ARN",
                              "example": "arn:aws:acm:eu-central-1:xxx:certificate/xxx"
                            },
                            "certSelect": {
                              "type": "boolean",
                              "title": "Select existing secret name",
                              "default": true
                            },
                            "certName": {
                              "type": "string",
                              "title": "Secret name",
                              "example": "www-example-com"
                            }
                          },
                          "required": ["domain", "subdomain"],
                          "type": "object"
                        }
                      ]
                    },
                    "teamId": {
                      "type": "string",
                      "readOnly": true
                    }
                  },
                  "required": ["name", "clusterId", "teamId"],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "editService",
        "description": "Edit a service from a given team",
        "x-aclSchema": "Service",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-externalDocsPath": "docs/configuring-services",
                "x-acl": {
                  "admin": ["delete-any", "read-any", "create-any", "update-any"],
                  "team": ["delete", "read", "create", "update"]
                },
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "default": true
                  },
                  "id": {
                    "type": "string",
                    "readOnly": true
                  },
                  "name": {
                    "title": "Name",
                    "description": "A service name",
                    "example": "some-service",
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                    "type": "string"
                  },
                  "port": {
                    "description": "A service port",
                    "type": "integer",
                    "default": 80,
                    "minimum": 1,
                    "maximum": 65535
                  },
                  "clusterId": {
                    "title": "Cluster ID",
                    "type": "string",
                    "description": "A kubernetes cluster for the service",
                    "x-acl": {
                      "admin": ["read", "create"],
                      "team": ["read", "create"]
                    }
                  },
                  "ksvc": {
                    "title": "Type",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "Knative service",
                        "nullable": true,
                        "properties": {
                          "serviceType": {
                            "type": "string",
                            "enum": ["ksvc"],
                            "default": "ksvc"
                          },
                          "scaleToZero": {
                            "title": "Scale to zero",
                            "description": "Scales to zero after 60 seconds and needs approximately 8 seconds to start back up.",
                            "type": "boolean",
                            "default": false
                          },
                          "image": {
                            "title": "Container image",
                            "nullable": true,
                            "properties": {
                              "repository": {
                                "description": "A container image repository.",
                                "pattern": "^[a-z0-9]+(?:[/._-]{1,2}[a-z0-9]+)*$",
                                "type": "string"
                              },
                              "tag": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": ["repository", "tag"]
                          },
                          "secrets": {
                            "type": "array",
                            "items": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "entries": {
                                  "title": "Entries",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "uniqueItems": true
                                }
                              },
                              "required": ["name"],
                              "type": "object"
                            }
                          },
                          "env": {
                            "title": "Environment variables",
                            "type": "array",
                            "nullable": true,
                            "items": {
                              "properties": {
                                "name": {
                                  "additionalProperties": false,
                                  "nullable": true,
                                  "x-patternProperties": {
                                    "[a-zA-Z_]{1,}[a-zA-Z0-9_]*": {
                                      "maxLength": 131072,
                                      "type": "string"
                                    }
                                  },
                                  "title": "Environment variables"
                                },
                                "value": {
                                  "type": "string",
                                  "maxLength": 131072
                                }
                              },
                              "required": ["name", "value"],
                              "type": "object"
                            }
                          },
                          "resources": {
                            "title": "Pod resources",
                            "nullable": true,
                            "properties": {
                              "requests": {
                                "properties": {
                                  "cpu": {
                                    "description": "The guaranteed amount of CPU",
                                    "default": "50m",
                                    "example": ["1", "200m"],
                                    "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                    "type": "string"
                                  },
                                  "memory": {
                                    "description": "The guaranteed amount of RAM",
                                    "default": "64Mi",
                                    "example": ["1Mi", "0.5M"],
                                    "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                    "type": "string"
                                  }
                                },
                                "required": ["cpu", "memory"],
                                "type": "object"
                              },
                              "limits": {
                                "properties": {
                                  "cpu": {
                                    "description": "The maximum amount of CPU",
                                    "default": "100m",
                                    "example": ["1", "200m"],
                                    "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                    "type": "string"
                                  },
                                  "memory": {
                                    "description": "The maximum amount of RAM",
                                    "default": "128Mi",
                                    "example": ["1Mi", "0.5M"],
                                    "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                    "type": "string"
                                  }
                                },
                                "required": ["cpu", "memory"],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "annotations": {
                            "title": "Pod annotations",
                            "description": "A set of annotations.",
                            "additionalProperties": false,
                            "x-patternProperties": {
                              "^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){1,253}\\/)?([a-z0-9A-Z]+[a-z0-9A-Z-_.]+[a-z0-9A-Z]){1,63}$": {
                                "pattern": "^((.){1,253}\\/)?(.){1,63}$",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "autoCD": {
                            "title": "Continuous delivery",
                            "description": "Deploys new images based on a tagging strategy",
                            "oneOf": [
                              {
                                "title": "Off",
                                "nullable": true,
                                "additionalProperties": false
                              },
                              {
                                "title": "Semver versioning",
                                "nullable": true,
                                "properties": {
                                  "tagMatcher": {
                                    "type": "string",
                                    "enum": ["semver"],
                                    "default": "semver"
                                  },
                                  "semver": {
                                    "title": "Semver version pattern",
                                    "type": "string",
                                    "example": "PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\",  \">=1.2.3-0\"",
                                    "description": "Use this filter if your image tags follow semantic versioning rules (MAJOR.MINOR.PATCH). E.g.: PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\""
                                  }
                                },
                                "required": ["semver"],
                                "type": "object"
                              },
                              {
                                "title": "Glob pattern matching",
                                "properties": {
                                  "tagMatcher": {
                                    "type": "string",
                                    "enum": ["glob"],
                                    "default": "glob"
                                  },
                                  "glob": {
                                    "title": "Glob string pattern",
                                    "type": "string",
                                    "description": "Use this filter if you want to make glob-style patterns. E.g.: \"main-v1.3.*\"",
                                    "example": "main-v1.3.*"
                                  }
                                },
                                "required": ["glob"],
                                "type": "object",
                                "additionalProperties": false
                              }
                            ]
                          }
                        }
                      },
                      {
                        "title": "Existing Knative service",
                        "properties": {
                          "serviceType": {
                            "type": "string",
                            "enum": ["ksvcPredeployed"],
                            "default": "ksvcPredeployed"
                          }
                        },
                        "required": ["serviceType"],
                        "type": "object"
                      },
                      {
                        "title": "Existing Kubernetes service",
                        "properties": {
                          "serviceType": {
                            "type": "string",
                            "enum": ["svcPredeployed"],
                            "default": "svcPredeployed"
                          }
                        },
                        "required": ["serviceType"],
                        "type": "object"
                      }
                    ]
                  },
                  "ingress": {
                    "title": "Exposure",
                    "x-acl": {
                      "team": ["read"]
                    },
                    "oneOf": [
                      {
                        "title": "Private",
                        "nullable": true,
                        "additionalProperties": false
                      },
                      {
                        "title": "Public URL",
                        "properties": {
                          "useDefaultSubdomain": {
                            "title": "Use team domain (preferred)",
                            "type": "boolean",
                            "default": true,
                            "description": "Use the team domain so that the URL reveals the owner."
                          },
                          "subdomain": {
                            "title": "Host",
                            "type": "string",
                            "nullable": true,
                            "description": "A host that is used to set DNS 'A' records",
                            "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                          },
                          "domain": {
                            "title": "DNS Zone",
                            "description": "A managed DNS zone",
                            "type": "string"
                          },
                          "path": {
                            "title": "URL path",
                            "description": "The path in the URL that the service should be mapped to (e.g. for microservices on one app/domain.)",
                            "type": "string"
                          },
                          "forwardPath": {
                            "title": "Forward path",
                            "description": "Forward the URL path into the service (don't rewrite to /)",
                            "type": "boolean"
                          },
                          "hasSingleSignOn": {
                            "title": "Authenticate with Single Sign On",
                            "type": "boolean",
                            "default": false
                          },
                          "hasCert": {
                            "title": "Already has a certificate",
                            "type": "boolean",
                            "default": false,
                            "description": "If true a certificate should exist already"
                          },
                          "certArn": {
                            "type": "string",
                            "title": "Certificate ARN",
                            "example": "arn:aws:acm:eu-central-1:xxx:certificate/xxx"
                          },
                          "certSelect": {
                            "type": "boolean",
                            "title": "Select existing secret name",
                            "default": true
                          },
                          "certName": {
                            "type": "string",
                            "title": "Secret name",
                            "example": "www-example-com"
                          }
                        },
                        "required": ["domain", "subdomain"],
                        "type": "object"
                      }
                    ]
                  },
                  "teamId": {
                    "type": "string",
                    "readOnly": true
                  }
                },
                "required": ["name", "clusterId", "teamId"],
                "type": "object"
              }
            }
          },
          "description": "Service object that contains updated values",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully edited service",
            "content": {
              "application/json": {
                "schema": {
                  "x-externalDocsPath": "docs/configuring-services",
                  "x-acl": {
                    "admin": ["delete-any", "read-any", "create-any", "update-any"],
                    "team": ["delete", "read", "create", "update"]
                  },
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "default": true
                    },
                    "id": {
                      "type": "string",
                      "readOnly": true
                    },
                    "name": {
                      "title": "Name",
                      "description": "A service name",
                      "example": "some-service",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                      "type": "string"
                    },
                    "port": {
                      "description": "A service port",
                      "type": "integer",
                      "default": 80,
                      "minimum": 1,
                      "maximum": 65535
                    },
                    "clusterId": {
                      "title": "Cluster ID",
                      "type": "string",
                      "description": "A kubernetes cluster for the service",
                      "x-acl": {
                        "admin": ["read", "create"],
                        "team": ["read", "create"]
                      }
                    },
                    "ksvc": {
                      "title": "Type",
                      "type": "object",
                      "oneOf": [
                        {
                          "title": "Knative service",
                          "nullable": true,
                          "properties": {
                            "serviceType": {
                              "type": "string",
                              "enum": ["ksvc"],
                              "default": "ksvc"
                            },
                            "scaleToZero": {
                              "title": "Scale to zero",
                              "description": "Scales to zero after 60 seconds and needs approximately 8 seconds to start back up.",
                              "type": "boolean",
                              "default": false
                            },
                            "image": {
                              "title": "Container image",
                              "nullable": true,
                              "properties": {
                                "repository": {
                                  "description": "A container image repository.",
                                  "pattern": "^[a-z0-9]+(?:[/._-]{1,2}[a-z0-9]+)*$",
                                  "type": "string"
                                },
                                "tag": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": ["repository", "tag"]
                            },
                            "secrets": {
                              "type": "array",
                              "items": {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "entries": {
                                    "title": "Entries",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "uniqueItems": true
                                  }
                                },
                                "required": ["name"],
                                "type": "object"
                              }
                            },
                            "env": {
                              "title": "Environment variables",
                              "type": "array",
                              "nullable": true,
                              "items": {
                                "properties": {
                                  "name": {
                                    "additionalProperties": false,
                                    "nullable": true,
                                    "x-patternProperties": {
                                      "[a-zA-Z_]{1,}[a-zA-Z0-9_]*": {
                                        "maxLength": 131072,
                                        "type": "string"
                                      }
                                    },
                                    "title": "Environment variables"
                                  },
                                  "value": {
                                    "type": "string",
                                    "maxLength": 131072
                                  }
                                },
                                "required": ["name", "value"],
                                "type": "object"
                              }
                            },
                            "resources": {
                              "title": "Pod resources",
                              "nullable": true,
                              "properties": {
                                "requests": {
                                  "properties": {
                                    "cpu": {
                                      "description": "The guaranteed amount of CPU",
                                      "default": "50m",
                                      "example": ["1", "200m"],
                                      "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                      "type": "string"
                                    },
                                    "memory": {
                                      "description": "The guaranteed amount of RAM",
                                      "default": "64Mi",
                                      "example": ["1Mi", "0.5M"],
                                      "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                      "type": "string"
                                    }
                                  },
                                  "required": ["cpu", "memory"],
                                  "type": "object"
                                },
                                "limits": {
                                  "properties": {
                                    "cpu": {
                                      "description": "The maximum amount of CPU",
                                      "default": "100m",
                                      "example": ["1", "200m"],
                                      "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                                      "type": "string"
                                    },
                                    "memory": {
                                      "description": "The maximum amount of RAM",
                                      "default": "128Mi",
                                      "example": ["1Mi", "0.5M"],
                                      "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                                      "type": "string"
                                    }
                                  },
                                  "required": ["cpu", "memory"],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "annotations": {
                              "title": "Pod annotations",
                              "description": "A set of annotations.",
                              "additionalProperties": false,
                              "x-patternProperties": {
                                "^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){1,253}\\/)?([a-z0-9A-Z]+[a-z0-9A-Z-_.]+[a-z0-9A-Z]){1,63}$": {
                                  "pattern": "^((.){1,253}\\/)?(.){1,63}$",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "autoCD": {
                              "title": "Continuous delivery",
                              "description": "Deploys new images based on a tagging strategy",
                              "oneOf": [
                                {
                                  "title": "Off",
                                  "nullable": true,
                                  "additionalProperties": false
                                },
                                {
                                  "title": "Semver versioning",
                                  "nullable": true,
                                  "properties": {
                                    "tagMatcher": {
                                      "type": "string",
                                      "enum": ["semver"],
                                      "default": "semver"
                                    },
                                    "semver": {
                                      "title": "Semver version pattern",
                                      "type": "string",
                                      "example": "PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\",  \">=1.2.3-0\"",
                                      "description": "Use this filter if your image tags follow semantic versioning rules (MAJOR.MINOR.PATCH). E.g.: PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\""
                                    }
                                  },
                                  "required": ["semver"],
                                  "type": "object"
                                },
                                {
                                  "title": "Glob pattern matching",
                                  "properties": {
                                    "tagMatcher": {
                                      "type": "string",
                                      "enum": ["glob"],
                                      "default": "glob"
                                    },
                                    "glob": {
                                      "title": "Glob string pattern",
                                      "type": "string",
                                      "description": "Use this filter if you want to make glob-style patterns. E.g.: \"main-v1.3.*\"",
                                      "example": "main-v1.3.*"
                                    }
                                  },
                                  "required": ["glob"],
                                  "type": "object",
                                  "additionalProperties": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "title": "Existing Knative service",
                          "properties": {
                            "serviceType": {
                              "type": "string",
                              "enum": ["ksvcPredeployed"],
                              "default": "ksvcPredeployed"
                            }
                          },
                          "required": ["serviceType"],
                          "type": "object"
                        },
                        {
                          "title": "Existing Kubernetes service",
                          "properties": {
                            "serviceType": {
                              "type": "string",
                              "enum": ["svcPredeployed"],
                              "default": "svcPredeployed"
                            }
                          },
                          "required": ["serviceType"],
                          "type": "object"
                        }
                      ]
                    },
                    "ingress": {
                      "title": "Exposure",
                      "x-acl": {
                        "team": ["read"]
                      },
                      "oneOf": [
                        {
                          "title": "Private",
                          "nullable": true,
                          "additionalProperties": false
                        },
                        {
                          "title": "Public URL",
                          "properties": {
                            "useDefaultSubdomain": {
                              "title": "Use team domain (preferred)",
                              "type": "boolean",
                              "default": true,
                              "description": "Use the team domain so that the URL reveals the owner."
                            },
                            "subdomain": {
                              "title": "Host",
                              "type": "string",
                              "nullable": true,
                              "description": "A host that is used to set DNS 'A' records",
                              "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                            },
                            "domain": {
                              "title": "DNS Zone",
                              "description": "A managed DNS zone",
                              "type": "string"
                            },
                            "path": {
                              "title": "URL path",
                              "description": "The path in the URL that the service should be mapped to (e.g. for microservices on one app/domain.)",
                              "type": "string"
                            },
                            "forwardPath": {
                              "title": "Forward path",
                              "description": "Forward the URL path into the service (don't rewrite to /)",
                              "type": "boolean"
                            },
                            "hasSingleSignOn": {
                              "title": "Authenticate with Single Sign On",
                              "type": "boolean",
                              "default": false
                            },
                            "hasCert": {
                              "title": "Already has a certificate",
                              "type": "boolean",
                              "default": false,
                              "description": "If true a certificate should exist already"
                            },
                            "certArn": {
                              "type": "string",
                              "title": "Certificate ARN",
                              "example": "arn:aws:acm:eu-central-1:xxx:certificate/xxx"
                            },
                            "certSelect": {
                              "type": "boolean",
                              "title": "Select existing secret name",
                              "default": true
                            },
                            "certName": {
                              "type": "string",
                              "title": "Secret name",
                              "example": "www-example-com"
                            }
                          },
                          "required": ["domain", "subdomain"],
                          "type": "object"
                        }
                      ]
                    },
                    "teamId": {
                      "type": "string",
                      "readOnly": true
                    }
                  },
                  "required": ["name", "clusterId", "teamId"],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteService",
        "description": "Delete a service from a given team",
        "x-aclSchema": "Service",
        "responses": {
          "200": {
            "description": "Successfully deleted a service"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/secrets": {
      "parameters": [
        {
          "name": "teamId",
          "in": "path",
          "description": "ID of team to return",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "getSecrets",
        "description": "Get secrets from a given team",
        "x-aclSchema": "Secrets",
        "responses": {
          "200": {
            "description": "Successfully obtained secrets",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "x-acl": {
                      "admin": ["read-any", "create-any", "update-any", "delete-any"],
                      "team": ["read", "create", "update", "delete"]
                    },
                    "properties": {
                      "id": {
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "type": "string",
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                        "title": "Name",
                        "description": "A secret name",
                        "example": "secret01"
                      },
                      "clusterId": {
                        "x-acl": {
                          "admin": ["read", "create"],
                          "team": ["read", "create"]
                        },
                        "title": "Cluster ID",
                        "type": "string",
                        "description": "A kubernetes cluster for the secret"
                      }
                    },
                    "required": ["name", "clusterId"],
                    "oneOf": [
                      {
                        "title": "Generic",
                        "properties": {
                          "type": {
                            "default": "generic",
                            "enum": ["generic"]
                          },
                          "entries": {
                            "type": "array",
                            "items": {
                              "description": "A property name at vaultPath",
                              "minItems": 1,
                              "pattern": "^[a-zA-Z0-9_]*$",
                              "type": "string",
                              "uniqueItems": true
                            }
                          }
                        },
                        "required": ["type", "entries"],
                        "type": "object"
                      },
                      {
                        "title": "Docker registry",
                        "properties": {
                          "type": {
                            "default": "docker-registry",
                            "enum": ["docker-registry"],
                            "type": "string"
                          },
                          "dockerconfig": {
                            "type": "string",
                            "enum": [".dockerconfig.json"],
                            "default": ".dockerconfig.json",
                            "readOnly": true
                          }
                        },
                        "required": ["type"],
                        "type": "object"
                      },
                      {
                        "title": "TLS",
                        "properties": {
                          "type": {
                            "default": "tls",
                            "enum": ["tls"],
                            "type": "string"
                          },
                          "crt": {
                            "type": "string",
                            "default": "tls.crt",
                            "description": "A Vault property name that contains PEM public key certificate"
                          },
                          "key": {
                            "type": "string",
                            "default": "tls.key",
                            "description": "A Vault property name that contains PEM private key certificate"
                          },
                          "ca": {
                            "type": "string",
                            "title": "CA",
                            "description": "A Vault property name that contains CA certificate content"
                          }
                        },
                        "required": ["type", "crt", "key"],
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-acl": {
                    "admin": ["read-any"],
                    "team": ["read-any"]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createSecret",
        "description": "Create a team secret",
        "x-aclSchema": "Secret",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-acl": {
                  "admin": ["read-any", "create-any", "update-any", "delete-any"],
                  "team": ["read", "create", "update", "delete"]
                },
                "properties": {
                  "id": {
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                    "title": "Name",
                    "description": "A secret name",
                    "example": "secret01"
                  },
                  "clusterId": {
                    "x-acl": {
                      "admin": ["read", "create"],
                      "team": ["read", "create"]
                    },
                    "title": "Cluster ID",
                    "type": "string",
                    "description": "A kubernetes cluster for the secret"
                  }
                },
                "required": ["name", "clusterId"],
                "oneOf": [
                  {
                    "title": "Generic",
                    "properties": {
                      "type": {
                        "default": "generic",
                        "enum": ["generic"]
                      },
                      "entries": {
                        "type": "array",
                        "items": {
                          "description": "A property name at vaultPath",
                          "minItems": 1,
                          "pattern": "^[a-zA-Z0-9_]*$",
                          "type": "string",
                          "uniqueItems": true
                        }
                      }
                    },
                    "required": ["type", "entries"],
                    "type": "object"
                  },
                  {
                    "title": "Docker registry",
                    "properties": {
                      "type": {
                        "default": "docker-registry",
                        "enum": ["docker-registry"],
                        "type": "string"
                      },
                      "dockerconfig": {
                        "type": "string",
                        "enum": [".dockerconfig.json"],
                        "default": ".dockerconfig.json",
                        "readOnly": true
                      }
                    },
                    "required": ["type"],
                    "type": "object"
                  },
                  {
                    "title": "TLS",
                    "properties": {
                      "type": {
                        "default": "tls",
                        "enum": ["tls"],
                        "type": "string"
                      },
                      "crt": {
                        "type": "string",
                        "default": "tls.crt",
                        "description": "A Vault property name that contains PEM public key certificate"
                      },
                      "key": {
                        "type": "string",
                        "default": "tls.key",
                        "description": "A Vault property name that contains PEM private key certificate"
                      },
                      "ca": {
                        "type": "string",
                        "title": "CA",
                        "description": "A Vault property name that contains CA certificate content"
                      }
                    },
                    "required": ["type", "crt", "key"],
                    "type": "object"
                  }
                ],
                "type": "object"
              }
            }
          },
          "description": "Service object",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully stored secret configuration",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": {
                    "admin": ["read-any", "create-any", "update-any", "delete-any"],
                    "team": ["read", "create", "update", "delete"]
                  },
                  "properties": {
                    "id": {
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "type": "string",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                      "title": "Name",
                      "description": "A secret name",
                      "example": "secret01"
                    },
                    "clusterId": {
                      "x-acl": {
                        "admin": ["read", "create"],
                        "team": ["read", "create"]
                      },
                      "title": "Cluster ID",
                      "type": "string",
                      "description": "A kubernetes cluster for the secret"
                    }
                  },
                  "required": ["name", "clusterId"],
                  "oneOf": [
                    {
                      "title": "Generic",
                      "properties": {
                        "type": {
                          "default": "generic",
                          "enum": ["generic"]
                        },
                        "entries": {
                          "type": "array",
                          "items": {
                            "description": "A property name at vaultPath",
                            "minItems": 1,
                            "pattern": "^[a-zA-Z0-9_]*$",
                            "type": "string",
                            "uniqueItems": true
                          }
                        }
                      },
                      "required": ["type", "entries"],
                      "type": "object"
                    },
                    {
                      "title": "Docker registry",
                      "properties": {
                        "type": {
                          "default": "docker-registry",
                          "enum": ["docker-registry"],
                          "type": "string"
                        },
                        "dockerconfig": {
                          "type": "string",
                          "enum": [".dockerconfig.json"],
                          "default": ".dockerconfig.json",
                          "readOnly": true
                        }
                      },
                      "required": ["type"],
                      "type": "object"
                    },
                    {
                      "title": "TLS",
                      "properties": {
                        "type": {
                          "default": "tls",
                          "enum": ["tls"],
                          "type": "string"
                        },
                        "crt": {
                          "type": "string",
                          "default": "tls.crt",
                          "description": "A Vault property name that contains PEM public key certificate"
                        },
                        "key": {
                          "type": "string",
                          "default": "tls.key",
                          "description": "A Vault property name that contains PEM private key certificate"
                        },
                        "ca": {
                          "type": "string",
                          "title": "CA",
                          "description": "A Vault property name that contains CA certificate content"
                        }
                      },
                      "required": ["type", "crt", "key"],
                      "type": "object"
                    }
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "Resource already exists",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/secrets/{secretId}": {
      "parameters": [
        {
          "name": "teamId",
          "in": "path",
          "description": "ID of team to return",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "secretId",
          "in": "path",
          "description": "ID of the secret",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "getSecret",
        "description": "Get a secret from a given team",
        "x-aclSchema": "Secret",
        "responses": {
          "200": {
            "description": "Successfully obtained secret configuration",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": {
                    "admin": ["read-any", "create-any", "update-any", "delete-any"],
                    "team": ["read", "create", "update", "delete"]
                  },
                  "properties": {
                    "id": {
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "type": "string",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                      "title": "Name",
                      "description": "A secret name",
                      "example": "secret01"
                    },
                    "clusterId": {
                      "x-acl": {
                        "admin": ["read", "create"],
                        "team": ["read", "create"]
                      },
                      "title": "Cluster ID",
                      "type": "string",
                      "description": "A kubernetes cluster for the secret"
                    }
                  },
                  "required": ["name", "clusterId"],
                  "oneOf": [
                    {
                      "title": "Generic",
                      "properties": {
                        "type": {
                          "default": "generic",
                          "enum": ["generic"]
                        },
                        "entries": {
                          "type": "array",
                          "items": {
                            "description": "A property name at vaultPath",
                            "minItems": 1,
                            "pattern": "^[a-zA-Z0-9_]*$",
                            "type": "string",
                            "uniqueItems": true
                          }
                        }
                      },
                      "required": ["type", "entries"],
                      "type": "object"
                    },
                    {
                      "title": "Docker registry",
                      "properties": {
                        "type": {
                          "default": "docker-registry",
                          "enum": ["docker-registry"],
                          "type": "string"
                        },
                        "dockerconfig": {
                          "type": "string",
                          "enum": [".dockerconfig.json"],
                          "default": ".dockerconfig.json",
                          "readOnly": true
                        }
                      },
                      "required": ["type"],
                      "type": "object"
                    },
                    {
                      "title": "TLS",
                      "properties": {
                        "type": {
                          "default": "tls",
                          "enum": ["tls"],
                          "type": "string"
                        },
                        "crt": {
                          "type": "string",
                          "default": "tls.crt",
                          "description": "A Vault property name that contains PEM public key certificate"
                        },
                        "key": {
                          "type": "string",
                          "default": "tls.key",
                          "description": "A Vault property name that contains PEM private key certificate"
                        },
                        "ca": {
                          "type": "string",
                          "title": "CA",
                          "description": "A Vault property name that contains CA certificate content"
                        }
                      },
                      "required": ["type", "crt", "key"],
                      "type": "object"
                    }
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "editSecret",
        "description": "Edit a secret from a given team",
        "x-aclSchema": "Secret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-acl": {
                  "admin": ["read-any", "create-any", "update-any", "delete-any"],
                  "team": ["read", "create", "update", "delete"]
                },
                "properties": {
                  "id": {
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                    "title": "Name",
                    "description": "A secret name",
                    "example": "secret01"
                  },
                  "clusterId": {
                    "x-acl": {
                      "admin": ["read", "create"],
                      "team": ["read", "create"]
                    },
                    "title": "Cluster ID",
                    "type": "string",
                    "description": "A kubernetes cluster for the secret"
                  }
                },
                "required": ["name", "clusterId"],
                "oneOf": [
                  {
                    "title": "Generic",
                    "properties": {
                      "type": {
                        "default": "generic",
                        "enum": ["generic"]
                      },
                      "entries": {
                        "type": "array",
                        "items": {
                          "description": "A property name at vaultPath",
                          "minItems": 1,
                          "pattern": "^[a-zA-Z0-9_]*$",
                          "type": "string",
                          "uniqueItems": true
                        }
                      }
                    },
                    "required": ["type", "entries"],
                    "type": "object"
                  },
                  {
                    "title": "Docker registry",
                    "properties": {
                      "type": {
                        "default": "docker-registry",
                        "enum": ["docker-registry"],
                        "type": "string"
                      },
                      "dockerconfig": {
                        "type": "string",
                        "enum": [".dockerconfig.json"],
                        "default": ".dockerconfig.json",
                        "readOnly": true
                      }
                    },
                    "required": ["type"],
                    "type": "object"
                  },
                  {
                    "title": "TLS",
                    "properties": {
                      "type": {
                        "default": "tls",
                        "enum": ["tls"],
                        "type": "string"
                      },
                      "crt": {
                        "type": "string",
                        "default": "tls.crt",
                        "description": "A Vault property name that contains PEM public key certificate"
                      },
                      "key": {
                        "type": "string",
                        "default": "tls.key",
                        "description": "A Vault property name that contains PEM private key certificate"
                      },
                      "ca": {
                        "type": "string",
                        "title": "CA",
                        "description": "A Vault property name that contains CA certificate content"
                      }
                    },
                    "required": ["type", "crt", "key"],
                    "type": "object"
                  }
                ],
                "type": "object"
              }
            }
          },
          "description": "Secret object that contains updated values",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully edited a team secret",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": {
                    "admin": ["read-any", "create-any", "update-any", "delete-any"],
                    "team": ["read", "create", "update", "delete"]
                  },
                  "properties": {
                    "id": {
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "type": "string",
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                      "title": "Name",
                      "description": "A secret name",
                      "example": "secret01"
                    },
                    "clusterId": {
                      "x-acl": {
                        "admin": ["read", "create"],
                        "team": ["read", "create"]
                      },
                      "title": "Cluster ID",
                      "type": "string",
                      "description": "A kubernetes cluster for the secret"
                    }
                  },
                  "required": ["name", "clusterId"],
                  "oneOf": [
                    {
                      "title": "Generic",
                      "properties": {
                        "type": {
                          "default": "generic",
                          "enum": ["generic"]
                        },
                        "entries": {
                          "type": "array",
                          "items": {
                            "description": "A property name at vaultPath",
                            "minItems": 1,
                            "pattern": "^[a-zA-Z0-9_]*$",
                            "type": "string",
                            "uniqueItems": true
                          }
                        }
                      },
                      "required": ["type", "entries"],
                      "type": "object"
                    },
                    {
                      "title": "Docker registry",
                      "properties": {
                        "type": {
                          "default": "docker-registry",
                          "enum": ["docker-registry"],
                          "type": "string"
                        },
                        "dockerconfig": {
                          "type": "string",
                          "enum": [".dockerconfig.json"],
                          "default": ".dockerconfig.json",
                          "readOnly": true
                        }
                      },
                      "required": ["type"],
                      "type": "object"
                    },
                    {
                      "title": "TLS",
                      "properties": {
                        "type": {
                          "default": "tls",
                          "enum": ["tls"],
                          "type": "string"
                        },
                        "crt": {
                          "type": "string",
                          "default": "tls.crt",
                          "description": "A Vault property name that contains PEM public key certificate"
                        },
                        "key": {
                          "type": "string",
                          "default": "tls.key",
                          "description": "A Vault property name that contains PEM private key certificate"
                        },
                        "ca": {
                          "type": "string",
                          "title": "CA",
                          "description": "A Vault property name that contains CA certificate content"
                        }
                      },
                      "required": ["type", "crt", "key"],
                      "type": "object"
                    }
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSecret",
        "description": "Delete a secret from a given team",
        "x-aclSchema": "Secret",
        "responses": {
          "200": {
            "description": "Successfully deleted a team secret"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/deploy": {
      "get": {
        "x-aclSchema": "Deployment",
        "operationId": "deploy",
        "description": "Trigger a deployment (only for admin)",
        "responses": {
          "202": {
            "description": "Deployment has been triggered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "Resource already exists",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/kubecfg/{teamId}": {
      "parameters": [
        {
          "name": "teamId",
          "in": "path",
          "description": "ID of team to return",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "downloadKubecfg",
        "description": "Download a kubecfg for a team",
        "x-aclSchema": "Kubecfg",
        "responses": {
          "200": {
            "description": "Succesfully finished the download",
            "content": {
              "application/yaml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/session": {
      "get": {
        "security": [],
        "operationId": "getSession",
        "description": "Get the session for the current user",
        "responses": {
          "200": {
            "description": "Get the session for the logged in user",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": {
                    "admin": ["read"],
                    "team": ["read"]
                  },
                  "properties": {
                    "clusters": {
                      "readOnly": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    },
                    "core": {
                      "readOnly": true
                    },
                    "currentClusterId": {
                      "type": "string",
                      "readOnly": true
                    },
                    "isDirty": {
                      "type": "boolean",
                      "readOnly": true
                    },
                    "namespaces": {
                      "readOnly": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "teams": {
                      "readOnly": true,
                      "type": "array",
                      "items": {
                        "x-externalDocsPath": "docs/configuring-teams",
                        "x-acl": {
                          "admin": ["delete-any", "read-any", "create-any", "update-any"],
                          "team": ["read-any", "update"]
                        },
                        "properties": {
                          "id": {
                            "description": "A lowercase name that starts with a letter and may contain dashes.",
                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                            "type": "string",
                            "title": "ID",
                            "x-acl": {
                              "admin": ["read"],
                              "team": ["read"]
                            }
                          },
                          "name": {
                            "description": "A team name",
                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                            "type": "string",
                            "title": "Name",
                            "example": "otomi",
                            "x-acl": {
                              "admin": ["create", "read"],
                              "team": ["read"]
                            }
                          },
                          "clusters": {
                            "title": "Clusters",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "uniqueItems": true,
                            "minItems": 1,
                            "x-acl": {
                              "team": ["read"]
                            }
                          },
                          "oidc": {
                            "title": "OIDC",
                            "properties": {
                              "groupMapping": {
                                "title": "Group mapping",
                                "type": "string",
                                "description": "An OIDC group name/id granting access to this team"
                              }
                            },
                            "type": "object"
                          },
                          "password": {
                            "type": "string",
                            "writeOnly": true
                          },
                          "alerts": {
                            "title": "Alerting endpoints",
                            "properties": {
                              "receivers": {
                                "title": "Receivers",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": ["slack", "msteams", "email"]
                                },
                                "uniqueItems": true
                              },
                              "slack": {
                                "title": "Slack",
                                "properties": {
                                  "url": {
                                    "title": "Web hook",
                                    "type": "string",
                                    "description": "Slack web hook. If none is given the global one is used."
                                  },
                                  "channel": {
                                    "title": "Channel for non-criticals",
                                    "type": "string",
                                    "description": "Slack channel for non-criticals. If none is given the global one is used, which defaults to 'mon-otomi'."
                                  },
                                  "channelCrit": {
                                    "title": "Channel for criticals",
                                    "type": "string",
                                    "description": "Slack channel for critical alerts. If none is given the global one is used, which defaults to 'mon-otomi-crit'."
                                  }
                                },
                                "type": "object"
                              },
                              "msteams": {
                                "title": "Microsoft Teams",
                                "properties": {
                                  "lowPrio": {
                                    "title": "Low prio webhook",
                                    "type": "string",
                                    "description": "The low prio web hook"
                                  },
                                  "highPrio": {
                                    "title": "High prio webhook",
                                    "type": "string",
                                    "description": "The high prio web hook"
                                  }
                                },
                                "type": "object"
                              },
                              "email": {
                                "title": "Email",
                                "properties": {
                                  "nonCritical": {
                                    "title": "Non criticals",
                                    "type": "string",
                                    "description": "One or more email addresses (comma separated) for non-critical events."
                                  },
                                  "critical": {
                                    "title": "Criticals",
                                    "type": "string",
                                    "description": "Email addresses (comma separated) for critical events."
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": ["name", "clusters", "password"],
                        "type": "object"
                      }
                    },
                    "user": {
                      "readOnly": true,
                      "x-acl": {
                        "admin": [],
                        "team": []
                      },
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "A user name",
                          "readOnly": true
                        },
                        "email": {
                          "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                          "type": "string"
                        },
                        "isAdmin": {
                          "type": "boolean",
                          "default": false,
                          "description": "If the user is admin",
                          "readOnly": true
                        },
                        "teams": {
                          "type": "array",
                          "default": [],
                          "description": "A list of teams the user belongs to",
                          "items": {
                            "type": "string"
                          },
                          "readOnly": true,
                          "uniqueItems": true
                        },
                        "roles": {
                          "type": "array",
                          "default": [],
                          "description": "A list of roles that the user has",
                          "items": {
                            "type": "string"
                          },
                          "readOnly": true,
                          "uniqueItems": true
                        }
                      },
                      "required": ["isAdmin", "name", "email", "teams", "roles"],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "The requested session."
          }
        }
      }
    },
    "/apiDocs": {
      "get": {
        "operationId": "apiDocs",
        "security": [],
        "description": "Get OpenAPIDoc document",
        "responses": {
          "200": {
            "description": "The requested apiDoc.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "The requested apiDoc."
          }
        }
      }
    },
    "/settings": {
      "get": {
        "operationId": "getSettings",
        "description": "Get settings from the `settings.yaml` and `secret.settings.yaml` file.",
        "x-aclSchema": "Settings",
        "responses": {
          "200": {
            "description": "The request is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": {
                    "admin": ["read-any", "update-any"],
                    "team": []
                  },
                  "additionalProperties": false,
                  "properties": {
                    "alerts": {
                      "type": "object",
                      "properties": {
                        "drone": {
                          "default": "slack",
                          "enum": ["slack", "msteams"],
                          "type": "string"
                        },
                        "email": {
                          "additionalProperties": false,
                          "properties": {
                            "critical": {
                              "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                              "type": "string",
                              "description": "One or more email addresses (comma separated) for critical events."
                            },
                            "nonCritical": {
                              "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                              "type": "string",
                              "description": "One or more email addresses (comma separated) for non-critical events."
                            }
                          },
                          "type": "object"
                        },
                        "groupInterval": {
                          "default": "5m",
                          "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)",
                          "type": "string"
                        },
                        "msteams": {
                          "additionalProperties": false,
                          "properties": {
                            "highPrio": {
                              "description": "The low prio web hook.",
                              "type": "string"
                            },
                            "lowPrio": {
                              "description": "The high prio web hook.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "receivers": {
                          "description": "Notification receivers.",
                          "items": {
                            "enum": ["slack", "msteams", "email"],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "repeatInterval": {
                          "default": "3h",
                          "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).",
                          "type": "string"
                        },
                        "slack": {
                          "additionalProperties": false,
                          "properties": {
                            "channel": {
                              "default": "mon-otomi",
                              "description": "The Slack channel for non-critical notifications.",
                              "type": "string"
                            },
                            "channelCrit": {
                              "default": "mon-otomi",
                              "description": "The Slack channel for critical notifications.",
                              "type": "string"
                            },
                            "url": {
                              "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                              "type": "string",
                              "description": "A Slack webhook URL."
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "azure": {
                      "description": "Azure specific configuration.",
                      "properties": {
                        "appgw": {
                          "properties": {
                            "isManaged": {
                              "default": true,
                              "description": "Is this appgw installed as AKS addon?",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "diskType": {
                          "description": "An Azure disk type (SKU Type).",
                          "enum": [
                            "Standard_LRS",
                            "Standard_GRS",
                            "Standard_RAGRS",
                            "Standard_ZRS",
                            "Premium_LRS",
                            "Premium_ZRS",
                            "Standard_GZRS",
                            "Standard_RAGZRS"
                          ],
                          "type": "string"
                        },
                        "keyVault": {
                          "description": "Azure Key Vault access credentials. Will use azure.tenantId if tenantId is not provided.",
                          "properties": {
                            "tenantId": {
                              "description": "An Azure tenant ID.",
                              "type": "string"
                            },
                            "clientId": {
                              "description": "An Azure client ID.",
                              "type": "string"
                            },
                            "clientSecret": {
                              "description": "An Azure client secret.",
                              "type": "string"
                            }
                          },
                          "required": ["clientId", "clientSecret"],
                          "type": "object"
                        },
                        "monitor": {
                          "properties": {
                            "appInsightsApiKey": {
                              "description": "An Azure AppInsights client secret (defaults to clientSecret).",
                              "type": "string"
                            },
                            "appInsightsAppId": {
                              "description": "An Azure AppInsights client id (defaults to clientId).",
                              "type": "string"
                            },
                            "clientId": {
                              "description": "An Azure client id.",
                              "type": "string"
                            },
                            "clientSecret": {
                              "description": "An Azure client secret.",
                              "type": "string"
                            },
                            "logAnalyticsClientId": {
                              "description": "An Azure client secret (defaults to clientSecret).",
                              "type": "string"
                            },
                            "logAnalyticsClientSecret": {
                              "description": "An Azure client secret (defaults to clientSecret).",
                              "type": "string"
                            },
                            "logAnalyticsTenantId": {
                              "description": "An Azure tenant id (defaults to tenantId).",
                              "type": "string"
                            },
                            "logAnalyticsWorkspace": {
                              "description": "An Azure monitor log analytics workspace.",
                              "type": "string"
                            }
                          }
                        },
                        "resourceGroup": {
                          "description": "An Azure resource group.",
                          "type": "string"
                        },
                        "subscriptionId": {
                          "description": "An Azure subscription ID.",
                          "type": "string"
                        },
                        "tenantId": {
                          "description": "An Azure tenant ID.",
                          "type": "string"
                        }
                      },
                      "required": ["diskType", "resourceGroup", "subscriptionId", "tenantId"],
                      "type": "object"
                    },
                    "customer": {
                      "additionalProperties": false,
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "google": {
                      "description": "Google specific configuration.",
                      "properties": {
                        "cloudDnsKey": {
                          "description": "A service account key for managing a DNS zone.",
                          "type": "string"
                        },
                        "kmsAccount": {
                          "description": "A service account key for managing a KMS vault.",
                          "type": "string"
                        },
                        "projectId": {
                          "description": "A Google Cloud project ID for accessing DNS zone.",
                          "type": "string"
                        }
                      },
                      "required": ["cloudDnsKey", "projectId"],
                      "type": "object"
                    },
                    "home": {
                      "type": "object",
                      "properties": {
                        "drone": {
                          "default": "slack",
                          "enum": ["slack", "msteams"],
                          "type": "string"
                        },
                        "email": {
                          "additionalProperties": false,
                          "properties": {
                            "critical": {
                              "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                              "type": "string",
                              "description": "One or more email addresses (comma separated) for critical events."
                            },
                            "nonCritical": {
                              "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                              "type": "string",
                              "description": "One or more email addresses (comma separated) for non-critical events."
                            }
                          },
                          "type": "object"
                        },
                        "groupInterval": {
                          "default": "5m",
                          "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)",
                          "type": "string"
                        },
                        "msteams": {
                          "additionalProperties": false,
                          "properties": {
                            "highPrio": {
                              "description": "The low prio web hook.",
                              "type": "string"
                            },
                            "lowPrio": {
                              "description": "The high prio web hook.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "receivers": {
                          "description": "Notification receivers.",
                          "items": {
                            "enum": ["slack", "msteams", "email"],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "repeatInterval": {
                          "default": "3h",
                          "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).",
                          "type": "string"
                        },
                        "slack": {
                          "additionalProperties": false,
                          "properties": {
                            "channel": {
                              "default": "mon-otomi",
                              "description": "The Slack channel for non-critical notifications.",
                              "type": "string"
                            },
                            "channelCrit": {
                              "default": "mon-otomi",
                              "description": "The Slack channel for critical notifications.",
                              "type": "string"
                            },
                            "url": {
                              "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                              "type": "string",
                              "description": "A Slack webhook URL."
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "kms": {
                      "description": "Use Cloud KMS to encrypt and decrypt the master key",
                      "oneOf": [
                        {
                          "title": "gcpckms",
                          "properties": {
                            "gcpckms": {
                              "properties": {
                                "project": {
                                  "type": "string"
                                },
                                "region": {
                                  "type": "string"
                                },
                                "key_ring": {
                                  "type": "string"
                                },
                                "kmsAccount": {
                                  "type": "string"
                                }
                              },
                              "required": ["project", "region", "key_ring", "kmsAccount"],
                              "type": "object"
                            }
                          },
                          "required": ["gcpckms"],
                          "type": "object"
                        },
                        {
                          "title": "awskms",
                          "properties": {
                            "awskms": {
                              "properties": {
                                "region": {
                                  "type": "string"
                                },
                                "access_key": {
                                  "type": "string"
                                },
                                "secret_key": {
                                  "type": "string"
                                },
                                "endpoint": {
                                  "type": "string"
                                }
                              },
                              "required": ["region", "access_key", "secret_key", "endpoint"],
                              "type": "object"
                            }
                          },
                          "required": ["awskms"],
                          "type": "object"
                        },
                        {
                          "title": "azurekeyvault",
                          "properties": {
                            "azurekeyvault": {
                              "properties": {
                                "vault_name": {
                                  "type": "string"
                                },
                                "tenant_id": {
                                  "type": "string"
                                },
                                "client_id": {
                                  "type": "string"
                                },
                                "client_secret": {
                                  "type": "string"
                                }
                              },
                              "required": ["vault_name", "tenant_id", "client_id", "client_secret"],
                              "type": "object"
                            }
                          },
                          "required": ["azurekeyvault"],
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    },
                    "oidc": {
                      "additionalProperties": false,
                      "description": "Holds many parts used in different locations. Please see keycloak, istio and oauth-proxy all consuming parts.",
                      "properties": {
                        "adminGroupID": {
                          "type": "string"
                        },
                        "apiUrl": {
                          "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                          "type": "string"
                        },
                        "authUrl": {
                          "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                          "type": "string"
                        },
                        "clientID": {
                          "type": "string"
                        },
                        "clientSecret": {
                          "type": "string"
                        },
                        "issuer": {
                          "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                          "type": "string"
                        },
                        "scope": {
                          "type": "string"
                        },
                        "teamAdminGroupID": {
                          "type": "string"
                        },
                        "tenantID": {
                          "type": "string"
                        },
                        "tokenUrl": {
                          "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                          "type": "string"
                        },
                        "usernameClaimMapper": {
                          "type": "string",
                          "description": "Claim name used by Keycloak to identify incoming users from identity provider"
                        },
                        "subClaimMapper": {
                          "type": "string",
                          "description": "Select OIDC claim to be used as a unique user identifier",
                          "default": "sub"
                        }
                      },
                      "type": "object"
                    },
                    "otomi": {
                      "additionalProperties": false,
                      "properties": {
                        "hasCloudLB": {
                          "default": false,
                          "description": "Set this to true when an external LB exists or needs to be started (AWS ALB, Azure AppGW, Google Apigee). This will then be configured through ingress controllers. Expects existing LBs to terminate https. Currently this is only working correctly for Azure, and not for AWS and Google. AWS is close to completion.",
                          "type": "boolean"
                        },
                        "isHomeMonitored": {
                          "default": false,
                          "description": "Whether this cluster is home monitored (like when under a Premium SLA). Sends criticals home.",
                          "type": "boolean"
                        },
                        "isManaged": {
                          "default": true,
                          "description": "Whether masters are managed and not under control. Set this to false when onprem.",
                          "type": "boolean"
                        },
                        "isMultitenant": {
                          "default": true,
                          "description": "Whether to separate team metrics and logs. Disabling this lets everybody be admin and see everything.",
                          "type": "boolean"
                        },
                        "mode": {
                          "default": "ee",
                          "description": "The otomi-core edition. Either community edition (ce) or enterprise edition (ee).",
                          "enum": ["ce", "ee"],
                          "type": "string"
                        },
                        "pullSecret": {
                          "default": "",
                          "description": "The pullsecret to deploy the Otomi API and Console. Requires an Otomi license.",
                          "type": "string"
                        },
                        "teamPrefix": {
                          "default": "team-",
                          "description": "The prefix to use in URLs for team domains.",
                          "pattern": "^[a-z]+[-]{1}$",
                          "type": "string"
                        },
                        "addons": {
                          "description": "Manage addon configuration",
                          "additionalProperties": false,
                          "properties": {
                            "conftest": {
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "default": true,
                                  "description": "Use this flag to enable conftest for policy validation"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "smtp": {
                      "additionalProperties": false,
                      "properties": {
                        "auth_identity": {
                          "type": "string"
                        },
                        "auth_password": {
                          "type": "string"
                        },
                        "auth_secret": {
                          "type": "string"
                        },
                        "auth_username": {
                          "type": "string"
                        },
                        "from": {
                          "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                          "type": "string",
                          "description": "The \"from\" address. Defaults to alerts@$clusterDomain."
                        },
                        "hello": {
                          "type": "string"
                        },
                        "smarthost": {
                          "description": "The smtp host:port combination.",
                          "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):()([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])$",
                          "type": "string"
                        }
                      },
                      "required": ["smarthost"],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "editSettings",
        "description": "Edits the settings from the `settings.yaml` file",
        "x-aclSchema": "Settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-acl": {
                  "admin": ["read-any", "update-any"],
                  "team": []
                },
                "additionalProperties": false,
                "properties": {
                  "alerts": {
                    "type": "object",
                    "properties": {
                      "drone": {
                        "default": "slack",
                        "enum": ["slack", "msteams"],
                        "type": "string"
                      },
                      "email": {
                        "additionalProperties": false,
                        "properties": {
                          "critical": {
                            "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                            "type": "string",
                            "description": "One or more email addresses (comma separated) for critical events."
                          },
                          "nonCritical": {
                            "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                            "type": "string",
                            "description": "One or more email addresses (comma separated) for non-critical events."
                          }
                        },
                        "type": "object"
                      },
                      "groupInterval": {
                        "default": "5m",
                        "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)",
                        "type": "string"
                      },
                      "msteams": {
                        "additionalProperties": false,
                        "properties": {
                          "highPrio": {
                            "description": "The low prio web hook.",
                            "type": "string"
                          },
                          "lowPrio": {
                            "description": "The high prio web hook.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "receivers": {
                        "description": "Notification receivers.",
                        "items": {
                          "enum": ["slack", "msteams", "email"],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "repeatInterval": {
                        "default": "3h",
                        "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).",
                        "type": "string"
                      },
                      "slack": {
                        "additionalProperties": false,
                        "properties": {
                          "channel": {
                            "default": "mon-otomi",
                            "description": "The Slack channel for non-critical notifications.",
                            "type": "string"
                          },
                          "channelCrit": {
                            "default": "mon-otomi",
                            "description": "The Slack channel for critical notifications.",
                            "type": "string"
                          },
                          "url": {
                            "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                            "type": "string",
                            "description": "A Slack webhook URL."
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "azure": {
                    "description": "Azure specific configuration.",
                    "properties": {
                      "appgw": {
                        "properties": {
                          "isManaged": {
                            "default": true,
                            "description": "Is this appgw installed as AKS addon?",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "diskType": {
                        "description": "An Azure disk type (SKU Type).",
                        "enum": [
                          "Standard_LRS",
                          "Standard_GRS",
                          "Standard_RAGRS",
                          "Standard_ZRS",
                          "Premium_LRS",
                          "Premium_ZRS",
                          "Standard_GZRS",
                          "Standard_RAGZRS"
                        ],
                        "type": "string"
                      },
                      "keyVault": {
                        "description": "Azure Key Vault access credentials. Will use azure.tenantId if tenantId is not provided.",
                        "properties": {
                          "tenantId": {
                            "description": "An Azure tenant ID.",
                            "type": "string"
                          },
                          "clientId": {
                            "description": "An Azure client ID.",
                            "type": "string"
                          },
                          "clientSecret": {
                            "description": "An Azure client secret.",
                            "type": "string"
                          }
                        },
                        "required": ["clientId", "clientSecret"],
                        "type": "object"
                      },
                      "monitor": {
                        "properties": {
                          "appInsightsApiKey": {
                            "description": "An Azure AppInsights client secret (defaults to clientSecret).",
                            "type": "string"
                          },
                          "appInsightsAppId": {
                            "description": "An Azure AppInsights client id (defaults to clientId).",
                            "type": "string"
                          },
                          "clientId": {
                            "description": "An Azure client id.",
                            "type": "string"
                          },
                          "clientSecret": {
                            "description": "An Azure client secret.",
                            "type": "string"
                          },
                          "logAnalyticsClientId": {
                            "description": "An Azure client secret (defaults to clientSecret).",
                            "type": "string"
                          },
                          "logAnalyticsClientSecret": {
                            "description": "An Azure client secret (defaults to clientSecret).",
                            "type": "string"
                          },
                          "logAnalyticsTenantId": {
                            "description": "An Azure tenant id (defaults to tenantId).",
                            "type": "string"
                          },
                          "logAnalyticsWorkspace": {
                            "description": "An Azure monitor log analytics workspace.",
                            "type": "string"
                          }
                        }
                      },
                      "resourceGroup": {
                        "description": "An Azure resource group.",
                        "type": "string"
                      },
                      "subscriptionId": {
                        "description": "An Azure subscription ID.",
                        "type": "string"
                      },
                      "tenantId": {
                        "description": "An Azure tenant ID.",
                        "type": "string"
                      }
                    },
                    "required": ["diskType", "resourceGroup", "subscriptionId", "tenantId"],
                    "type": "object"
                  },
                  "customer": {
                    "additionalProperties": false,
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "google": {
                    "description": "Google specific configuration.",
                    "properties": {
                      "cloudDnsKey": {
                        "description": "A service account key for managing a DNS zone.",
                        "type": "string"
                      },
                      "kmsAccount": {
                        "description": "A service account key for managing a KMS vault.",
                        "type": "string"
                      },
                      "projectId": {
                        "description": "A Google Cloud project ID for accessing DNS zone.",
                        "type": "string"
                      }
                    },
                    "required": ["cloudDnsKey", "projectId"],
                    "type": "object"
                  },
                  "home": {
                    "type": "object",
                    "properties": {
                      "drone": {
                        "default": "slack",
                        "enum": ["slack", "msteams"],
                        "type": "string"
                      },
                      "email": {
                        "additionalProperties": false,
                        "properties": {
                          "critical": {
                            "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                            "type": "string",
                            "description": "One or more email addresses (comma separated) for critical events."
                          },
                          "nonCritical": {
                            "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                            "type": "string",
                            "description": "One or more email addresses (comma separated) for non-critical events."
                          }
                        },
                        "type": "object"
                      },
                      "groupInterval": {
                        "default": "5m",
                        "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)",
                        "type": "string"
                      },
                      "msteams": {
                        "additionalProperties": false,
                        "properties": {
                          "highPrio": {
                            "description": "The low prio web hook.",
                            "type": "string"
                          },
                          "lowPrio": {
                            "description": "The high prio web hook.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "receivers": {
                        "description": "Notification receivers.",
                        "items": {
                          "enum": ["slack", "msteams", "email"],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "repeatInterval": {
                        "default": "3h",
                        "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).",
                        "type": "string"
                      },
                      "slack": {
                        "additionalProperties": false,
                        "properties": {
                          "channel": {
                            "default": "mon-otomi",
                            "description": "The Slack channel for non-critical notifications.",
                            "type": "string"
                          },
                          "channelCrit": {
                            "default": "mon-otomi",
                            "description": "The Slack channel for critical notifications.",
                            "type": "string"
                          },
                          "url": {
                            "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                            "type": "string",
                            "description": "A Slack webhook URL."
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "kms": {
                    "description": "Use Cloud KMS to encrypt and decrypt the master key",
                    "oneOf": [
                      {
                        "title": "gcpckms",
                        "properties": {
                          "gcpckms": {
                            "properties": {
                              "project": {
                                "type": "string"
                              },
                              "region": {
                                "type": "string"
                              },
                              "key_ring": {
                                "type": "string"
                              },
                              "kmsAccount": {
                                "type": "string"
                              }
                            },
                            "required": ["project", "region", "key_ring", "kmsAccount"],
                            "type": "object"
                          }
                        },
                        "required": ["gcpckms"],
                        "type": "object"
                      },
                      {
                        "title": "awskms",
                        "properties": {
                          "awskms": {
                            "properties": {
                              "region": {
                                "type": "string"
                              },
                              "access_key": {
                                "type": "string"
                              },
                              "secret_key": {
                                "type": "string"
                              },
                              "endpoint": {
                                "type": "string"
                              }
                            },
                            "required": ["region", "access_key", "secret_key", "endpoint"],
                            "type": "object"
                          }
                        },
                        "required": ["awskms"],
                        "type": "object"
                      },
                      {
                        "title": "azurekeyvault",
                        "properties": {
                          "azurekeyvault": {
                            "properties": {
                              "vault_name": {
                                "type": "string"
                              },
                              "tenant_id": {
                                "type": "string"
                              },
                              "client_id": {
                                "type": "string"
                              },
                              "client_secret": {
                                "type": "string"
                              }
                            },
                            "required": ["vault_name", "tenant_id", "client_id", "client_secret"],
                            "type": "object"
                          }
                        },
                        "required": ["azurekeyvault"],
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "oidc": {
                    "additionalProperties": false,
                    "description": "Holds many parts used in different locations. Please see keycloak, istio and oauth-proxy all consuming parts.",
                    "properties": {
                      "adminGroupID": {
                        "type": "string"
                      },
                      "apiUrl": {
                        "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                        "type": "string"
                      },
                      "authUrl": {
                        "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                        "type": "string"
                      },
                      "clientID": {
                        "type": "string"
                      },
                      "clientSecret": {
                        "type": "string"
                      },
                      "issuer": {
                        "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                        "type": "string"
                      },
                      "scope": {
                        "type": "string"
                      },
                      "teamAdminGroupID": {
                        "type": "string"
                      },
                      "tenantID": {
                        "type": "string"
                      },
                      "tokenUrl": {
                        "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                        "type": "string"
                      },
                      "usernameClaimMapper": {
                        "type": "string",
                        "description": "Claim name used by Keycloak to identify incoming users from identity provider"
                      },
                      "subClaimMapper": {
                        "type": "string",
                        "description": "Select OIDC claim to be used as a unique user identifier",
                        "default": "sub"
                      }
                    },
                    "type": "object"
                  },
                  "otomi": {
                    "additionalProperties": false,
                    "properties": {
                      "hasCloudLB": {
                        "default": false,
                        "description": "Set this to true when an external LB exists or needs to be started (AWS ALB, Azure AppGW, Google Apigee). This will then be configured through ingress controllers. Expects existing LBs to terminate https. Currently this is only working correctly for Azure, and not for AWS and Google. AWS is close to completion.",
                        "type": "boolean"
                      },
                      "isHomeMonitored": {
                        "default": false,
                        "description": "Whether this cluster is home monitored (like when under a Premium SLA). Sends criticals home.",
                        "type": "boolean"
                      },
                      "isManaged": {
                        "default": true,
                        "description": "Whether masters are managed and not under control. Set this to false when onprem.",
                        "type": "boolean"
                      },
                      "isMultitenant": {
                        "default": true,
                        "description": "Whether to separate team metrics and logs. Disabling this lets everybody be admin and see everything.",
                        "type": "boolean"
                      },
                      "mode": {
                        "default": "ee",
                        "description": "The otomi-core edition. Either community edition (ce) or enterprise edition (ee).",
                        "enum": ["ce", "ee"],
                        "type": "string"
                      },
                      "pullSecret": {
                        "default": "",
                        "description": "The pullsecret to deploy the Otomi API and Console. Requires an Otomi license.",
                        "type": "string"
                      },
                      "teamPrefix": {
                        "default": "team-",
                        "description": "The prefix to use in URLs for team domains.",
                        "pattern": "^[a-z]+[-]{1}$",
                        "type": "string"
                      },
                      "addons": {
                        "description": "Manage addon configuration",
                        "additionalProperties": false,
                        "properties": {
                          "conftest": {
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "default": true,
                                "description": "Use this flag to enable conftest for policy validation"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "smtp": {
                    "additionalProperties": false,
                    "properties": {
                      "auth_identity": {
                        "type": "string"
                      },
                      "auth_password": {
                        "type": "string"
                      },
                      "auth_secret": {
                        "type": "string"
                      },
                      "auth_username": {
                        "type": "string"
                      },
                      "from": {
                        "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                        "type": "string",
                        "description": "The \"from\" address. Defaults to alerts@$clusterDomain."
                      },
                      "hello": {
                        "type": "string"
                      },
                      "smarthost": {
                        "description": "The smtp host:port combination.",
                        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):()([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])$",
                        "type": "string"
                      }
                    },
                    "required": ["smarthost"],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Settings object that contains updated values",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully edited `settings.yaml`"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "x-acl": [],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string",
                            "enum": ["body", "path"]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Resource does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "x-acl": [],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "/v1"
    }
  ],
  "components": {
    "parameters": {
      "teamParams": {
        "name": "teamId",
        "in": "path",
        "description": "ID of team to return",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "serviceParams": {
        "name": "serviceId",
        "in": "path",
        "description": "ID of the service",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "secretParams": {
        "name": "secretId",
        "in": "path",
        "description": "ID of the secret",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "groupAuthn": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      },
      "groupAuthz": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "Cloud": {
        "type": "object",
        "x-acl": {
          "admin": ["read-any"],
          "team": ["read-any"]
        },
        "properties": {
          "name": {
            "type": "string",
            "description": "A cluster name",
            "readOnly": true
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "object",
              "x-acl": {
                "admin": ["read-any"],
                "team": ["read-any"]
              },
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "default": true
                },
                "name": {
                  "type": "string",
                  "description": "A cluster name",
                  "readOnly": true
                },
                "cloud": {
                  "type": "string",
                  "description": "A cloud provider name",
                  "readOnly": true
                },
                "domain": {
                  "type": "string",
                  "description": "A default cluster DNS zone",
                  "readOnly": true
                },
                "dnsZones": {
                  "type": "array",
                  "description": "A list of DNS zones that are available to the cluster",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true,
                  "uniqueItems": true
                },
                "hasKnative": {
                  "description": "A flag that indicates capability for deploying serverless services by using Knative",
                  "type": "boolean",
                  "readOnly": true
                },
                "k8sVersion": {
                  "description": "A version of kubernetes that is installed on the cluster",
                  "type": "string",
                  "readOnly": true
                },
                "otomiVersion": {
                  "description": "A version of kubernetes that is installed on the cluster",
                  "type": "string",
                  "readOnly": true
                },
                "region": {
                  "description": "A physical location of the cluster",
                  "type": "string",
                  "readOnly": true
                },
                "clusterId": {
                  "description": "An unique cluster identifier",
                  "type": "string",
                  "readOnly": true
                }
              }
            }
          },
          "domain": {
            "type": "string",
            "description": "A fqdn for the cloud"
          }
        }
      },
      "Cluster": {
        "type": "object",
        "x-acl": {
          "admin": ["read-any"],
          "team": ["read-any"]
        },
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "name": {
            "type": "string",
            "description": "A cluster name",
            "readOnly": true
          },
          "cloud": {
            "type": "string",
            "description": "A cloud provider name",
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "description": "A default cluster DNS zone",
            "readOnly": true
          },
          "dnsZones": {
            "type": "array",
            "description": "A list of DNS zones that are available to the cluster",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "uniqueItems": true
          },
          "hasKnative": {
            "description": "A flag that indicates capability for deploying serverless services by using Knative",
            "type": "boolean",
            "readOnly": true
          },
          "k8sVersion": {
            "description": "A version of kubernetes that is installed on the cluster",
            "type": "string",
            "readOnly": true
          },
          "otomiVersion": {
            "description": "A version of kubernetes that is installed on the cluster",
            "type": "string",
            "readOnly": true
          },
          "region": {
            "description": "A physical location of the cluster",
            "type": "string",
            "readOnly": true
          },
          "clusterId": {
            "description": "An unique cluster identifier",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Clusters": {
        "items": {
          "type": "object",
          "x-acl": {
            "admin": ["read-any"],
            "team": ["read-any"]
          },
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "name": {
              "type": "string",
              "description": "A cluster name",
              "readOnly": true
            },
            "cloud": {
              "type": "string",
              "description": "A cloud provider name",
              "readOnly": true
            },
            "domain": {
              "type": "string",
              "description": "A default cluster DNS zone",
              "readOnly": true
            },
            "dnsZones": {
              "type": "array",
              "description": "A list of DNS zones that are available to the cluster",
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "uniqueItems": true
            },
            "hasKnative": {
              "description": "A flag that indicates capability for deploying serverless services by using Knative",
              "type": "boolean",
              "readOnly": true
            },
            "k8sVersion": {
              "description": "A version of kubernetes that is installed on the cluster",
              "type": "string",
              "readOnly": true
            },
            "otomiVersion": {
              "description": "A version of kubernetes that is installed on the cluster",
              "type": "string",
              "readOnly": true
            },
            "region": {
              "description": "A physical location of the cluster",
              "type": "string",
              "readOnly": true
            },
            "clusterId": {
              "description": "An unique cluster identifier",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "type": "array",
        "x-acl": {
          "admin": ["read-any"],
          "team": ["read-any"]
        }
      },
      "Deployment": {
        "x-externalDocsPath": "docs/deployment",
        "x-acl": {
          "admin": ["read-any"],
          "team": ["read-any"]
        },
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "Deployment status",
            "enum": ["in-progress", "completed", "failed"]
          }
        },
        "type": "object"
      },
      "Kubecfg": {
        "x-acl": {
          "admin": ["read-any"],
          "team": ["read"]
        },
        "properties": {},
        "type": "object"
      },
      "OpenApiValidationError": {
        "x-acl": [],
        "properties": {
          "status": {
            "type": "integer"
          },
          "errors": {
            "type": "array",
            "items": {
              "x-acl": [],
              "properties": {
                "path": {
                  "type": "string"
                },
                "errorCode": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "location": {
                  "type": "string",
                  "enum": ["body", "path"]
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "OtomiStackError": {
        "x-acl": [],
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Secret": {
        "x-acl": {
          "admin": ["read-any", "create-any", "update-any", "delete-any"],
          "team": ["read", "create", "update", "delete"]
        },
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "title": "Name",
            "description": "A secret name",
            "example": "secret01"
          },
          "clusterId": {
            "x-acl": {
              "admin": ["read", "create"],
              "team": ["read", "create"]
            },
            "title": "Cluster ID",
            "type": "string",
            "description": "A kubernetes cluster for the secret"
          }
        },
        "required": ["name", "clusterId"],
        "oneOf": [
          {
            "title": "Generic",
            "properties": {
              "type": {
                "default": "generic",
                "enum": ["generic"]
              },
              "entries": {
                "type": "array",
                "items": {
                  "description": "A property name at vaultPath",
                  "minItems": 1,
                  "pattern": "^[a-zA-Z0-9_]*$",
                  "type": "string",
                  "uniqueItems": true
                }
              }
            },
            "required": ["type", "entries"],
            "type": "object"
          },
          {
            "title": "Docker registry",
            "properties": {
              "type": {
                "default": "docker-registry",
                "enum": ["docker-registry"],
                "type": "string"
              },
              "dockerconfig": {
                "type": "string",
                "enum": [".dockerconfig.json"],
                "default": ".dockerconfig.json",
                "readOnly": true
              }
            },
            "required": ["type"],
            "type": "object"
          },
          {
            "title": "TLS",
            "properties": {
              "type": {
                "default": "tls",
                "enum": ["tls"],
                "type": "string"
              },
              "crt": {
                "type": "string",
                "default": "tls.crt",
                "description": "A Vault property name that contains PEM public key certificate"
              },
              "key": {
                "type": "string",
                "default": "tls.key",
                "description": "A Vault property name that contains PEM private key certificate"
              },
              "ca": {
                "type": "string",
                "title": "CA",
                "description": "A Vault property name that contains CA certificate content"
              }
            },
            "required": ["type", "crt", "key"],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "Secrets": {
        "items": {
          "x-acl": {
            "admin": ["read-any", "create-any", "update-any", "delete-any"],
            "team": ["read", "create", "update", "delete"]
          },
          "properties": {
            "id": {
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
              "title": "Name",
              "description": "A secret name",
              "example": "secret01"
            },
            "clusterId": {
              "x-acl": {
                "admin": ["read", "create"],
                "team": ["read", "create"]
              },
              "title": "Cluster ID",
              "type": "string",
              "description": "A kubernetes cluster for the secret"
            }
          },
          "required": ["name", "clusterId"],
          "oneOf": [
            {
              "title": "Generic",
              "properties": {
                "type": {
                  "default": "generic",
                  "enum": ["generic"]
                },
                "entries": {
                  "type": "array",
                  "items": {
                    "description": "A property name at vaultPath",
                    "minItems": 1,
                    "pattern": "^[a-zA-Z0-9_]*$",
                    "type": "string",
                    "uniqueItems": true
                  }
                }
              },
              "required": ["type", "entries"],
              "type": "object"
            },
            {
              "title": "Docker registry",
              "properties": {
                "type": {
                  "default": "docker-registry",
                  "enum": ["docker-registry"],
                  "type": "string"
                },
                "dockerconfig": {
                  "type": "string",
                  "enum": [".dockerconfig.json"],
                  "default": ".dockerconfig.json",
                  "readOnly": true
                }
              },
              "required": ["type"],
              "type": "object"
            },
            {
              "title": "TLS",
              "properties": {
                "type": {
                  "default": "tls",
                  "enum": ["tls"],
                  "type": "string"
                },
                "crt": {
                  "type": "string",
                  "default": "tls.crt",
                  "description": "A Vault property name that contains PEM public key certificate"
                },
                "key": {
                  "type": "string",
                  "default": "tls.key",
                  "description": "A Vault property name that contains PEM private key certificate"
                },
                "ca": {
                  "type": "string",
                  "title": "CA",
                  "description": "A Vault property name that contains CA certificate content"
                }
              },
              "required": ["type", "crt", "key"],
              "type": "object"
            }
          ],
          "type": "object"
        },
        "type": "array",
        "x-acl": {
          "admin": ["read-any"],
          "team": ["read-any"]
        }
      },
      "Service": {
        "x-externalDocsPath": "docs/configuring-services",
        "x-acl": {
          "admin": ["delete-any", "read-any", "create-any", "update-any"],
          "team": ["delete", "read", "create", "update"]
        },
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "description": "A service name",
            "example": "some-service",
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
            "type": "string"
          },
          "port": {
            "description": "A service port",
            "type": "integer",
            "default": 80,
            "minimum": 1,
            "maximum": 65535
          },
          "clusterId": {
            "title": "Cluster ID",
            "type": "string",
            "description": "A kubernetes cluster for the service",
            "x-acl": {
              "admin": ["read", "create"],
              "team": ["read", "create"]
            }
          },
          "ksvc": {
            "title": "Type",
            "type": "object",
            "oneOf": [
              {
                "title": "Knative service",
                "nullable": true,
                "properties": {
                  "serviceType": {
                    "type": "string",
                    "enum": ["ksvc"],
                    "default": "ksvc"
                  },
                  "scaleToZero": {
                    "title": "Scale to zero",
                    "description": "Scales to zero after 60 seconds and needs approximately 8 seconds to start back up.",
                    "type": "boolean",
                    "default": false
                  },
                  "image": {
                    "title": "Container image",
                    "nullable": true,
                    "properties": {
                      "repository": {
                        "description": "A container image repository.",
                        "pattern": "^[a-z0-9]+(?:[/._-]{1,2}[a-z0-9]+)*$",
                        "type": "string"
                      },
                      "tag": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "required": ["repository", "tag"]
                  },
                  "secrets": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "entries": {
                          "title": "Entries",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "uniqueItems": true
                        }
                      },
                      "required": ["name"],
                      "type": "object"
                    }
                  },
                  "env": {
                    "title": "Environment variables",
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "properties": {
                        "name": {
                          "additionalProperties": false,
                          "nullable": true,
                          "x-patternProperties": {
                            "[a-zA-Z_]{1,}[a-zA-Z0-9_]*": {
                              "maxLength": 131072,
                              "type": "string"
                            }
                          },
                          "title": "Environment variables"
                        },
                        "value": {
                          "type": "string",
                          "maxLength": 131072
                        }
                      },
                      "required": ["name", "value"],
                      "type": "object"
                    }
                  },
                  "resources": {
                    "title": "Pod resources",
                    "nullable": true,
                    "properties": {
                      "requests": {
                        "properties": {
                          "cpu": {
                            "description": "The guaranteed amount of CPU",
                            "default": "50m",
                            "example": ["1", "200m"],
                            "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                            "type": "string"
                          },
                          "memory": {
                            "description": "The guaranteed amount of RAM",
                            "default": "64Mi",
                            "example": ["1Mi", "0.5M"],
                            "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                            "type": "string"
                          }
                        },
                        "required": ["cpu", "memory"],
                        "type": "object"
                      },
                      "limits": {
                        "properties": {
                          "cpu": {
                            "description": "The maximum amount of CPU",
                            "default": "100m",
                            "example": ["1", "200m"],
                            "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                            "type": "string"
                          },
                          "memory": {
                            "description": "The maximum amount of RAM",
                            "default": "128Mi",
                            "example": ["1Mi", "0.5M"],
                            "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                            "type": "string"
                          }
                        },
                        "required": ["cpu", "memory"],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "annotations": {
                    "title": "Pod annotations",
                    "description": "A set of annotations.",
                    "additionalProperties": false,
                    "x-patternProperties": {
                      "^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){1,253}\\/)?([a-z0-9A-Z]+[a-z0-9A-Z-_.]+[a-z0-9A-Z]){1,63}$": {
                        "pattern": "^((.){1,253}\\/)?(.){1,63}$",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "autoCD": {
                    "title": "Continuous delivery",
                    "description": "Deploys new images based on a tagging strategy",
                    "oneOf": [
                      {
                        "title": "Off",
                        "nullable": true,
                        "additionalProperties": false
                      },
                      {
                        "title": "Semver versioning",
                        "nullable": true,
                        "properties": {
                          "tagMatcher": {
                            "type": "string",
                            "enum": ["semver"],
                            "default": "semver"
                          },
                          "semver": {
                            "title": "Semver version pattern",
                            "type": "string",
                            "example": "PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\",  \">=1.2.3-0\"",
                            "description": "Use this filter if your image tags follow semantic versioning rules (MAJOR.MINOR.PATCH). E.g.: PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\""
                          }
                        },
                        "required": ["semver"],
                        "type": "object"
                      },
                      {
                        "title": "Glob pattern matching",
                        "properties": {
                          "tagMatcher": {
                            "type": "string",
                            "enum": ["glob"],
                            "default": "glob"
                          },
                          "glob": {
                            "title": "Glob string pattern",
                            "type": "string",
                            "description": "Use this filter if you want to make glob-style patterns. E.g.: \"main-v1.3.*\"",
                            "example": "main-v1.3.*"
                          }
                        },
                        "required": ["glob"],
                        "type": "object",
                        "additionalProperties": false
                      }
                    ]
                  }
                }
              },
              {
                "title": "Existing Knative service",
                "properties": {
                  "serviceType": {
                    "type": "string",
                    "enum": ["ksvcPredeployed"],
                    "default": "ksvcPredeployed"
                  }
                },
                "required": ["serviceType"],
                "type": "object"
              },
              {
                "title": "Existing Kubernetes service",
                "properties": {
                  "serviceType": {
                    "type": "string",
                    "enum": ["svcPredeployed"],
                    "default": "svcPredeployed"
                  }
                },
                "required": ["serviceType"],
                "type": "object"
              }
            ]
          },
          "ingress": {
            "title": "Exposure",
            "x-acl": {
              "team": ["read"]
            },
            "oneOf": [
              {
                "title": "Private",
                "nullable": true,
                "additionalProperties": false
              },
              {
                "title": "Public URL",
                "properties": {
                  "useDefaultSubdomain": {
                    "title": "Use team domain (preferred)",
                    "type": "boolean",
                    "default": true,
                    "description": "Use the team domain so that the URL reveals the owner."
                  },
                  "subdomain": {
                    "title": "Host",
                    "type": "string",
                    "nullable": true,
                    "description": "A host that is used to set DNS 'A' records",
                    "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                  },
                  "domain": {
                    "title": "DNS Zone",
                    "description": "A managed DNS zone",
                    "type": "string"
                  },
                  "path": {
                    "title": "URL path",
                    "description": "The path in the URL that the service should be mapped to (e.g. for microservices on one app/domain.)",
                    "type": "string"
                  },
                  "forwardPath": {
                    "title": "Forward path",
                    "description": "Forward the URL path into the service (don't rewrite to /)",
                    "type": "boolean"
                  },
                  "hasSingleSignOn": {
                    "title": "Authenticate with Single Sign On",
                    "type": "boolean",
                    "default": false
                  },
                  "hasCert": {
                    "title": "Already has a certificate",
                    "type": "boolean",
                    "default": false,
                    "description": "If true a certificate should exist already"
                  },
                  "certArn": {
                    "type": "string",
                    "title": "Certificate ARN",
                    "example": "arn:aws:acm:eu-central-1:xxx:certificate/xxx"
                  },
                  "certSelect": {
                    "type": "boolean",
                    "title": "Select existing secret name",
                    "default": true
                  },
                  "certName": {
                    "type": "string",
                    "title": "Secret name",
                    "example": "www-example-com"
                  }
                },
                "required": ["domain", "subdomain"],
                "type": "object"
              }
            ]
          },
          "teamId": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["name", "clusterId", "teamId"],
        "type": "object"
      },
      "Services": {
        "items": {
          "x-externalDocsPath": "docs/configuring-services",
          "x-acl": {
            "admin": ["delete-any", "read-any", "create-any", "update-any"],
            "team": ["delete", "read", "create", "update"]
          },
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "id": {
              "type": "string",
              "readOnly": true
            },
            "name": {
              "title": "Name",
              "description": "A service name",
              "example": "some-service",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "type": "string"
            },
            "port": {
              "description": "A service port",
              "type": "integer",
              "default": 80,
              "minimum": 1,
              "maximum": 65535
            },
            "clusterId": {
              "title": "Cluster ID",
              "type": "string",
              "description": "A kubernetes cluster for the service",
              "x-acl": {
                "admin": ["read", "create"],
                "team": ["read", "create"]
              }
            },
            "ksvc": {
              "title": "Type",
              "type": "object",
              "oneOf": [
                {
                  "title": "Knative service",
                  "nullable": true,
                  "properties": {
                    "serviceType": {
                      "type": "string",
                      "enum": ["ksvc"],
                      "default": "ksvc"
                    },
                    "scaleToZero": {
                      "title": "Scale to zero",
                      "description": "Scales to zero after 60 seconds and needs approximately 8 seconds to start back up.",
                      "type": "boolean",
                      "default": false
                    },
                    "image": {
                      "title": "Container image",
                      "nullable": true,
                      "properties": {
                        "repository": {
                          "description": "A container image repository.",
                          "pattern": "^[a-z0-9]+(?:[/._-]{1,2}[a-z0-9]+)*$",
                          "type": "string"
                        },
                        "tag": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": ["repository", "tag"]
                    },
                    "secrets": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "entries": {
                            "title": "Entries",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "uniqueItems": true
                          }
                        },
                        "required": ["name"],
                        "type": "object"
                      }
                    },
                    "env": {
                      "title": "Environment variables",
                      "type": "array",
                      "nullable": true,
                      "items": {
                        "properties": {
                          "name": {
                            "additionalProperties": false,
                            "nullable": true,
                            "x-patternProperties": {
                              "[a-zA-Z_]{1,}[a-zA-Z0-9_]*": {
                                "maxLength": 131072,
                                "type": "string"
                              }
                            },
                            "title": "Environment variables"
                          },
                          "value": {
                            "type": "string",
                            "maxLength": 131072
                          }
                        },
                        "required": ["name", "value"],
                        "type": "object"
                      }
                    },
                    "resources": {
                      "title": "Pod resources",
                      "nullable": true,
                      "properties": {
                        "requests": {
                          "properties": {
                            "cpu": {
                              "description": "The guaranteed amount of CPU",
                              "default": "50m",
                              "example": ["1", "200m"],
                              "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                              "type": "string"
                            },
                            "memory": {
                              "description": "The guaranteed amount of RAM",
                              "default": "64Mi",
                              "example": ["1Mi", "0.5M"],
                              "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                              "type": "string"
                            }
                          },
                          "required": ["cpu", "memory"],
                          "type": "object"
                        },
                        "limits": {
                          "properties": {
                            "cpu": {
                              "description": "The maximum amount of CPU",
                              "default": "100m",
                              "example": ["1", "200m"],
                              "pattern": "^([0-9]+\\.[0-9]{1,2})|([0-9]{2,3}m)?$",
                              "type": "string"
                            },
                            "memory": {
                              "description": "The maximum amount of RAM",
                              "default": "128Mi",
                              "example": ["1Mi", "0.5M"],
                              "pattern": "^([0-9]+\\.)?[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$",
                              "type": "string"
                            }
                          },
                          "required": ["cpu", "memory"],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "annotations": {
                      "title": "Pod annotations",
                      "description": "A set of annotations.",
                      "additionalProperties": false,
                      "x-patternProperties": {
                        "^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){1,253}\\/)?([a-z0-9A-Z]+[a-z0-9A-Z-_.]+[a-z0-9A-Z]){1,63}$": {
                          "pattern": "^((.){1,253}\\/)?(.){1,63}$",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "autoCD": {
                      "title": "Continuous delivery",
                      "description": "Deploys new images based on a tagging strategy",
                      "oneOf": [
                        {
                          "title": "Off",
                          "nullable": true,
                          "additionalProperties": false
                        },
                        {
                          "title": "Semver versioning",
                          "nullable": true,
                          "properties": {
                            "tagMatcher": {
                              "type": "string",
                              "enum": ["semver"],
                              "default": "semver"
                            },
                            "semver": {
                              "title": "Semver version pattern",
                              "type": "string",
                              "example": "PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\",  \">=1.2.3-0\"",
                              "description": "Use this filter if your image tags follow semantic versioning rules (MAJOR.MINOR.PATCH). E.g.: PATCH only: \"~1.1\", MINOR and PATCH only \"~1\", ALL \"*\""
                            }
                          },
                          "required": ["semver"],
                          "type": "object"
                        },
                        {
                          "title": "Glob pattern matching",
                          "properties": {
                            "tagMatcher": {
                              "type": "string",
                              "enum": ["glob"],
                              "default": "glob"
                            },
                            "glob": {
                              "title": "Glob string pattern",
                              "type": "string",
                              "description": "Use this filter if you want to make glob-style patterns. E.g.: \"main-v1.3.*\"",
                              "example": "main-v1.3.*"
                            }
                          },
                          "required": ["glob"],
                          "type": "object",
                          "additionalProperties": false
                        }
                      ]
                    }
                  }
                },
                {
                  "title": "Existing Knative service",
                  "properties": {
                    "serviceType": {
                      "type": "string",
                      "enum": ["ksvcPredeployed"],
                      "default": "ksvcPredeployed"
                    }
                  },
                  "required": ["serviceType"],
                  "type": "object"
                },
                {
                  "title": "Existing Kubernetes service",
                  "properties": {
                    "serviceType": {
                      "type": "string",
                      "enum": ["svcPredeployed"],
                      "default": "svcPredeployed"
                    }
                  },
                  "required": ["serviceType"],
                  "type": "object"
                }
              ]
            },
            "ingress": {
              "title": "Exposure",
              "x-acl": {
                "team": ["read"]
              },
              "oneOf": [
                {
                  "title": "Private",
                  "nullable": true,
                  "additionalProperties": false
                },
                {
                  "title": "Public URL",
                  "properties": {
                    "useDefaultSubdomain": {
                      "title": "Use team domain (preferred)",
                      "type": "boolean",
                      "default": true,
                      "description": "Use the team domain so that the URL reveals the owner."
                    },
                    "subdomain": {
                      "title": "Host",
                      "type": "string",
                      "nullable": true,
                      "description": "A host that is used to set DNS 'A' records",
                      "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
                    },
                    "domain": {
                      "title": "DNS Zone",
                      "description": "A managed DNS zone",
                      "type": "string"
                    },
                    "path": {
                      "title": "URL path",
                      "description": "The path in the URL that the service should be mapped to (e.g. for microservices on one app/domain.)",
                      "type": "string"
                    },
                    "forwardPath": {
                      "title": "Forward path",
                      "description": "Forward the URL path into the service (don't rewrite to /)",
                      "type": "boolean"
                    },
                    "hasSingleSignOn": {
                      "title": "Authenticate with Single Sign On",
                      "type": "boolean",
                      "default": false
                    },
                    "hasCert": {
                      "title": "Already has a certificate",
                      "type": "boolean",
                      "default": false,
                      "description": "If true a certificate should exist already"
                    },
                    "certArn": {
                      "type": "string",
                      "title": "Certificate ARN",
                      "example": "arn:aws:acm:eu-central-1:xxx:certificate/xxx"
                    },
                    "certSelect": {
                      "type": "boolean",
                      "title": "Select existing secret name",
                      "default": true
                    },
                    "certName": {
                      "type": "string",
                      "title": "Secret name",
                      "example": "www-example-com"
                    }
                  },
                  "required": ["domain", "subdomain"],
                  "type": "object"
                }
              ]
            },
            "teamId": {
              "type": "string",
              "readOnly": true
            }
          },
          "required": ["name", "clusterId", "teamId"],
          "type": "object"
        },
        "type": "array",
        "x-acl": {
          "admin": ["read-any"],
          "team": ["read-any"]
        }
      },
      "Session": {
        "x-acl": {
          "admin": ["read"],
          "team": ["read"]
        },
        "properties": {
          "clusters": {
            "readOnly": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "core": {
            "readOnly": true
          },
          "currentClusterId": {
            "type": "string",
            "readOnly": true
          },
          "isDirty": {
            "type": "boolean",
            "readOnly": true
          },
          "namespaces": {
            "readOnly": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "teams": {
            "readOnly": true,
            "type": "array",
            "items": {
              "x-externalDocsPath": "docs/configuring-teams",
              "x-acl": {
                "admin": ["delete-any", "read-any", "create-any", "update-any"],
                "team": ["read-any", "update"]
              },
              "properties": {
                "id": {
                  "description": "A lowercase name that starts with a letter and may contain dashes.",
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                  "type": "string",
                  "title": "ID",
                  "x-acl": {
                    "admin": ["read"],
                    "team": ["read"]
                  }
                },
                "name": {
                  "description": "A team name",
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                  "type": "string",
                  "title": "Name",
                  "example": "otomi",
                  "x-acl": {
                    "admin": ["create", "read"],
                    "team": ["read"]
                  }
                },
                "clusters": {
                  "title": "Clusters",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "uniqueItems": true,
                  "minItems": 1,
                  "x-acl": {
                    "team": ["read"]
                  }
                },
                "oidc": {
                  "title": "OIDC",
                  "properties": {
                    "groupMapping": {
                      "title": "Group mapping",
                      "type": "string",
                      "description": "An OIDC group name/id granting access to this team"
                    }
                  },
                  "type": "object"
                },
                "password": {
                  "type": "string",
                  "writeOnly": true
                },
                "alerts": {
                  "title": "Alerting endpoints",
                  "properties": {
                    "receivers": {
                      "title": "Receivers",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": ["slack", "msteams", "email"]
                      },
                      "uniqueItems": true
                    },
                    "slack": {
                      "title": "Slack",
                      "properties": {
                        "url": {
                          "title": "Web hook",
                          "type": "string",
                          "description": "Slack web hook. If none is given the global one is used."
                        },
                        "channel": {
                          "title": "Channel for non-criticals",
                          "type": "string",
                          "description": "Slack channel for non-criticals. If none is given the global one is used, which defaults to 'mon-otomi'."
                        },
                        "channelCrit": {
                          "title": "Channel for criticals",
                          "type": "string",
                          "description": "Slack channel for critical alerts. If none is given the global one is used, which defaults to 'mon-otomi-crit'."
                        }
                      },
                      "type": "object"
                    },
                    "msteams": {
                      "title": "Microsoft Teams",
                      "properties": {
                        "lowPrio": {
                          "title": "Low prio webhook",
                          "type": "string",
                          "description": "The low prio web hook"
                        },
                        "highPrio": {
                          "title": "High prio webhook",
                          "type": "string",
                          "description": "The high prio web hook"
                        }
                      },
                      "type": "object"
                    },
                    "email": {
                      "title": "Email",
                      "properties": {
                        "nonCritical": {
                          "title": "Non criticals",
                          "type": "string",
                          "description": "One or more email addresses (comma separated) for non-critical events."
                        },
                        "critical": {
                          "title": "Criticals",
                          "type": "string",
                          "description": "Email addresses (comma separated) for critical events."
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "required": ["name", "clusters", "password"],
              "type": "object"
            }
          },
          "user": {
            "readOnly": true,
            "x-acl": {
              "admin": [],
              "team": []
            },
            "properties": {
              "name": {
                "type": "string",
                "description": "A user name",
                "readOnly": true
              },
              "email": {
                "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                "type": "string"
              },
              "isAdmin": {
                "type": "boolean",
                "default": false,
                "description": "If the user is admin",
                "readOnly": true
              },
              "teams": {
                "type": "array",
                "default": [],
                "description": "A list of teams the user belongs to",
                "items": {
                  "type": "string"
                },
                "readOnly": true,
                "uniqueItems": true
              },
              "roles": {
                "type": "array",
                "default": [],
                "description": "A list of roles that the user has",
                "items": {
                  "type": "string"
                },
                "readOnly": true,
                "uniqueItems": true
              }
            },
            "required": ["isAdmin", "name", "email", "teams", "roles"],
            "type": "object"
          }
        },
        "type": "object"
      },
      "Settings": {
        "x-acl": {
          "admin": ["read-any", "update-any"],
          "team": []
        },
        "additionalProperties": false,
        "properties": {
          "alerts": {
            "type": "object",
            "properties": {
              "drone": {
                "default": "slack",
                "enum": ["slack", "msteams"],
                "type": "string"
              },
              "email": {
                "additionalProperties": false,
                "properties": {
                  "critical": {
                    "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                    "type": "string",
                    "description": "One or more email addresses (comma separated) for critical events."
                  },
                  "nonCritical": {
                    "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                    "type": "string",
                    "description": "One or more email addresses (comma separated) for non-critical events."
                  }
                },
                "type": "object"
              },
              "groupInterval": {
                "default": "5m",
                "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)",
                "type": "string"
              },
              "msteams": {
                "additionalProperties": false,
                "properties": {
                  "highPrio": {
                    "description": "The low prio web hook.",
                    "type": "string"
                  },
                  "lowPrio": {
                    "description": "The high prio web hook.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "receivers": {
                "description": "Notification receivers.",
                "items": {
                  "enum": ["slack", "msteams", "email"],
                  "type": "string"
                },
                "type": "array"
              },
              "repeatInterval": {
                "default": "3h",
                "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).",
                "type": "string"
              },
              "slack": {
                "additionalProperties": false,
                "properties": {
                  "channel": {
                    "default": "mon-otomi",
                    "description": "The Slack channel for non-critical notifications.",
                    "type": "string"
                  },
                  "channelCrit": {
                    "default": "mon-otomi",
                    "description": "The Slack channel for critical notifications.",
                    "type": "string"
                  },
                  "url": {
                    "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                    "type": "string",
                    "description": "A Slack webhook URL."
                  }
                },
                "type": "object"
              }
            }
          },
          "azure": {
            "description": "Azure specific configuration.",
            "properties": {
              "appgw": {
                "properties": {
                  "isManaged": {
                    "default": true,
                    "description": "Is this appgw installed as AKS addon?",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "diskType": {
                "description": "An Azure disk type (SKU Type).",
                "enum": [
                  "Standard_LRS",
                  "Standard_GRS",
                  "Standard_RAGRS",
                  "Standard_ZRS",
                  "Premium_LRS",
                  "Premium_ZRS",
                  "Standard_GZRS",
                  "Standard_RAGZRS"
                ],
                "type": "string"
              },
              "keyVault": {
                "description": "Azure Key Vault access credentials. Will use azure.tenantId if tenantId is not provided.",
                "properties": {
                  "tenantId": {
                    "description": "An Azure tenant ID.",
                    "type": "string"
                  },
                  "clientId": {
                    "description": "An Azure client ID.",
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "An Azure client secret.",
                    "type": "string"
                  }
                },
                "required": ["clientId", "clientSecret"],
                "type": "object"
              },
              "monitor": {
                "properties": {
                  "appInsightsApiKey": {
                    "description": "An Azure AppInsights client secret (defaults to clientSecret).",
                    "type": "string"
                  },
                  "appInsightsAppId": {
                    "description": "An Azure AppInsights client id (defaults to clientId).",
                    "type": "string"
                  },
                  "clientId": {
                    "description": "An Azure client id.",
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "An Azure client secret.",
                    "type": "string"
                  },
                  "logAnalyticsClientId": {
                    "description": "An Azure client secret (defaults to clientSecret).",
                    "type": "string"
                  },
                  "logAnalyticsClientSecret": {
                    "description": "An Azure client secret (defaults to clientSecret).",
                    "type": "string"
                  },
                  "logAnalyticsTenantId": {
                    "description": "An Azure tenant id (defaults to tenantId).",
                    "type": "string"
                  },
                  "logAnalyticsWorkspace": {
                    "description": "An Azure monitor log analytics workspace.",
                    "type": "string"
                  }
                }
              },
              "resourceGroup": {
                "description": "An Azure resource group.",
                "type": "string"
              },
              "subscriptionId": {
                "description": "An Azure subscription ID.",
                "type": "string"
              },
              "tenantId": {
                "description": "An Azure tenant ID.",
                "type": "string"
              }
            },
            "required": ["diskType", "resourceGroup", "subscriptionId", "tenantId"],
            "type": "object"
          },
          "customer": {
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "google": {
            "description": "Google specific configuration.",
            "properties": {
              "cloudDnsKey": {
                "description": "A service account key for managing a DNS zone.",
                "type": "string"
              },
              "kmsAccount": {
                "description": "A service account key for managing a KMS vault.",
                "type": "string"
              },
              "projectId": {
                "description": "A Google Cloud project ID for accessing DNS zone.",
                "type": "string"
              }
            },
            "required": ["cloudDnsKey", "projectId"],
            "type": "object"
          },
          "home": {
            "type": "object",
            "properties": {
              "drone": {
                "default": "slack",
                "enum": ["slack", "msteams"],
                "type": "string"
              },
              "email": {
                "additionalProperties": false,
                "properties": {
                  "critical": {
                    "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                    "type": "string",
                    "description": "One or more email addresses (comma separated) for critical events."
                  },
                  "nonCritical": {
                    "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                    "type": "string",
                    "description": "One or more email addresses (comma separated) for non-critical events."
                  }
                },
                "type": "object"
              },
              "groupInterval": {
                "default": "5m",
                "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)",
                "type": "string"
              },
              "msteams": {
                "additionalProperties": false,
                "properties": {
                  "highPrio": {
                    "description": "The low prio web hook.",
                    "type": "string"
                  },
                  "lowPrio": {
                    "description": "The high prio web hook.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "receivers": {
                "description": "Notification receivers.",
                "items": {
                  "enum": ["slack", "msteams", "email"],
                  "type": "string"
                },
                "type": "array"
              },
              "repeatInterval": {
                "default": "3h",
                "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).",
                "type": "string"
              },
              "slack": {
                "additionalProperties": false,
                "properties": {
                  "channel": {
                    "default": "mon-otomi",
                    "description": "The Slack channel for non-critical notifications.",
                    "type": "string"
                  },
                  "channelCrit": {
                    "default": "mon-otomi",
                    "description": "The Slack channel for critical notifications.",
                    "type": "string"
                  },
                  "url": {
                    "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                    "type": "string",
                    "description": "A Slack webhook URL."
                  }
                },
                "type": "object"
              }
            }
          },
          "kms": {
            "description": "Use Cloud KMS to encrypt and decrypt the master key",
            "oneOf": [
              {
                "title": "gcpckms",
                "properties": {
                  "gcpckms": {
                    "properties": {
                      "project": {
                        "type": "string"
                      },
                      "region": {
                        "type": "string"
                      },
                      "key_ring": {
                        "type": "string"
                      },
                      "kmsAccount": {
                        "type": "string"
                      }
                    },
                    "required": ["project", "region", "key_ring", "kmsAccount"],
                    "type": "object"
                  }
                },
                "required": ["gcpckms"],
                "type": "object"
              },
              {
                "title": "awskms",
                "properties": {
                  "awskms": {
                    "properties": {
                      "region": {
                        "type": "string"
                      },
                      "access_key": {
                        "type": "string"
                      },
                      "secret_key": {
                        "type": "string"
                      },
                      "endpoint": {
                        "type": "string"
                      }
                    },
                    "required": ["region", "access_key", "secret_key", "endpoint"],
                    "type": "object"
                  }
                },
                "required": ["awskms"],
                "type": "object"
              },
              {
                "title": "azurekeyvault",
                "properties": {
                  "azurekeyvault": {
                    "properties": {
                      "vault_name": {
                        "type": "string"
                      },
                      "tenant_id": {
                        "type": "string"
                      },
                      "client_id": {
                        "type": "string"
                      },
                      "client_secret": {
                        "type": "string"
                      }
                    },
                    "required": ["vault_name", "tenant_id", "client_id", "client_secret"],
                    "type": "object"
                  }
                },
                "required": ["azurekeyvault"],
                "type": "object"
              }
            ],
            "type": "object"
          },
          "oidc": {
            "additionalProperties": false,
            "description": "Holds many parts used in different locations. Please see keycloak, istio and oauth-proxy all consuming parts.",
            "properties": {
              "adminGroupID": {
                "type": "string"
              },
              "apiUrl": {
                "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                "type": "string"
              },
              "authUrl": {
                "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                "type": "string"
              },
              "clientID": {
                "type": "string"
              },
              "clientSecret": {
                "type": "string"
              },
              "issuer": {
                "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                "type": "string"
              },
              "scope": {
                "type": "string"
              },
              "teamAdminGroupID": {
                "type": "string"
              },
              "tenantID": {
                "type": "string"
              },
              "tokenUrl": {
                "pattern": "^(https:\\/\\/)([\\w\\-])+\\.{1}([a-zA-Z]{2,63})([\\/\\w-]*)*\\/?\\??([^#\\n\\r]*)?#?([^\\n\\r]*)$",
                "type": "string"
              },
              "usernameClaimMapper": {
                "type": "string",
                "description": "Claim name used by Keycloak to identify incoming users from identity provider"
              },
              "subClaimMapper": {
                "type": "string",
                "description": "Select OIDC claim to be used as a unique user identifier",
                "default": "sub"
              }
            },
            "type": "object"
          },
          "otomi": {
            "additionalProperties": false,
            "properties": {
              "hasCloudLB": {
                "default": false,
                "description": "Set this to true when an external LB exists or needs to be started (AWS ALB, Azure AppGW, Google Apigee). This will then be configured through ingress controllers. Expects existing LBs to terminate https. Currently this is only working correctly for Azure, and not for AWS and Google. AWS is close to completion.",
                "type": "boolean"
              },
              "isHomeMonitored": {
                "default": false,
                "description": "Whether this cluster is home monitored (like when under a Premium SLA). Sends criticals home.",
                "type": "boolean"
              },
              "isManaged": {
                "default": true,
                "description": "Whether masters are managed and not under control. Set this to false when onprem.",
                "type": "boolean"
              },
              "isMultitenant": {
                "default": true,
                "description": "Whether to separate team metrics and logs. Disabling this lets everybody be admin and see everything.",
                "type": "boolean"
              },
              "mode": {
                "default": "ee",
                "description": "The otomi-core edition. Either community edition (ce) or enterprise edition (ee).",
                "enum": ["ce", "ee"],
                "type": "string"
              },
              "pullSecret": {
                "default": "",
                "description": "The pullsecret to deploy the Otomi API and Console. Requires an Otomi license.",
                "type": "string"
              },
              "teamPrefix": {
                "default": "team-",
                "description": "The prefix to use in URLs for team domains.",
                "pattern": "^[a-z]+[-]{1}$",
                "type": "string"
              },
              "addons": {
                "description": "Manage addon configuration",
                "additionalProperties": false,
                "properties": {
                  "conftest": {
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "default": true,
                        "description": "Use this flag to enable conftest for policy validation"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "smtp": {
            "additionalProperties": false,
            "properties": {
              "auth_identity": {
                "type": "string"
              },
              "auth_password": {
                "type": "string"
              },
              "auth_secret": {
                "type": "string"
              },
              "auth_username": {
                "type": "string"
              },
              "from": {
                "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
                "type": "string",
                "description": "The \"from\" address. Defaults to alerts@$clusterDomain."
              },
              "hello": {
                "type": "string"
              },
              "smarthost": {
                "description": "The smtp host:port combination.",
                "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):()([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])$",
                "type": "string"
              }
            },
            "required": ["smarthost"],
            "type": "object"
          }
        },
        "type": "object"
      },
      "Team": {
        "x-externalDocsPath": "docs/configuring-teams",
        "x-acl": {
          "admin": ["delete-any", "read-any", "create-any", "update-any"],
          "team": ["read-any", "update"]
        },
        "properties": {
          "id": {
            "description": "A lowercase name that starts with a letter and may contain dashes.",
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
            "type": "string",
            "title": "ID",
            "x-acl": {
              "admin": ["read"],
              "team": ["read"]
            }
          },
          "name": {
            "description": "A team name",
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
            "type": "string",
            "title": "Name",
            "example": "otomi",
            "x-acl": {
              "admin": ["create", "read"],
              "team": ["read"]
            }
          },
          "clusters": {
            "title": "Clusters",
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "minItems": 1,
            "x-acl": {
              "team": ["read"]
            }
          },
          "oidc": {
            "title": "OIDC",
            "properties": {
              "groupMapping": {
                "title": "Group mapping",
                "type": "string",
                "description": "An OIDC group name/id granting access to this team"
              }
            },
            "type": "object"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "alerts": {
            "title": "Alerting endpoints",
            "properties": {
              "receivers": {
                "title": "Receivers",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": ["slack", "msteams", "email"]
                },
                "uniqueItems": true
              },
              "slack": {
                "title": "Slack",
                "properties": {
                  "url": {
                    "title": "Web hook",
                    "type": "string",
                    "description": "Slack web hook. If none is given the global one is used."
                  },
                  "channel": {
                    "title": "Channel for non-criticals",
                    "type": "string",
                    "description": "Slack channel for non-criticals. If none is given the global one is used, which defaults to 'mon-otomi'."
                  },
                  "channelCrit": {
                    "title": "Channel for criticals",
                    "type": "string",
                    "description": "Slack channel for critical alerts. If none is given the global one is used, which defaults to 'mon-otomi-crit'."
                  }
                },
                "type": "object"
              },
              "msteams": {
                "title": "Microsoft Teams",
                "properties": {
                  "lowPrio": {
                    "title": "Low prio webhook",
                    "type": "string",
                    "description": "The low prio web hook"
                  },
                  "highPrio": {
                    "title": "High prio webhook",
                    "type": "string",
                    "description": "The high prio web hook"
                  }
                },
                "type": "object"
              },
              "email": {
                "title": "Email",
                "properties": {
                  "nonCritical": {
                    "title": "Non criticals",
                    "type": "string",
                    "description": "One or more email addresses (comma separated) for non-critical events."
                  },
                  "critical": {
                    "title": "Criticals",
                    "type": "string",
                    "description": "Email addresses (comma separated) for critical events."
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "required": ["name", "clusters", "password"],
        "type": "object"
      },
      "Teams": {
        "items": {
          "x-externalDocsPath": "docs/configuring-teams",
          "x-acl": {
            "admin": ["delete-any", "read-any", "create-any", "update-any"],
            "team": ["read-any", "update"]
          },
          "properties": {
            "id": {
              "description": "A lowercase name that starts with a letter and may contain dashes.",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "type": "string",
              "title": "ID",
              "x-acl": {
                "admin": ["read"],
                "team": ["read"]
              }
            },
            "name": {
              "description": "A team name",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "type": "string",
              "title": "Name",
              "example": "otomi",
              "x-acl": {
                "admin": ["create", "read"],
                "team": ["read"]
              }
            },
            "clusters": {
              "title": "Clusters",
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "minItems": 1,
              "x-acl": {
                "team": ["read"]
              }
            },
            "oidc": {
              "title": "OIDC",
              "properties": {
                "groupMapping": {
                  "title": "Group mapping",
                  "type": "string",
                  "description": "An OIDC group name/id granting access to this team"
                }
              },
              "type": "object"
            },
            "password": {
              "type": "string",
              "writeOnly": true
            },
            "alerts": {
              "title": "Alerting endpoints",
              "properties": {
                "receivers": {
                  "title": "Receivers",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["slack", "msteams", "email"]
                  },
                  "uniqueItems": true
                },
                "slack": {
                  "title": "Slack",
                  "properties": {
                    "url": {
                      "title": "Web hook",
                      "type": "string",
                      "description": "Slack web hook. If none is given the global one is used."
                    },
                    "channel": {
                      "title": "Channel for non-criticals",
                      "type": "string",
                      "description": "Slack channel for non-criticals. If none is given the global one is used, which defaults to 'mon-otomi'."
                    },
                    "channelCrit": {
                      "title": "Channel for criticals",
                      "type": "string",
                      "description": "Slack channel for critical alerts. If none is given the global one is used, which defaults to 'mon-otomi-crit'."
                    }
                  },
                  "type": "object"
                },
                "msteams": {
                  "title": "Microsoft Teams",
                  "properties": {
                    "lowPrio": {
                      "title": "Low prio webhook",
                      "type": "string",
                      "description": "The low prio web hook"
                    },
                    "highPrio": {
                      "title": "High prio webhook",
                      "type": "string",
                      "description": "The high prio web hook"
                    }
                  },
                  "type": "object"
                },
                "email": {
                  "title": "Email",
                  "properties": {
                    "nonCritical": {
                      "title": "Non criticals",
                      "type": "string",
                      "description": "One or more email addresses (comma separated) for non-critical events."
                    },
                    "critical": {
                      "title": "Criticals",
                      "type": "string",
                      "description": "Email addresses (comma separated) for critical events."
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "required": ["name", "clusters", "password"],
          "type": "object"
        },
        "type": "array",
        "x-acl": {
          "admin": ["read-any"],
          "team": ["read-any"]
        }
      },
      "User": {
        "readOnly": true,
        "x-acl": {
          "admin": [],
          "team": []
        },
        "properties": {
          "name": {
            "type": "string",
            "description": "A user name",
            "readOnly": true
          },
          "email": {
            "pattern": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean",
            "default": false,
            "description": "If the user is admin",
            "readOnly": true
          },
          "teams": {
            "type": "array",
            "default": [],
            "description": "A list of teams the user belongs to",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "uniqueItems": true
          },
          "roles": {
            "type": "array",
            "default": [],
            "description": "A list of roles that the user has",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "uniqueItems": true
          }
        },
        "required": ["isAdmin", "name", "email", "teams", "roles"],
        "type": "object"
      }
    }
  }
}
