openapi: '3.0.0'
security:
  - groupAuthz: []
info:
  title: The otomi-stack API
  description: Holds the entire schema needed by console to autogenerate forms
  version: 0.0.0-PLACEHOLDER

externalDocs:
  description: 'This is the base url of the external documentation'
  url: https://otomi.io/ #Using this URL a final docUrl can be made using this+info.version+ the component's x-externalDocsPath

x-responses:
  BadRequest: &BadRequest
    description: Bad Request
    content:
      'application/json':
        schema:
          $ref: '#/components/schemas/OpenApiValidationError'

  OtomiStackError: &OtomiStackError
    description: Resource already exists
    content:
      'application/json':
        schema:
          $ref: '#/components/schemas/OtomiStackError'

  NotFound: &NotFound
    description: Resource does not exist
    content:
      'application/json':
        schema:
          $ref: '#/components/schemas/OtomiStackError'

x-post-responses: &DefaultPostResponses
  '400':
    <<: *BadRequest
  '409':
    <<: *OtomiStackError

x-get-responses: &DefaultGetResponses
  '400':
    <<: *BadRequest
  '404':
    <<: *NotFound

# -------------------------------------------- Paths
paths:
  /secrets:
    get:
      operationId: getAllSecrets
      description: Get all secrets
      x-aclSchema: Secret
      responses:
        '200':
          description: Successfully obtained all secrets
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        '400':
          <<: *BadRequest

  /jobs:
    get:
      operationId: getAllJobs
      description: Get all jobs running on the cluster
      x-aclSchema: Job
      responses:
        '200':
          description: Successfully obtained all jobs
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '400':
          <<: *BadRequest

  /services:
    get:
      operationId: getAllServices
      description: Get all services running on the cluster
      x-aclSchema: Service
      responses:
        '200':
          description: Successfully obtained all services
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          <<: *BadRequest

  /teams:
    get:
      operationId: getTeams
      description: Get teams collection
      x-aclSchema: Team
      responses:
        '200':
          description: Successfully obtained teams collection
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      operationId: createTeam
      description: Create a team
      x-aclSchema: Team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Team object that needs to be added to the collection
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully obtained teams collection
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Team'
  '/teams/{teamId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeam
      description: Get a specific team
      x-aclSchema: Team
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained team
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Team'
    put:
      operationId: editTeam
      description: Edit a team
      x-aclSchema: Team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Team object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited team
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      operationId: deleteTeam
      description: Delete team
      x-aclSchema: Team
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a team

  '/teams/{teamId}/jobs':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamJobs
      description: Get jobs from a given team
      x-aclSchema: Job
      responses:
        '200':
          description: Successfully obtained jobs
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '400':
          <<: *BadRequest
    post:
      operationId: createJob
      description: Create a job
      x-aclSchema: Job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
        description: Job object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored job configuration
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Job'

  '/teams/{teamId}/services':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamServices
      description: Get services from a given team
      x-aclSchema: Service
      responses:
        '200':
          description: Successfully obtained services
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          <<: *BadRequest

    post:
      operationId: createService
      description: Create a service
      x-aclSchema: Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Service object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored service configuration
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Service'

  '/teams/{teamId}/jobs/{jobId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/jobParams'
    get:
      operationId: getJob
      description: Get a job from a given team
      x-aclSchema: Job
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained job configuration
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Job'
    put:
      operationId: editJob
      description: Edit a job from a given team
      x-aclSchema: Job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
        description: Job object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited job
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Job'
    delete:
      operationId: deleteJob
      description: Delete a job from a given team
      x-aclSchema: Job
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a job

  '/teams/{teamId}/services/{serviceId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/serviceParams'
    get:
      operationId: getService
      description: Get a service from a given team
      x-aclSchema: Service
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained service configuration
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Service'
    put:
      operationId: editService
      description: Edit a service from a given team
      x-aclSchema: Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Service object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited service
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Service'
    delete:
      operationId: deleteService
      description: Delete a service from a given team
      x-aclSchema: Service
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a service

  '/teams/{teamId}/secrets':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getSecrets
      description: Get secrets from a given team
      x-aclSchema: Secret
      responses:
        '200':
          description: Successfully obtained secrets
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        '400':
          description: Bad Request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OpenApiValidationError'
    post:
      operationId: createSecret
      description: Create a team secret
      x-aclSchema: Secret
      parameters:
        - name: teamId
          in: path
          description: ID of team
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        description: Service object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored secret configuration
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Secret'

  '/teams/{teamId}/secrets/{secretId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/secretParams'
    get:
      operationId: getSecret
      description: Get a secret from a given team
      x-aclSchema: Secret
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained secret configuration
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Secret'
    put:
      operationId: editSecret
      description: Edit a secret from a given team
      x-aclSchema: Secret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        description: Secret object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited a team secret
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Secret'
    delete:
      operationId: deleteSecret
      description: Delete a secret from a given team
      x-aclSchema: Secret
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a team secret

  /deploy:
    get:
      x-aclSchema: Deployment
      operationId: deploy
      description: Trigger a deployment (only for admin)
      responses:
        '202':
          description: Deployment has been triggered
          content:
            'application/json':
              schema:
                type: object
        '409':
          <<: *OtomiStackError

  '/kubecfg/{teamId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: downloadKubecfg
      description: Download a kubecfg for a team
      x-aclSchema: Kubecfg
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Succesfully finished the download
          content:
            'application/yaml':
              schema:
                type: object

  /session:
    get:
      operationId: getSession
      description: Get the session for the current user
      responses:
        '200':
          description: Get the session for the logged in user
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Session'
        default:
          description: The requested session.
  /apiDocs:
    get:
      operationId: 'apiDocs'
      security: []
      description: Get OpenAPIDoc document
      responses:
        '200':
          description: The requested apiDoc.
          content:
            'application/json':
              schema:
                type: object
        default:
          description: The requested apiDoc.

  /settings/{setting}:
    parameters:
      - in: path
        name: setting
        required: true
        schema:
          type: string
          enum:
            - alerts
            - azure
            - customer
            - dns
            - home
            - kms
            - oidc
            - otomi
            - smtp
        example: oidc
    get:
      operationId: getSetting
      description: Get a setting from the `settings.yaml` or `secret.settings.yaml` file.
      x-aclSchema: Settings
      responses:
        '200':
          description: The request is successful.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Settings'

    # TODO: https://github.com/redkubes/otomi-api/issues/155
    put:
      operationId: editSetting
      description: Edit a setting from the `settings.yaml` or `secret.settings.yaml` file.
      x-aclSchema: Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
        description: Given a setting parameter, put new setting for a given rootprop.
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited this setting.

# -------------------------------------------- Servers

servers:
  - url: '/v1'

# -------------------------------------------- Components
components:
  parameters:
    jobParams:
      name: jobId
      in: path
      description: ID of the job
      required: true
      schema:
        type: string
    teamParams:
      name: teamId
      in: path
      description: ID of team to return
      required: true
      schema:
        type: string
    serviceParams:
      name: serviceId
      in: path
      description: ID of the service
      required: true
      schema:
        type: string
    secretParams:
      name: secretId
      in: path
      description: ID of the secret
      required: true
      schema:
        type: string

  securitySchemes:
    groupAuthn:
      type: apiKey
      name: Authorization
      in: header
    groupAuthz:
      type: apiKey
      name: Authorization
      in: header

  # -------------------------------------------- Schemas
  # Indicate root schemas with UpperCamelCase (e.g. Cluster)
  # Indicate definition references with camelCase (e.g. azureCreds)
  #
  # Please stick to: alphabetical sorting, all Uppercase first and then lowercase.
  # --------------------------------------------
  schemas:
    Cluster:
      $ref: cluster.yaml#/Cluster
    Deployment:
      $ref: deployment.yaml#/Deployment
    Ingress:
      $ref: service.yaml#/Ingress
    IngressCluster:
      $ref: service.yaml#/IngressCluster
    IngressPrivate:
      $ref: service.yaml#/IngressPrivate
    IngressPublic:
      $ref: service.yaml#/IngressPublic
    Job:
      $ref: job.yaml#/Job
    Kubecfg:
      $ref: kubecfg.yaml#/Kubecfg
    OpenApiValidationError:
      $ref: error.yaml#/OpenApiValidationError
    OtomiStackError:
      $ref: error.yaml#/OtomiStackError
    Secret:
      $ref: secret.yaml#/Secret
    SecretDockerRegistry:
      $ref: secret.yaml#/SecretDockerRegistry
    SecretGeneric:
      $ref: secret.yaml#/SecretGeneric
    SecretTLS:
      $ref: secret.yaml#/SecretTLS
    Service:
      $ref: service.yaml#/Service
    Session:
      $ref: session.yaml#/Session
    Settings:
      $ref: settings.yaml#/Settings
    Team:
      $ref: team.yaml#/Team
    TeamAuthz:
      $ref: user.yaml#/TeamAuthz
    TeamSelfService:
      $ref: team.yaml#/TeamSelfService
    User:
      $ref: user.yaml#/User
    alerts:
      $ref: definitions.yaml#/alerts
    awsCreds:
      $ref: definitions.yaml#/awsCreds
    azureCreds:
      $ref: definitions.yaml#/azureCreds
    azureMonitor:
      $ref: definitions.yaml#/azureMonitor
    containerSpec:
      $ref: definitions.yaml#/containerSpec
    cpu:
      $ref: definitions.yaml#/cpuQuantity
    domain:
      $ref: definitions.yaml#/domain
    email:
      $ref: definitions.yaml#/email
    env:
      $ref: definitions.yaml#/env
    googleCreds:
      $ref: definitions.yaml#/googleCreds
    idName:
      $ref: definitions.yaml#/idName
    image:
      $ref: definitions.yaml#/image
    jobSpec:
      $ref: definitions.yaml#/jobSpec
    kms:
      $ref: definitions.yaml#/kms
    ksvcNew:
      $ref: definitions.yaml#/ksvcNew
    ksvcPredeployed:
      $ref: definitions.yaml#/ksvcPredeployed
    memory:
      $ref: definitions.yaml#/memoryQuantity
    offChoice:
      $ref: definitions.yaml#/offChoice
    path:
      $ref: definitions.yaml#/path
    podSpec:
      $ref: definitions.yaml#/podSpec
    policies:
      $ref: policies.yaml#/policies
    resource:
      $ref: definitions.yaml#/resource
    resources:
      $ref: definitions.yaml#/resources
    script:
      $ref: definitions.yaml#/script
    secrets:
      $ref: definitions.yaml#/secrets
    securityContext:
      $ref: definitions.yaml#/securityContext
    svcPredeployed:
      $ref: definitions.yaml#/svcPredeployed
    url:
      $ref: definitions.yaml#/url
    vaultCreds:
      $ref: definitions.yaml#/vaultCreds
