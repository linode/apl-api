openapi: '3.0.0'
security:
  - groupAuthz: []
info:
  title: The otomi API
  description: Holds the entire schema needed by console to autogenerate forms
  version: 0.4.95-rc.21

externalDocs:
  description: 'This is the base url of the external documentation'
  url: https://otomi.io/ #Using this URL a final docUrl can be made using this+info.version+ the component's x-externalDocsPath

x-responses:
  BadRequest: &BadRequest
    description: Bad Request
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/OpenApiValidationError'

  OtomiStackError: &OtomiStackError
    description: Resource already exists
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/OtomiStackError'

  NotFound: &NotFound
    description: Resource does not exist
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/OtomiStackError'

x-post-responses: &DefaultPostResponses
  '400':
    <<: *BadRequest
  '409':
    <<: *OtomiStackError

x-get-responses: &DefaultGetResponses
  '400':
    <<: *BadRequest
  '404':
    <<: *NotFound

# -------------------------------------------- Paths
paths:
  /license:
    delete:
      operationId: deleteLicense
      description: Delete user license
      x-aclSchema: License
      responses:
        '200':
          description: Successfully removed user license
  /activate:
    put:
      operationId: activateLicense
      description: Upload and activate license
      x-aclSchema: LicenseJwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseJwt'
        description: License JWT
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Uploaded license
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
  /metrics:
    get:
      operationId: getMetrics
      description: Get otomi metrics
      x-aclSchema: Metrics
      responses:
        '200':
          description: Successfully obtained otomi metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'

  /otomi/values:
    get:
      operationId: getValues
      description: Get otomi values
      x-aclSchema: OtomiCliValues
      parameters:
        - name: filesOnly
          in: query
          description: IDs of settings to return
          schema:
            type: string
            enum: ['true', 'false']
        - name: excludeSecrets
          in: query
          schema:
            type: string
            enum: ['true', 'false']
        - name: withWorkloadValues
          in: query
          schema:
            type: string
            enum: ['true', 'false']
      responses:
        '200':
          description: Successfully obtained otomi values
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/OtomiCliValues'

  /secrets:
    get:
      operationId: getAllSecrets
      description: Get all secrets
      x-aclSchema: Secret
      responses:
        '200':
          description: Successfully obtained all secrets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        '400':
          <<: *BadRequest

  /services:
    get:
      operationId: getAllServices
      description: Get all services running on the cluster
      x-aclSchema: Service
      responses:
        '200':
          description: Successfully obtained all services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          <<: *BadRequest

  /teams:
    get:
      operationId: getTeams
      description: Get teams collection
      x-aclSchema: Team
      responses:
        '200':
          description: Successfully obtained teams collection
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      operationId: createTeam
      description: Create a team
      x-aclSchema: Team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Team object that needs to be added to the collection
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully obtained teams collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
  '/teams/{teamId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeam
      description: Get a specific team
      x-aclSchema: Team
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    put:
      operationId: editTeam
      description: Edit a team
      x-aclSchema: Team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Team object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      operationId: deleteTeam
      description: Delete team
      x-aclSchema: Team
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a team

  '/teams/{teamId}/services':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamServices
      description: Get services from a given team
      x-aclSchema: Service
      responses:
        '200':
          description: Successfully obtained services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          <<: *BadRequest

    post:
      operationId: createService
      description: Create a service
      x-aclSchema: Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Service object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored service configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

  '/teams/{teamId}/kubernetes/services':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamK8sServices
      description: Get services from a given team
      x-aclSchema: Service
      responses:
        '200':
          description: Successfully obtained kuberntes services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/K8sService'
        '400':
          <<: *BadRequest

  '/teams/{teamId}/services/{serviceId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/serviceParams'
    get:
      operationId: getService
      description: Get a service from a given team
      x-aclSchema: Service
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained service configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    put:
      operationId: editService
      description: Edit a service from a given team
      x-aclSchema: Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Service object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    delete:
      operationId: deleteService
      description: Delete a service from a given team
      x-aclSchema: Service
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a service

  /migrateSecrets:
    post:
      operationId: migrateSecrets
      description: Migrate HashiCorp Vault secrets to sealed secrets
      x-aclSchema: MigrateSecrets
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully migrated secrets to sealed secrets
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    enum: [success, info]
                  message:
                    type: string
                  total:
                    type: integer
                  migrated:
                    type: integer
                  remaining:
                    type: integer
        '400':
          <<: *BadRequest

  /sealedsecrets:
    get:
      operationId: getAllSealedSecrets
      description: Get all sealed secrets
      x-aclSchema: SealedSecret
      responses:
        '200':
          description: Successfully obtained all sealed secrets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SealedSecret'
        '400':
          <<: *BadRequest

  /sealedsecretskeys:
    get:
      operationId: downloadSealedSecretKeys
      description: Download sealed secret keys
      x-aclSchema: SealedSecretsKeys
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully downloaded sealed secret keys
          content:
            application/key:
              schema:
                $ref: '#/components/schemas/SealedSecretsKeys'
        '400':
          <<: *BadRequest

  '/teams/{teamId}/k8sSecrets':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getSecretsFromK8s
      description: Get secrets from k8s
      x-aclSchema: K8sSecret
      responses:
        '200':
          description: Successfully obtained secrets from k8s
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/K8sSecret'
        '400':
          <<: *BadRequest

  '/teams/{teamId}/sealedsecrets':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getSealedSecrets
      description: Get sealed secrets from a given team
      x-aclSchema: SealedSecret
      responses:
        '200':
          description: Successfully obtained sealed secrets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SealedSecret'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenApiValidationError'
    post:
      operationId: createSealedSecret
      description: Create a team sealed secret
      x-aclSchema: SealedSecret
      parameters:
        - name: teamId
          in: path
          description: ID of team
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SealedSecret'
        description: SealedSecret object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored sealed secret configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SealedSecret'

  '/teams/{teamId}/sealedsecrets/{secretId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/secretParams'
    get:
      operationId: getSealedSecret
      description: Get a sealed secret from a given team
      x-aclSchema: SealedSecret
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained sealed secret configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SealedSecret'
    put:
      operationId: editSealedSecret
      description: Edit a sealed secret from a given team
      x-aclSchema: SealedSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SealedSecret'
        description: SealedSecret object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited a team sealed secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SealedSecret'
    delete:
      operationId: deleteSealedSecret
      description: Delete a sealed secret from a given team
      x-aclSchema: SealedSecret
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a team sealed secret
  '/teams/{teamId}/secrets':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getSecrets
      description: Get secrets from a given team
      x-aclSchema: Secret
      responses:
        '200':
          description: Successfully obtained secrets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenApiValidationError'
    post:
      operationId: createSecret
      description: Create a team secret
      x-aclSchema: Secret
      parameters:
        - name: teamId
          in: path
          description: ID of team
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        description: Service object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored secret configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'

  '/teams/{teamId}/secrets/{secretId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/secretParams'
    get:
      operationId: getSecret
      description: Get a secret from a given team
      x-aclSchema: Secret
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained secret configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
    put:
      operationId: editSecret
      description: Edit a secret from a given team
      x-aclSchema: Secret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        description: Secret object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited a team secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
    delete:
      operationId: deleteSecret
      description: Delete a secret from a given team
      x-aclSchema: Secret
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a team secret

  '/netpols':
    get:
      operationId: getAllNetpols
      x-aclSchema: Netpol
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained all network policy configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Netpol'

  '/teams/{teamId}/netpols':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamNetpols
      x-aclSchema: Build
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained team network policy configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Netpol'
    post:
      operationId: createNetpol
      description: Create a team network policy
      x-aclSchema: Netpol
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Netpol'
        description: Network policy object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored network policy configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Netpol'

  '/teams/{teamId}/netpols/{netpolId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/netpolParams'
    get:
      operationId: getNetpol
      description: Get a network policy from a given team
      x-aclSchema: Netpol
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained network policy configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Netpol'
    put:
      operationId: editNetpol
      description: Edit a network policy from a given team
      x-aclSchema: Netpol
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Netpol'
        description: Netwok policy object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited a team network policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Netpol'
    delete:
      operationId: deleteNetpol
      description: Delete a network policy from a given team
      x-aclSchema: Netpol
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a team network policy

  '/backups':
    get:
      operationId: getAllBackups
      x-aclSchema: Backup
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained all backups configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Backup'

  '/teams/{teamId}/backups':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamBackups
      x-aclSchema: Backup
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained team backups configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Backup'
    post:
      operationId: createBackup
      description: Create a team backup
      x-aclSchema: Backup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Backup'
        description: Backup object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored backup configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backup'

  '/teams/{teamId}/backups/{backupId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/backupParams'
    delete:
      operationId: deleteBackup
      description: Delete a backup from a given team
      x-aclSchema: Backup
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a backup
    get:
      operationId: getBackup
      description: Get a backup from a given team
      x-aclSchema: Backup
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained backup configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backup'
    put:
      operationId: editBackup
      description: Edit a backup from a given team
      x-aclSchema: Backup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Backup'
        description: Backup object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited a team backup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backup'

  '/teams/{teamId}/dashboard':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getDashboard
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained dashboard inventory data
          content:
            application/json:
              schema:
                type: object

  '/builds':
    get:
      operationId: getAllBuilds
      x-aclSchema: Build
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained all builds configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Build'

  '/teams/{teamId}/builds':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamBuilds
      x-aclSchema: Build
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained team builds configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Build'
    post:
      operationId: createBuild
      description: Create a team build
      x-aclSchema: Build
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Build'
        description: Build object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored build configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'

  '/teams/{teamId}/builds/{buildId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/buildParams'
    delete:
      operationId: deleteBuild
      description: Delete a build from a given team
      x-aclSchema: Build
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a build
    get:
      operationId: getBuild
      description: Get a build from a given team
      x-aclSchema: Build
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained build configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
    put:
      operationId: editBuild
      description: Edit a build from a given team
      x-aclSchema: Build
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Build'
        description: Build object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited a team build
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'

  '/k8sVersion':
    get:
      operationId: getK8sVersion
      description: Get cluster k8s version
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully obtained k8s version
          content:
            application/json:
              schema:
                type: string

  '/cloudtty':
    post:
      operationId: connectCloudtty
      description: Create a cloudtty url
      x-aclSchema: Cloudtty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cloudtty'
        description: Cloudtty object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored cloudtty configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cloudtty'
    delete:
      operationId: deleteCloudtty
      description: Delete cloudtty url
      x-aclSchema: Cloudtty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cloudtty'
        description: Cloudtty object
        required: true
      responses:
        '200':
          description: Successfully removed cloudtty url

  '/projects':
    get:
      operationId: getAllProjects
      x-aclSchema: Project
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained all projects configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'

  '/teams/{teamId}/projects':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamProjects
      x-aclSchema: Project
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained team projects configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      operationId: createProject
      description: Create a team project
      x-aclSchema: Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        description: Project object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored project configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  '/teams/{teamId}/projects/{projectId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/projectParams'
    delete:
      operationId: deleteProject
      description: Delete a project from a given team
      x-aclSchema: Project
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a project
    get:
      operationId: getProject
      description: Get a project from a given team
      x-aclSchema: Project
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained project configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    put:
      operationId: editProject
      description: Edit a project from a given team
      x-aclSchema: Project
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Project object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited a team project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  '/workloads':
    get:
      operationId: getAllWorkloads
      x-aclSchema: Workload
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained all workloads configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workload'

  '/workloadCatalog':
    post:
      operationId: workloadCatalog
      description: Get workload catalog from a repository
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Project object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully updated a team project
          content:
            application/json:
              schema:
                type: object

  '/teams/{teamId}/workloads':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamWorkloads
      x-aclSchema: Workload
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained team workloads configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workload'
    post:
      operationId: createWorkload
      description: Create a team workload
      x-aclSchema: Workload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workload'
        description: Workload object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored workload configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'

  '/teams/{teamId}/workloads/{workloadId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/workloadParams'
    delete:
      operationId: deleteWorkload
      description: Delete a workload from a given team
      x-aclSchema: Workload
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a workload
    get:
      operationId: getWorkload
      description: Get a workload from a given team
      x-aclSchema: Workload
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained workload configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'
    put:
      operationId: editWorkload
      description: Edit a workload from a given team
      x-aclSchema: Workload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workload'
        description: Workload object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited a team workload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'

  '/teams/{teamId}/workloads/{workloadId}/values':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/workloadParams'
    get:
      operationId: getWorkloadValues
      description: Get workload helm chart values
      x-aclSchema: Workload
      responses:
        '200':
          description: Successfully obtained all workload values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadValues'
        '400':
          <<: *BadRequest
    put:
      operationId: editWorkloadValues
      description: Edit workload values
      x-aclSchema: Workload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadValues'
        description: Workload values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited workload values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadValues'
    patch:
      operationId: updateWorkloadValues
      description: Update workload values
      x-aclSchema: Workload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadValues'
        description: Workload values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully updated workload values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadValues'
  /deploy:
    get:
      x-aclSchema: Deploy
      operationId: deploy
      description: Trigger a deployment (only for admin)
      responses:
        '202':
          description: Deploy has been triggered
        '409':
          <<: *OtomiStackError

  /revert:
    get:
      x-aclSchema: Revert
      operationId: revert
      description: Revert session to previous state
      responses:
        '202':
          description: Session state has been reverted

  /restore:
    get:
      x-aclSchema: Restore
      operationId: restore
      description: Restore root to previous state
      responses:
        '202':
          description: Root state has been restored

  '/kubecfg/{teamId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: downloadKubecfg
      description: Download a kubecfg for a team
      x-aclSchema: Kubecfg
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Succesfully finished the download
          content:
            'application/yaml':
              schema:
                $ref: '#/components/schemas/Kubecfg'

  '/dockerconfig/{teamId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: downloadDockerConfig
      description: Download Docker login creds for a team
      x-aclSchema: DockerConfig
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Succesfully finished the download
          content:
            'application/yaml':
              schema:
                $ref: '#/components/schemas/DockerConfig'

  /session:
    get:
      operationId: getSession
      description: Get the session for the current user
      responses:
        '200':
          description: Get the session for the logged in user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        default:
          description: The requested session.
  /apiDocs:
    get:
      operationId: 'apiDocs'
      security: []
      description: Get OpenAPIDoc document
      responses:
        '200':
          description: The requested apiDoc.
          content:
            application/json:
              schema:
                type: object
        default:
          description: The requested apiDoc.

  /settings:
    get:
      operationId: getSettings
      description: Get settings from the 'settings.yaml' or 'secret.settings.yaml' file.
      x-aclSchema: Settings
      parameters:
        - name: ids
          in: query
          description: IDs of settings to return
          schema:
            type: array
            items:
              type: string
              uniqueItems: true
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'

  '/settings/{settingId}':
    parameters:
      - $ref: '#/components/parameters/settingsParams'
    put:
      operationId: editSettings
      description: Edit settings from the 'settings.yaml' or 'secret.settings.yaml' file.
      x-aclSchema: Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
        description: Put new settings.
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited settings.

  /apps/{teamId}:
    parameters:
      - in: path
        name: teamId
        required: true
        schema:
          type: string
    get:
      operationId: getApps
      description: Get list of apps for a team
      x-aclSchema: App
      parameters:
        - name: picks
          in: query
          description: Selection of properties to return.
          schema:
            type: array
            items:
              type: string
              uniqueItems: true
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/App'
    put:
      operationId: toggleApps
      description: Turn on/off list of apps for a team
      x-aclSchema: App
      requestBody:
        description: App toggles
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully toggled apps
  /apps/{teamId}/{appId}:
    parameters:
      - in: path
        name: teamId
        required: true
        schema:
          type: string
      - in: path
        name: appId
        required: true
        schema:
          type: string
    get:
      operationId: getApp
      description: Get app information
      x-aclSchema: App
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
    put:
      operationId: editApp
      description: Edit app values
      x-aclSchema: App
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/App'
        description: Edit app values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited app values.

# -------------------------------------------- Servers

servers:
  - url: '/v1'

# -------------------------------------------- Components
components:
  parameters:
    backupParams:
      name: backupId
      in: path
      description: ID of the backup
      required: true
      schema:
        type: string
    buildParams:
      name: buildId
      in: path
      description: ID of the build
      required: true
      schema:
        type: string
    projectParams:
      name: projectId
      in: path
      description: ID of the project
      required: true
      schema:
        type: string
    teamParams:
      name: teamId
      in: path
      description: ID of team to return
      required: true
      schema:
        type: string
    netpolParams:
      name: netpolId
      in: path
      description: ID of the network policy
      required: true
      schema:
        type: string
    serviceParams:
      name: serviceId
      in: path
      description: ID of the service
      required: true
      schema:
        type: string
    secretParams:
      name: secretId
      in: path
      description: ID of the secret
      required: true
      schema:
        type: string
    settingsParams:
      name: settingId
      in: path
      description: ID of the setting
      required: true
      schema:
        type: string
    workloadParams:
      name: workloadId
      in: path
      description: ID of the workload
      required: true
      schema:
        type: string
  securitySchemes:
    groupAuthn:
      type: apiKey
      name: Authorization
      in: header
    groupAuthz:
      type: apiKey
      name: Authorization
      in: header

  # -------------------------------------------- Schemas
  # Indicate root schemas with UpperCamelCase (e.g. Cluster)
  # Indicate definition references with camelCase (e.g. azureCreds)
  #
  # Please stick to: alphabetical sorting, all Uppercase first and then lowercase.
  # --------------------------------------------
  schemas:
    App:
      $ref: app.yaml#/App
    AppAlertmanager:
      $ref: apps/alertmanager.yaml#/AppAlertmanager
    AppArgocd:
      $ref: apps/argocd.yaml#/AppArgocd
    AppCertManager:
      $ref: apps/cert-manager.yaml#/AppCertManager
    AppCnpg:
      $ref: apps/cnpg.yaml#/AppCnpg
    AppDrone:
      $ref: apps/drone.yaml#/AppDrone
    AppExternalDns:
      $ref: apps/external-dns.yaml#/AppExternalDns
    AppFalco:
      $ref: apps/falco.yaml#/AppFalco
    AppGatekeeper:
      $ref: apps/gatekeeper.yaml#/AppGatekeeper
    AppGitea:
      $ref: apps/gitea.yaml#/AppGitea
    AppGrafana:
      $ref: apps/grafana.yaml#/AppGrafana
    AppHarbor:
      $ref: apps/harbor.yaml#/AppHarbor
    AppHttpbin:
      $ref: apps/httpbin.yaml#/AppHttpbin
    AppIngressNginx:
      $ref: apps/ingress-nginx.yaml#/AppIngressNginx
    AppIstio:
      $ref: apps/istio.yaml#/AppIstio
    AppJaeger:
      $ref: apps/jaeger.yaml#/AppJaeger
    AppKeycloak:
      $ref: apps/keycloak.yaml#/AppKeycloak
    AppKiali:
      $ref: apps/kiali.yaml#/AppKiali
    AppKnative:
      $ref: apps/knative.yaml#/AppKnative
    AppKured:
      $ref: apps/kured.yaml#/AppKured
    AppTekton:
      $ref: apps/tekton.yaml#/AppTekton
    AppLoki:
      $ref: apps/loki.yaml#/AppLoki
    AppMinio:
      $ref: apps/minio.yaml#/AppMinio
    AppOpencost:
      $ref: apps/opencost.yaml#/AppOpencost
    AppPrometheus:
      $ref: apps/prometheus.yaml#/AppPrometheus
    AppRabbitmq:
      $ref: apps/rabbitmq.yaml#/AppRabbitmq
    AppSealedSecrets:
      $ref: apps/sealed-secrets.yaml#/AppSealedSecrets
    AppTempo:
      $ref: apps/tempo.yaml#/AppTempo
    AppThanos:
      $ref: apps/thanos.yaml#/AppThanos
    AppTrivy:
      $ref: apps/trivy.yaml#/AppTrivy
    AppOtel:
      $ref: apps/otel.yaml#/AppOtel
    AppVault:
      $ref: apps/vault.yaml#/AppVault
    AppVelero:
      $ref: apps/velero.yaml#/AppVelero
    AppList:
      $ref: app.yaml#/AppList
    AdditionalCluster:
      $ref: cluster.yaml#/AdditionalCluster
    Backup:
      $ref: backup.yaml#/Backup
    Build:
      $ref: build.yaml#/Build
    Cloudtty:
      $ref: cloudtty.yaml#/Cloudtty
    Cluster:
      $ref: cluster.yaml#/Cluster
    Deploy:
      $ref: deploy.yaml#/Deploy
    Ingress:
      $ref: service.yaml#/Ingress
    IngressCluster:
      $ref: service.yaml#/IngressCluster
    IngressPublic:
      $ref: service.yaml#/IngressPublic
    K8sService:
      $ref: k8s.yaml#/K8sService
    Kubecfg:
      $ref: kubecfg.yaml#/Kubecfg
    LicenseJwt:
      $ref: license.yaml#/LicenseJwt
    License:
      $ref: license.yaml#/License
    Metrics:
      $ref: metrics.yaml#/Metrics
    Netpol:
      $ref: netpol.yaml#/Netpol
    DockerConfig:
      $ref: dockerconfig.yaml#/DockerConfig
    OpenApiValidationError:
      $ref: error.yaml#/OpenApiValidationError
    OtomiStackError:
      $ref: error.yaml#/OtomiStackError
    OtomiCliValues:
      $ref: otomi/cli.yaml#/OtomiCliValues
    Project:
      $ref: project.yaml#/Project
    Restore:
      $ref: restore.yaml#/Restore
    Revert:
      $ref: revert.yaml#/Revert
    SealedSecret:
      $ref: sealedsecret.yaml#/SealedSecret
    SealedSecretsKeys:
      $ref: sealedsecretskeys.yaml#/SealedSecretsKeys
    MigrateSecrets:
      $ref: migratesecrets.yaml#/MigrateSecrets
    K8sSecret:
      $ref: k8sSecret.yaml#/K8sSecret
    Secret:
      $ref: secret.yaml#/Secret
    SecretDockerRegistry:
      $ref: secret.yaml#/SecretDockerRegistry
    SecretGeneric:
      $ref: secret.yaml#/SecretGeneric
    SecretTLS:
      $ref: secret.yaml#/SecretTLS
    Service:
      $ref: service.yaml#/Service
    Session:
      $ref: session.yaml#/Session
    Settings:
      $ref: settings.yaml#/Settings
    Team:
      $ref: team.yaml#/Team
    TeamAuthz:
      $ref: user.yaml#/TeamAuthz
    TeamSelfService:
      $ref: team.yaml#/TeamSelfService
    User:
      $ref: user.yaml#/User
    Workload:
      $ref: workload.yaml#/Workload
    WorkloadValues:
      $ref: workload.yaml#/WorkloadValues
    adminPassword:
      $ref: definitions.yaml#/adminPassword
    alerts:
      $ref: definitions.yaml#/alerts
    annotations:
      $ref: definitions.yaml#/annotations
    autoscaling:
      $ref: definitions.yaml#/autoscaling
    autoscalingEnabled:
      $ref: definitions.yaml#/autoscalingEnabled
    awsAccessKey:
      $ref: definitions.yaml#/awsAccessKey
    awsSecretKey:
      $ref: definitions.yaml#/awsSecretKey
    awsRegion:
      $ref: definitions.yaml#/awsRegion
    awsRole:
      $ref: definitions.yaml#/awsRole
    azureClientId:
      $ref: definitions.yaml#/azureClientId
    azureClientSecret:
      $ref: definitions.yaml#/azureClientSecret
    azureMonitor:
      $ref: definitions.yaml#/azureMonitor
    azureSubscriptionId:
      $ref: definitions.yaml#/azureSubscriptionId
    azureTenantId:
      $ref: definitions.yaml#/azureTenantId
    clusterName:
      $ref: definitions.yaml#/clusterName
    containerSpec:
      $ref: definitions.yaml#/containerSpec
    containerSpecNoSec:
      $ref: definitions.yaml#/containerSpecNoSec
    dns:
      $ref: definitions.yaml#/dns
    domain:
      $ref: definitions.yaml#/domain
    domainSuffix:
      $ref: definitions.yaml#/domainSuffix
    droneGit:
      $ref: definitions.yaml#/droneGit
    email:
      $ref: definitions.yaml#/email
    env:
      $ref: definitions.yaml#/env
    googleAccountJson:
      $ref: definitions.yaml#/googleAccountJson
    googleProject:
      $ref: definitions.yaml#/googleProject
    idName:
      $ref: definitions.yaml#/idName
    image:
      $ref: definitions.yaml#/image
    imageTag:
      $ref: definitions.yaml#/imageTag
    imagePullPolicy:
      $ref: definitions.yaml#/imagePullPolicy
    imageSimple:
      $ref: definitions.yaml#/imageSimple
    ingressClassParameters:
      $ref: definitions.yaml#/ingressClassParameters
    kms:
      $ref: definitions.yaml#/kms
    lokiStorageProvider:
      $ref: apps/loki.yaml#/lokiStorageProvider
    lokiValues:
      $ref: apps/loki.yaml#/lokiValues
    offChoice:
      $ref: definitions.yaml#/offChoice
    path:
      $ref: definitions.yaml#/path
    podSecurityContext:
      $ref: definitions.yaml#/podSecurityContext
    podSpec:
      $ref: definitions.yaml#/podSpec
    policies:
      $ref: policies.yaml#/policies
    priority:
      $ref: definitions.yaml#/priority
    provider:
      $ref: definitions.yaml#/provider
    quantityCpu:
      $ref: definitions.yaml#/quantityCpu
    quantityMem:
      $ref: definitions.yaml#/quantityMem
    rawValues:
      $ref: definitions.yaml#/rawValues
    resource:
      $ref: definitions.yaml#/resource
    resources:
      $ref: definitions.yaml#/resources
    runAsGroup:
      $ref: definitions.yaml#/runAsGroup
    runAsNonRoot:
      $ref: definitions.yaml#/runAsNonRoot
    runAsUser:
      $ref: definitions.yaml#/runAsUser
    scaling:
      $ref: definitions.yaml#/scaling
    script:
      $ref: definitions.yaml#/script
    secrets:
      $ref: definitions.yaml#/secrets
    shortcut:
      $ref: definitions.yaml#/shortcut
    svcPredeployed:
      $ref: definitions.yaml#/svcPredeployed
    url:
      $ref: definitions.yaml#/url
    wordCharacterPattern:
      $ref: definitions.yaml#/wordCharacterPattern
