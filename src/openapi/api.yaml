openapi: '3.0.0'
security:
  - groupAuthz: []
info:
  title: The otomi API
  description: Holds the entire schema needed by console to autogenerate forms
  version: 0.4.95-rc.21

externalDocs:
  description: 'This is the base url of the external documentation'
  url: https://otomi.io/ #Using this URL a final docUrl can be made using this+info.version+ the component's x-externalDocsPath

x-responses:
  BadRequest: &BadRequest
    description: Bad Request
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/OpenApiValidationError'

  OtomiStackError: &OtomiStackError
    description: Resource already exists
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/OtomiStackError'

  NotFound: &NotFound
    description: Resource does not exist
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/OtomiStackError'

x-post-responses: &DefaultPostResponses
  '400':
    <<: *BadRequest
  '409':
    <<: *OtomiStackError

x-get-responses: &DefaultGetResponses
  '400':
    <<: *BadRequest
  '404':
    <<: *NotFound

# -------------------------------------------- Paths
paths:
  /secrets:
    get:
      operationId: getAllSecrets
      description: Get all secrets
      x-aclSchema: Secret
      responses:
        '200':
          description: Successfully obtained all secrets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        '400':
          <<: *BadRequest

  /jobs:
    get:
      operationId: getAllJobs
      description: Get all jobs running on the cluster
      x-aclSchema: Job
      responses:
        '200':
          description: Successfully obtained all jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '400':
          <<: *BadRequest

  /services:
    get:
      operationId: getAllServices
      description: Get all services running on the cluster
      x-aclSchema: Service
      responses:
        '200':
          description: Successfully obtained all services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          <<: *BadRequest

  /teams:
    get:
      operationId: getTeams
      description: Get teams collection
      x-aclSchema: Team
      responses:
        '200':
          description: Successfully obtained teams collection
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      operationId: createTeam
      description: Create a team
      x-aclSchema: Team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Team object that needs to be added to the collection
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully obtained teams collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
  '/teams/{teamId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeam
      description: Get a specific team
      x-aclSchema: Team
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    put:
      operationId: editTeam
      description: Edit a team
      x-aclSchema: Team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Team object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      operationId: deleteTeam
      description: Delete team
      x-aclSchema: Team
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a team

  '/teams/{teamId}/jobs':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamJobs
      description: Get jobs from a given team
      x-aclSchema: Job
      responses:
        '200':
          description: Successfully obtained jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '400':
          <<: *BadRequest
    post:
      operationId: createJob
      description: Create a job
      x-aclSchema: Job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
        description: Job object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored job configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'

  '/teams/{teamId}/services':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamServices
      description: Get services from a given team
      x-aclSchema: Service
      responses:
        '200':
          description: Successfully obtained services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          <<: *BadRequest

    post:
      operationId: createService
      description: Create a service
      x-aclSchema: Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Service object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored service configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

  '/teams/{teamId}/kubernetes/services':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamK8sServices
      description: Get services from a given team
      x-aclSchema: Service
      responses:
        '200':
          description: Successfully obtained kuberntes services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/K8sService'
        '400':
          <<: *BadRequest
  '/teams/{teamId}/jobs/{jobId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/jobParams'
    get:
      operationId: getJob
      description: Get a job from a given team
      x-aclSchema: Job
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained job configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    put:
      operationId: editJob
      description: Edit a job from a given team
      x-aclSchema: Job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
        description: Job object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    delete:
      operationId: deleteJob
      description: Delete a job from a given team
      x-aclSchema: Job
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a job

  '/teams/{teamId}/services/{serviceId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/serviceParams'
    get:
      operationId: getService
      description: Get a service from a given team
      x-aclSchema: Service
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained service configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    put:
      operationId: editService
      description: Edit a service from a given team
      x-aclSchema: Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Service object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    delete:
      operationId: deleteService
      description: Delete a service from a given team
      x-aclSchema: Service
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a service

  '/teams/{teamId}/secrets':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getSecrets
      description: Get secrets from a given team
      x-aclSchema: Secret
      responses:
        '200':
          description: Successfully obtained secrets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenApiValidationError'
    post:
      operationId: createSecret
      description: Create a team secret
      x-aclSchema: Secret
      parameters:
        - name: teamId
          in: path
          description: ID of team
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        description: Service object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored secret configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'

  '/teams/{teamId}/secrets/{secretId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/secretParams'
    get:
      operationId: getSecret
      description: Get a secret from a given team
      x-aclSchema: Secret
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained secret configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
    put:
      operationId: editSecret
      description: Edit a secret from a given team
      x-aclSchema: Secret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
        description: Secret object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited a team secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
    delete:
      operationId: deleteSecret
      description: Delete a secret from a given team
      x-aclSchema: Secret
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a team secret

  '/workloads':
    get:
      operationId: getAllWorkloads
      x-aclSchema: Workload
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained all workloads configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workload'

  '/teams/{teamId}/workloads':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: getTeamWorkloads
      x-aclSchema: Workload
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained team workloads configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workload'
    post:
      operationId: createWorkload
      description: Create a team workload
      x-aclSchema: Workload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workload'
        description: Workload object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully stored workload configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'

  '/teams/{teamId}/workloads/{workloadId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/workloadParams'
    delete:
      operationId: deleteWorkload
      description: Delete a workload from a given team
      x-aclSchema: Workload
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully deleted a workload
    get:
      operationId: getWorkload
      description: Get a workload from a given team
      x-aclSchema: Workload
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully obtained workload configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'
    put:
      operationId: editWorkload
      description: Edit a secret from a given team
      x-aclSchema: Workload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workload'
        description: Workload object that contains updated values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited a team secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'

  '/teams/{teamId}/workloads/{workloadId}/values':
    parameters:
      - $ref: '#/components/parameters/teamParams'
      - $ref: '#/components/parameters/workloadParams'
    get:
      operationId: getWorkloadValues
      description: Get workload helm chart values
      x-aclSchema: Workload
      responses:
        '200':
          description: Successfully obtained all workload values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadValues'
        '400':
          <<: *BadRequest
    put:
      operationId: editWorkloadValues
      description: Edit workload values
      x-aclSchema: Workload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadValues'
        description: Workload values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited a team secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadValues'
  /deploy:
    get:
      x-aclSchema: Deploy
      operationId: deploy
      description: Trigger a deployment (only for admin)
      responses:
        '202':
          description: Deploy has been triggered
        '409':
          <<: *OtomiStackError

  /revert:
    get:
      x-aclSchema: Revert
      operationId: revert
      description: Revert session to previous state
      responses:
        '202':
          description: Session state has been reverted

  /restore:
    get:
      x-aclSchema: Restore
      operationId: restore
      description: Restore root to previous state
      responses:
        '202':
          description: Root state has been restored

  '/kubecfg/{teamId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: downloadKubecfg
      description: Download a kubecfg for a team
      x-aclSchema: Kubecfg
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Succesfully finished the download
          content:
            'application/yaml':
              schema:
                $ref: '#/components/schemas/Kubecfg'

  '/dockerconfig/{teamId}':
    parameters:
      - $ref: '#/components/parameters/teamParams'
    get:
      operationId: downloadDockerConfig
      description: Download Docker login creds for a team
      x-aclSchema: DockerConfig
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Succesfully finished the download
          content:
            'application/yaml':
              schema:
                $ref: '#/components/schemas/DockerConfig'

  /session:
    get:
      operationId: getSession
      description: Get the session for the current user
      responses:
        '200':
          description: Get the session for the logged in user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        default:
          description: The requested session.
  /apiDocs:
    get:
      operationId: 'apiDocs'
      security: []
      description: Get OpenAPIDoc document
      responses:
        '200':
          description: The requested apiDoc.
          content:
            application/json:
              schema:
                type: object
        default:
          description: The requested apiDoc.

  /settings:
    get:
      operationId: getSettings
      description: Get settings from the 'settings.yaml' or 'secret.settings.yaml' file.
      x-aclSchema: Settings
      parameters:
        - name: ids
          in: query
          description: IDs of settings to return
          schema:
            type: array
            items:
              type: string
              uniqueItems: true
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'

  '/settings/{settingId}':
    parameters:
      - $ref: '#/components/parameters/settingsParams'
    put:
      operationId: editSettings
      description: Edit settings from the 'settings.yaml' or 'secret.settings.yaml' file.
      x-aclSchema: Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
        description: Put new settings.
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited settings.

  /apps/{teamId}:
    parameters:
      - in: path
        name: teamId
        required: true
        schema:
          type: string
    get:
      operationId: getApps
      description: Get list of apps for a team
      x-aclSchema: App
      parameters:
        - name: picks
          in: query
          description: Selection of properties to return.
          schema:
            type: array
            items:
              type: string
              uniqueItems: true
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/App'
    put:
      operationId: toggleApps
      description: Turn on/off list of apps for a team
      x-aclSchema: App
      requestBody:
        description: App toggles
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        <<: *DefaultPostResponses
        '200':
          description: Successfully toggled apps
  /apps/{teamId}/{appId}:
    parameters:
      - in: path
        name: teamId
        required: true
        schema:
          type: string
      - in: path
        name: appId
        required: true
        schema:
          type: string
    get:
      operationId: getApp
      description: Get app information
      x-aclSchema: App
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
    put:
      operationId: editApp
      description: Edit app values
      x-aclSchema: App
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/App'
        description: Edit app values
        required: true
      responses:
        <<: *DefaultGetResponses
        '200':
          description: Successfully edited app values.

# -------------------------------------------- Servers

servers:
  - url: '/v1'

# -------------------------------------------- Components
components:
  parameters:
    jobParams:
      name: jobId
      in: path
      description: ID of the job
      required: true
      schema:
        type: string
    teamParams:
      name: teamId
      in: path
      description: ID of team to return
      required: true
      schema:
        type: string
    serviceParams:
      name: serviceId
      in: path
      description: ID of the service
      required: true
      schema:
        type: string
    secretParams:
      name: secretId
      in: path
      description: ID of the secret
      required: true
      schema:
        type: string
    settingsParams:
      name: settingId
      in: path
      description: ID of the setting
      required: true
      schema:
        type: string
    workloadParams:
      name: workloadId
      in: path
      description: ID of the workload
      required: true
      schema:
        type: string
  securitySchemes:
    groupAuthn:
      type: apiKey
      name: Authorization
      in: header
    groupAuthz:
      type: apiKey
      name: Authorization
      in: header

  # -------------------------------------------- Schemas
  # Indicate root schemas with UpperCamelCase (e.g. Cluster)
  # Indicate definition references with camelCase (e.g. azureCreds)
  #
  # Please stick to: alphabetical sorting, all Uppercase first and then lowercase.
  # --------------------------------------------
  schemas:
    App:
      $ref: app.yaml#/App
    AppAlertmanager:
      $ref: apps/alertmanager.yaml#/AppAlertmanager
    AppArgocd:
      $ref: apps/argocd.yaml#/AppArgocd
    AppCertManager:
      $ref: apps/cert-manager.yaml#/AppCertManager
    AppDrone:
      $ref: apps/drone.yaml#/AppDrone
    AppExternalDns:
      $ref: apps/external-dns.yaml#/AppExternalDns
    AppFalco:
      $ref: apps/falco.yaml#/AppFalco
    AppGatekeeper:
      $ref: apps/gatekeeper.yaml#/AppGatekeeper
    AppGitea:
      $ref: apps/gitea.yaml#/AppGitea
    AppGrafana:
      $ref: apps/grafana.yaml#/AppGrafana
    AppHarbor:
      $ref: apps/harbor.yaml#/AppHarbor
    AppHttpbin:
      $ref: apps/httpbin.yaml#/AppHttpbin
    AppIngressNginx:
      $ref: apps/ingress-nginx.yaml#/AppIngressNginx
    AppIstio:
      $ref: apps/istio.yaml#/AppIstio
    AppJaeger:
      $ref: apps/jaeger.yaml#/AppJaeger
    AppKeycloak:
      $ref: apps/keycloak.yaml#/AppKeycloak
    AppKiali:
      $ref: apps/kiali.yaml#/AppKiali
    AppKnative:
      $ref: apps/knative.yaml#/AppKnative
    AppKubeapps:
      $ref: apps/kubeapps.yaml#/AppKubeapps
    AppKubeclarity:
      $ref: apps/kubeclarity.yaml#/AppKubeclarity
    AppKured:
      $ref: apps/kured.yaml#/AppKured
    AppKpack:
      $ref: apps/kpack.yaml#/AppKpack
    AppLoki:
      $ref: apps/loki.yaml#/AppLoki
    AppMinio:
      $ref: apps/minio.yaml#/AppMinio
    AppPrometheus:
      $ref: apps/prometheus.yaml#/AppPrometheus
    AppThanos:
      $ref: apps/thanos.yaml#/AppThanos
    AppTrivy:
      $ref: apps/trivy.yaml#/AppTrivy
    AppVault:
      $ref: apps/vault.yaml#/AppVault
    AppVelero:
      $ref: apps/velero.yaml#/AppVelero
    AppList:
      $ref: app.yaml#/AppList
    AdditionalCluster:
      $ref: cluster.yaml#/AdditionalCluster
    Cluster:
      $ref: cluster.yaml#/Cluster
    Deploy:
      $ref: deploy.yaml#/Deploy
    Ingress:
      $ref: service.yaml#/Ingress
    IngressCluster:
      $ref: service.yaml#/IngressCluster
    IngressPublic:
      $ref: service.yaml#/IngressPublic
    Job:
      $ref: job.yaml#/Job
    K8sService:
      $ref: k8s.yaml#/K8sService
    Kubecfg:
      $ref: kubecfg.yaml#/Kubecfg
    DockerConfig:
      $ref: dockerconfig.yaml#/DockerConfig
    OpenApiValidationError:
      $ref: error.yaml#/OpenApiValidationError
    OtomiStackError:
      $ref: error.yaml#/OtomiStackError
    Restore:
      $ref: restore.yaml#/Restore
    Revert:
      $ref: revert.yaml#/Revert
    Secret:
      $ref: secret.yaml#/Secret
    SecretDockerRegistry:
      $ref: secret.yaml#/SecretDockerRegistry
    SecretGeneric:
      $ref: secret.yaml#/SecretGeneric
    SecretTLS:
      $ref: secret.yaml#/SecretTLS
    Service:
      $ref: service.yaml#/Service
    Session:
      $ref: session.yaml#/Session
    Settings:
      $ref: settings.yaml#/Settings
    Team:
      $ref: team.yaml#/Team
    TeamAuthz:
      $ref: user.yaml#/TeamAuthz
    TeamSelfService:
      $ref: team.yaml#/TeamSelfService
    User:
      $ref: user.yaml#/User
    Workload:
      $ref: workload.yaml#/Workload
    WorkloadValues:
      $ref: workload.yaml#/WorkloadValues
    adminPassword:
      $ref: definitions.yaml#/adminPassword
    alerts:
      $ref: definitions.yaml#/alerts
    annotations:
      $ref: definitions.yaml#/annotations
    autoscaling:
      $ref: definitions.yaml#/autoscaling
    autoscalingEnabled:
      $ref: definitions.yaml#/autoscalingEnabled
    awsAccessKey:
      $ref: definitions.yaml#/awsAccessKey
    awsSecretKey:
      $ref: definitions.yaml#/awsSecretKey
    awsRegion:
      $ref: definitions.yaml#/awsRegion
    awsRole:
      $ref: definitions.yaml#/awsRole
    azureClientId:
      $ref: definitions.yaml#/azureClientId
    azureClientSecret:
      $ref: definitions.yaml#/azureClientSecret
    azureMonitor:
      $ref: definitions.yaml#/azureMonitor
    azureSubscriptionId:
      $ref: definitions.yaml#/azureSubscriptionId
    azureTenantId:
      $ref: definitions.yaml#/azureTenantId
    clusterName:
      $ref: definitions.yaml#/clusterName
    containerSpec:
      $ref: definitions.yaml#/containerSpec
    containerSpecNoSec:
      $ref: definitions.yaml#/containerSpecNoSec
    dns:
      $ref: definitions.yaml#/dns
    domain:
      $ref: definitions.yaml#/domain
    domainSuffix:
      $ref: definitions.yaml#/domainSuffix
    droneGit:
      $ref: definitions.yaml#/droneGit
    email:
      $ref: definitions.yaml#/email
    env:
      $ref: definitions.yaml#/env
    googleAccountJson:
      $ref: definitions.yaml#/googleAccountJson
    googleProject:
      $ref: definitions.yaml#/googleProject
    idName:
      $ref: definitions.yaml#/idName
    image:
      $ref: definitions.yaml#/image
    imageTag:
      $ref: definitions.yaml#/imageTag
    imagePullPolicy:
      $ref: definitions.yaml#/imagePullPolicy
    imageSimple:
      $ref: definitions.yaml#/imageSimple
    ingressClassParameters:
      $ref: definitions.yaml#/ingressClassParameters
    jobSpec:
      $ref: definitions.yaml#/jobSpec
    k8sVersion:
      $ref: definitions.yaml#/k8sVersion
    kms:
      $ref: definitions.yaml#/kms
    ksvcNew:
      $ref: definitions.yaml#/ksvcNew
    ksvcPredeployed:
      $ref: definitions.yaml#/ksvcPredeployed
    lokiStorageProvider:
      $ref: apps/loki.yaml#/lokiStorageProvider
    lokiValues:
      $ref: apps/loki.yaml#/lokiValues
    offChoice:
      $ref: definitions.yaml#/offChoice
    path:
      $ref: definitions.yaml#/path
    podSecurityContext:
      $ref: definitions.yaml#/podSecurityContext
    podSpec:
      $ref: definitions.yaml#/podSpec
    policies:
      $ref: policies.yaml#/policies
    priority:
      $ref: definitions.yaml#/priority
    provider:
      $ref: definitions.yaml#/provider
    quantityCpu:
      $ref: definitions.yaml#/quantityCpu
    quantityMem:
      $ref: definitions.yaml#/quantityMem
    rawValues:
      $ref: definitions.yaml#/rawValues
    resource:
      $ref: definitions.yaml#/resource
    resources:
      $ref: definitions.yaml#/resources
    runAsGroup:
      $ref: definitions.yaml#/runAsGroup
    runAsNonRoot:
      $ref: definitions.yaml#/runAsNonRoot
    runAsUser:
      $ref: definitions.yaml#/runAsUser
    scaling:
      $ref: definitions.yaml#/scaling
    script:
      $ref: definitions.yaml#/script
    secrets:
      $ref: definitions.yaml#/secrets
    shortcut:
      $ref: definitions.yaml#/shortcut
    svcPredeployed:
      $ref: definitions.yaml#/svcPredeployed
    url:
      $ref: definitions.yaml#/url
    wordCharacterPattern:
      $ref: definitions.yaml#/wordCharacterPattern
