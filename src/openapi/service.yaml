Service:
  x-acl:
    admin:
      - delete-any
      - read-any
      - create-any
      - update-any
    team:
      - delete
      - read-any
      - create
      - update
  x-externalDocsPath: docs/console/services
  properties:
    id:
      readOnly: true
      type: string
    teamId:
      $ref: definitions.yaml#/idName
      readOnly: true
    name:
      $ref: definitions.yaml#/idName
      title: Name
      description: A service name.
      example: some-service
    port:
      description: A service port. Defaults to 80.
      type: integer
      minimum: 1
      maximum: 65535
      x-default: 80
    ksvc:
      oneOf:
        - $ref: definitions.yaml#/svcPredeployed
        - $ref: definitions.yaml#/ksvcPredeployed
        - $ref: definitions.yaml#/ksvcNew
      title: Service type
      description: Type of service. Can be a knative service or a regular service.
      x-externalDocsPath: docs/console/services/#configuring-the-service-type
    ingress:
      title: Exposure (ingress)
      description: Determines loadbalancer related configuration for handling the service ingress.
      # Note: the order matters first schema must be nullable empty object
      oneOf:
        - $ref: '#/IngressCluster'
        - $ref: '#/IngressPrivate'
        - $ref: '#/IngressPublic'
      x-externalDocsPath: docs/console/services/#configuring-exposure-ingress
    networkPolicy:
      title: Network policies
      $ref: '#/networkPolicy'
  required:
    - name
    - ingress
  type: object

Ingress:
  properties:
    tlsPass:
      default: false
      description: Pass through the request as is to the backing service. Only available for predeployed regular (non-knative) services.
      title: TLS passthrough
      type: boolean
    useDefaultSubdomain:
      default: true
      description: Use the team domain so that the URL reveals the owner.
      title: Use team domain (preferred)
      type: boolean
    subdomain:
      $ref: definitions.yaml#/domain
      description: A host that is used to set DNS 'A' records
      title: Host
      type: string
    domain:
      $ref: definitions.yaml#/domain
      description: A managed DNS zone
      title: DNS Zone
      type: string
    paths:
      description: The paths in the URL that the service should be mapped to (e.g. for microservices on one app/domain.)
      title: URL paths
      type: array
      items:
        type: string
    forwardPath:
      description: Forward the URL path into the service (don't rewrite to /)
      title: Forward path
      type: boolean
    auth:
      description: Will check if the user is logged in to one of keycloak's OIDC providers.
      title: Authenticate with Single Sign On
      type: boolean
    hasCert:
      description: Select when a certificate exists and should not be generated.
      title: Already has a certificate
      type: boolean
    certSelect:
      default: true
      description: Select one of the TLS secrets created in Otomi.
      title: Select team secret
      type: boolean
    certName:
      description: The name of a TLS secret known to exist in the team namespace.
      example: example-com
      title: Secret name
      type: string
    certArn:
      description: Only available on AWS when an external LB is configured. The cert ARN will be registered on the load balancer for SSL termination.
      example: arn:aws:acm:eu-central-1:xxx:certificate/xxx
      title: Certificate ARN
      type: string
  required:
    - domain
    - subdomain
  type: object

IngressCluster:
  additionalProperties: false
  description:
    'If backend is a ksvc, this will expose a knative service on a local istio gateway, so other services can access it at their "$svc.$namespace" host name.
    (Coming soon: ability to choose endpoints to connect to, so network policies are automatically generated.)'
  title: Cluster
  type: object
  nullable: true
  properties:
    type:
      type: string
      enum:
        - cluster
      default: cluster

IngressPrivate:
  allOf:
    - $ref: '#/Ingress'
    - properties:
        type:
          type: string
          enum:
            - private
          default: private
  nullable: true
  description: Will only accept traffic coming from the private-network loadbalancer. (Coming soon!)
  title: Private

IngressPublic:
  allOf:
    - $ref: '#/Ingress'
    - properties:
        type:
          type: string
          enum:
            - public
          default: public
  nullable: true
  description: Will only accept traffic coming from the public loadbalancer.
  title: Public

networkPolicy:
  additionalProperties: false
  properties:
    ingressPrivate:
      title: Ingress traffic inside the cluster
      description: 'Pods belonging to this service must contain "app: <service name>" label'
      oneOf:
        - title: Deny all
          description: Deny traffic from all teams (including this one)
          properties:
            mode:
              type: string
              default: DenyAll
              enum:
                - DenyAll
        - title: Allow selected
          properties:
            mode:
              type: string
              default: AllowOnly
              enum:
                - AllowOnly
            allow:
              title: Add team or team with service
              type: array
              items:
                type: object
                properties:
                  team:
                    title: Team name
                    description: 'Allow traffic from a given team'
                    type: string
                  service:
                    title: Service name
                    description: 'Allow traffic from pods with "app: <some service name>" label'
                    type: string
                required:
                  - team
        - title: Allow all
          description: Allow traffic from all teams
          properties:
            mode:
              type: string
              default: AllowAll
              enum:
                - AllowAll
